/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers';
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from './common.js';

export declare namespace TransceiverStructs {
  export type NttManagerMessageStruct = {
    id: BytesLike;
    sender: BytesLike;
    payload: BytesLike;
  };

  export type NttManagerMessageStructOutput = [
    id: string,
    sender: string,
    payload: string,
  ] & { id: string; sender: string; payload: string };

  export type TransceiverInstructionStruct = {
    index: BigNumberish;
    payload: BytesLike;
  };

  export type TransceiverInstructionStructOutput = [
    index: bigint,
    payload: string,
  ] & { index: bigint; payload: string };
}

export declare namespace IRateLimiter {
  export type RateLimitParamsStruct = {
    limit: BigNumberish;
    currentCapacity: BigNumberish;
    lastTxTimestamp: BigNumberish;
  };

  export type RateLimitParamsStructOutput = [
    limit: bigint,
    currentCapacity: bigint,
    lastTxTimestamp: bigint,
  ] & { limit: bigint; currentCapacity: bigint; lastTxTimestamp: bigint };

  export type InboundQueuedTransferStruct = {
    amount: BigNumberish;
    txTimestamp: BigNumberish;
    recipient: AddressLike;
  };

  export type InboundQueuedTransferStructOutput = [
    amount: bigint,
    txTimestamp: bigint,
    recipient: string,
  ] & { amount: bigint; txTimestamp: bigint; recipient: string };

  export type OutboundQueuedTransferStruct = {
    recipient: BytesLike;
    amount: BigNumberish;
    txTimestamp: BigNumberish;
    recipientChain: BigNumberish;
    sender: AddressLike;
    transceiverInstructions: BytesLike;
  };

  export type OutboundQueuedTransferStructOutput = [
    recipient: string,
    amount: bigint,
    txTimestamp: bigint,
    recipientChain: bigint,
    sender: string,
    transceiverInstructions: string,
  ] & {
    recipient: string;
    amount: bigint;
    txTimestamp: bigint;
    recipientChain: bigint;
    sender: string;
    transceiverInstructions: string;
  };
}

export declare namespace INttManager {
  export type NttManagerPeerStruct = {
    peerAddress: BytesLike;
    tokenDecimals: BigNumberish;
  };

  export type NttManagerPeerStructOutput = [
    peerAddress: string,
    tokenDecimals: bigint,
  ] & { peerAddress: string; tokenDecimals: bigint };
}

export interface NttManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | 'attestationReceived'
      | 'chainId'
      | 'completeInboundQueuedTransfer'
      | 'completeOutboundQueuedTransfer'
      | 'executeMsg'
      | 'getCurrentInboundCapacity'
      | 'getCurrentOutboundCapacity'
      | 'getInboundLimitParams'
      | 'getInboundQueuedTransfer'
      | 'getMigratesImmutables'
      | 'getMode'
      | 'getOutboundLimitParams'
      | 'getOutboundQueuedTransfer'
      | 'getPeer'
      | 'getThreshold'
      | 'getTransceivers'
      | 'initialize'
      | 'isMessageApproved'
      | 'isMessageExecuted'
      | 'isPaused'
      | 'messageAttestations'
      | 'migrate'
      | 'mode'
      | 'nextMessageSequence'
      | 'owner'
      | 'pause'
      | 'pauser'
      | 'quoteDeliveryPrice'
      | 'rateLimitDuration'
      | 'removeTransceiver'
      | 'setInboundLimit'
      | 'setOutboundLimit'
      | 'setPeer'
      | 'setThreshold'
      | 'setTransceiver'
      | 'token'
      | 'tokenDecimals'
      | 'transceiverAttestedToMessage'
      | 'transfer(uint256,uint16,bytes32)'
      | 'transfer(uint256,uint16,bytes32,bool,bytes)'
      | 'transferOwnership'
      | 'transferPauserCapability'
      | 'unpause'
      | 'upgrade',
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | 'AdminChanged'
      | 'BeaconUpgraded'
      | 'InboundTransferQueued'
      | 'Initialized'
      | 'MessageAlreadyExecuted'
      | 'MessageAttestedTo'
      | 'NotPaused'
      | 'OutboundTransferQueued'
      | 'OutboundTransferRateLimited'
      | 'OwnershipTransferred'
      | 'Paused'
      | 'PauserTransferred'
      | 'PeerUpdated'
      | 'ThresholdChanged'
      | 'TransceiverAdded'
      | 'TransceiverRemoved'
      | 'TransferRedeemed'
      | 'TransferSent'
      | 'Upgraded',
  ): EventFragment;

  encodeFunctionData(
    functionFragment: 'attestationReceived',
    values: [
      BigNumberish,
      BytesLike,
      TransceiverStructs.NttManagerMessageStruct,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'chainId', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'completeInboundQueuedTransfer',
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'completeOutboundQueuedTransfer',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'executeMsg',
    values: [
      BigNumberish,
      BytesLike,
      TransceiverStructs.NttManagerMessageStruct,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'getCurrentInboundCapacity',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'getCurrentOutboundCapacity',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getInboundLimitParams',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'getInboundQueuedTransfer',
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'getMigratesImmutables',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'getMode', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getOutboundLimitParams',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getOutboundQueuedTransfer',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'getPeer',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'getThreshold',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getTransceivers',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'initialize',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'isMessageApproved',
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'isMessageExecuted',
    values: [BytesLike],
  ): string;
  encodeFunctionData(functionFragment: 'isPaused', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'messageAttestations',
    values: [BytesLike],
  ): string;
  encodeFunctionData(functionFragment: 'migrate', values?: undefined): string;
  encodeFunctionData(functionFragment: 'mode', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'nextMessageSequence',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pause', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pauser', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'quoteDeliveryPrice',
    values: [
      BigNumberish,
      TransceiverStructs.TransceiverInstructionStruct[],
      AddressLike[],
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'rateLimitDuration',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'removeTransceiver',
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'setInboundLimit',
    values: [BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'setOutboundLimit',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'setPeer',
    values: [BigNumberish, BytesLike, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'setThreshold',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'setTransceiver',
    values: [AddressLike],
  ): string;
  encodeFunctionData(functionFragment: 'token', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'tokenDecimals',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'transceiverAttestedToMessage',
    values: [BytesLike, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'transfer(uint256,uint16,bytes32)',
    values: [BigNumberish, BigNumberish, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'transfer(uint256,uint16,bytes32,bool,bytes)',
    values: [BigNumberish, BigNumberish, BytesLike, boolean, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferPauserCapability',
    values: [AddressLike],
  ): string;
  encodeFunctionData(functionFragment: 'unpause', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'upgrade',
    values: [AddressLike],
  ): string;

  decodeFunctionResult(
    functionFragment: 'attestationReceived',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'chainId', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'completeInboundQueuedTransfer',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'completeOutboundQueuedTransfer',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'executeMsg', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'getCurrentInboundCapacity',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getCurrentOutboundCapacity',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getInboundLimitParams',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getInboundQueuedTransfer',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getMigratesImmutables',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'getMode', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'getOutboundLimitParams',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getOutboundQueuedTransfer',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'getPeer', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'getThreshold',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getTransceivers',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'isMessageApproved',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'isMessageExecuted',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'isPaused', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'messageAttestations',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'migrate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mode', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'nextMessageSequence',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pauser', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'quoteDeliveryPrice',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'rateLimitDuration',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'removeTransceiver',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setInboundLimit',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setOutboundLimit',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'setPeer', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'setThreshold',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setTransceiver',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'token', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'tokenDecimals',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transceiverAttestedToMessage',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transfer(uint256,uint16,bytes32)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transfer(uint256,uint16,bytes32,bool,bytes)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferPauserCapability',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'unpause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'upgrade', data: BytesLike): Result;
}

export namespace AdminChangedEvent {
  export type InputTuple = [previousAdmin: AddressLike, newAdmin: AddressLike];
  export type OutputTuple = [previousAdmin: string, newAdmin: string];
  export interface OutputObject {
    previousAdmin: string;
    newAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BeaconUpgradedEvent {
  export type InputTuple = [beacon: AddressLike];
  export type OutputTuple = [beacon: string];
  export interface OutputObject {
    beacon: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InboundTransferQueuedEvent {
  export type InputTuple = [digest: BytesLike];
  export type OutputTuple = [digest: string];
  export interface OutputObject {
    digest: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MessageAlreadyExecutedEvent {
  export type InputTuple = [sourceNttManager: BytesLike, msgHash: BytesLike];
  export type OutputTuple = [sourceNttManager: string, msgHash: string];
  export interface OutputObject {
    sourceNttManager: string;
    msgHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MessageAttestedToEvent {
  export type InputTuple = [
    digest: BytesLike,
    transceiver: AddressLike,
    index: BigNumberish,
  ];
  export type OutputTuple = [
    digest: string,
    transceiver: string,
    index: bigint,
  ];
  export interface OutputObject {
    digest: string;
    transceiver: string;
    index: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NotPausedEvent {
  export type InputTuple = [notPaused: boolean];
  export type OutputTuple = [notPaused: boolean];
  export interface OutputObject {
    notPaused: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OutboundTransferQueuedEvent {
  export type InputTuple = [queueSequence: BigNumberish];
  export type OutputTuple = [queueSequence: bigint];
  export interface OutputObject {
    queueSequence: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OutboundTransferRateLimitedEvent {
  export type InputTuple = [
    sender: AddressLike,
    sequence: BigNumberish,
    amount: BigNumberish,
    currentCapacity: BigNumberish,
  ];
  export type OutputTuple = [
    sender: string,
    sequence: bigint,
    amount: bigint,
    currentCapacity: bigint,
  ];
  export interface OutputObject {
    sender: string;
    sequence: bigint;
    amount: bigint;
    currentCapacity: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [paused: boolean];
  export type OutputTuple = [paused: boolean];
  export interface OutputObject {
    paused: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PauserTransferredEvent {
  export type InputTuple = [oldPauser: AddressLike, newPauser: AddressLike];
  export type OutputTuple = [oldPauser: string, newPauser: string];
  export interface OutputObject {
    oldPauser: string;
    newPauser: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PeerUpdatedEvent {
  export type InputTuple = [
    chainId_: BigNumberish,
    oldPeerContract: BytesLike,
    oldPeerDecimals: BigNumberish,
    peerContract: BytesLike,
    peerDecimals: BigNumberish,
  ];
  export type OutputTuple = [
    chainId_: bigint,
    oldPeerContract: string,
    oldPeerDecimals: bigint,
    peerContract: string,
    peerDecimals: bigint,
  ];
  export interface OutputObject {
    chainId_: bigint;
    oldPeerContract: string;
    oldPeerDecimals: bigint;
    peerContract: string;
    peerDecimals: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ThresholdChangedEvent {
  export type InputTuple = [
    oldThreshold: BigNumberish,
    threshold: BigNumberish,
  ];
  export type OutputTuple = [oldThreshold: bigint, threshold: bigint];
  export interface OutputObject {
    oldThreshold: bigint;
    threshold: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransceiverAddedEvent {
  export type InputTuple = [
    transceiver: AddressLike,
    transceiversNum: BigNumberish,
    threshold: BigNumberish,
  ];
  export type OutputTuple = [
    transceiver: string,
    transceiversNum: bigint,
    threshold: bigint,
  ];
  export interface OutputObject {
    transceiver: string;
    transceiversNum: bigint;
    threshold: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransceiverRemovedEvent {
  export type InputTuple = [transceiver: AddressLike, threshold: BigNumberish];
  export type OutputTuple = [transceiver: string, threshold: bigint];
  export interface OutputObject {
    transceiver: string;
    threshold: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferRedeemedEvent {
  export type InputTuple = [digest: BytesLike];
  export type OutputTuple = [digest: string];
  export interface OutputObject {
    digest: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferSentEvent {
  export type InputTuple = [
    recipient: BytesLike,
    amount: BigNumberish,
    fee: BigNumberish,
    recipientChain: BigNumberish,
    msgSequence: BigNumberish,
  ];
  export type OutputTuple = [
    recipient: string,
    amount: bigint,
    fee: bigint,
    recipientChain: bigint,
    msgSequence: bigint,
  ];
  export interface OutputObject {
    recipient: string;
    amount: bigint;
    fee: bigint;
    recipientChain: bigint;
    msgSequence: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface NttManager extends BaseContract {
  connect(runner?: ContractRunner | null): NttManager;
  waitForDeployment(): Promise<this>;

  interface: NttManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent,
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent,
  ): Promise<this>;

  attestationReceived: TypedContractMethod<
    [
      sourceChainId: BigNumberish,
      sourceNttManagerAddress: BytesLike,
      payload: TransceiverStructs.NttManagerMessageStruct,
    ],
    [void],
    'nonpayable'
  >;

  chainId: TypedContractMethod<[], [bigint], 'view'>;

  completeInboundQueuedTransfer: TypedContractMethod<
    [digest: BytesLike],
    [void],
    'nonpayable'
  >;

  completeOutboundQueuedTransfer: TypedContractMethod<
    [messageSequence: BigNumberish],
    [bigint],
    'payable'
  >;

  executeMsg: TypedContractMethod<
    [
      sourceChainId: BigNumberish,
      sourceNttManagerAddress: BytesLike,
      message: TransceiverStructs.NttManagerMessageStruct,
    ],
    [void],
    'nonpayable'
  >;

  getCurrentInboundCapacity: TypedContractMethod<
    [chainId_: BigNumberish],
    [bigint],
    'view'
  >;

  getCurrentOutboundCapacity: TypedContractMethod<[], [bigint], 'view'>;

  getInboundLimitParams: TypedContractMethod<
    [chainId_: BigNumberish],
    [IRateLimiter.RateLimitParamsStructOutput],
    'view'
  >;

  getInboundQueuedTransfer: TypedContractMethod<
    [digest: BytesLike],
    [IRateLimiter.InboundQueuedTransferStructOutput],
    'view'
  >;

  getMigratesImmutables: TypedContractMethod<[], [boolean], 'view'>;

  getMode: TypedContractMethod<[], [bigint], 'view'>;

  getOutboundLimitParams: TypedContractMethod<
    [],
    [IRateLimiter.RateLimitParamsStructOutput],
    'view'
  >;

  getOutboundQueuedTransfer: TypedContractMethod<
    [queueSequence: BigNumberish],
    [IRateLimiter.OutboundQueuedTransferStructOutput],
    'view'
  >;

  getPeer: TypedContractMethod<
    [chainId_: BigNumberish],
    [INttManager.NttManagerPeerStructOutput],
    'view'
  >;

  getThreshold: TypedContractMethod<[], [bigint], 'view'>;

  getTransceivers: TypedContractMethod<[], [string[]], 'view'>;

  initialize: TypedContractMethod<[], [void], 'nonpayable'>;

  isMessageApproved: TypedContractMethod<
    [digest: BytesLike],
    [boolean],
    'view'
  >;

  isMessageExecuted: TypedContractMethod<
    [digest: BytesLike],
    [boolean],
    'view'
  >;

  isPaused: TypedContractMethod<[], [boolean], 'view'>;

  messageAttestations: TypedContractMethod<
    [digest: BytesLike],
    [bigint],
    'view'
  >;

  migrate: TypedContractMethod<[], [void], 'nonpayable'>;

  mode: TypedContractMethod<[], [bigint], 'view'>;

  nextMessageSequence: TypedContractMethod<[], [bigint], 'view'>;

  owner: TypedContractMethod<[], [string], 'view'>;

  pause: TypedContractMethod<[], [void], 'nonpayable'>;

  pauser: TypedContractMethod<[], [string], 'view'>;

  quoteDeliveryPrice: TypedContractMethod<
    [
      recipientChain: BigNumberish,
      transceiverInstructions: TransceiverStructs.TransceiverInstructionStruct[],
      enabledTransceivers: AddressLike[],
    ],
    [[bigint[], bigint]],
    'view'
  >;

  rateLimitDuration: TypedContractMethod<[], [bigint], 'view'>;

  removeTransceiver: TypedContractMethod<
    [transceiver: AddressLike],
    [void],
    'nonpayable'
  >;

  setInboundLimit: TypedContractMethod<
    [limit: BigNumberish, chainId_: BigNumberish],
    [void],
    'nonpayable'
  >;

  setOutboundLimit: TypedContractMethod<
    [limit: BigNumberish],
    [void],
    'nonpayable'
  >;

  setPeer: TypedContractMethod<
    [
      peerChainId: BigNumberish,
      peerContract: BytesLike,
      decimals: BigNumberish,
      inboundLimit: BigNumberish,
    ],
    [void],
    'nonpayable'
  >;

  setThreshold: TypedContractMethod<
    [threshold: BigNumberish],
    [void],
    'nonpayable'
  >;

  setTransceiver: TypedContractMethod<
    [transceiver: AddressLike],
    [void],
    'nonpayable'
  >;

  token: TypedContractMethod<[], [string], 'view'>;

  tokenDecimals: TypedContractMethod<[], [bigint], 'view'>;

  transceiverAttestedToMessage: TypedContractMethod<
    [digest: BytesLike, index: BigNumberish],
    [boolean],
    'view'
  >;

  'transfer(uint256,uint16,bytes32)': TypedContractMethod<
    [amount: BigNumberish, recipientChain: BigNumberish, recipient: BytesLike],
    [bigint],
    'payable'
  >;

  'transfer(uint256,uint16,bytes32,bool,bytes)': TypedContractMethod<
    [
      amount: BigNumberish,
      recipientChain: BigNumberish,
      recipient: BytesLike,
      shouldQueue: boolean,
      transceiverInstructions: BytesLike,
    ],
    [bigint],
    'payable'
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    'nonpayable'
  >;

  transferPauserCapability: TypedContractMethod<
    [newPauser: AddressLike],
    [void],
    'nonpayable'
  >;

  unpause: TypedContractMethod<[], [void], 'nonpayable'>;

  upgrade: TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    'nonpayable'
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment,
  ): T;

  getFunction(
    nameOrSignature: 'attestationReceived',
  ): TypedContractMethod<
    [
      sourceChainId: BigNumberish,
      sourceNttManagerAddress: BytesLike,
      payload: TransceiverStructs.NttManagerMessageStruct,
    ],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'chainId',
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'completeInboundQueuedTransfer',
  ): TypedContractMethod<[digest: BytesLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'completeOutboundQueuedTransfer',
  ): TypedContractMethod<[messageSequence: BigNumberish], [bigint], 'payable'>;
  getFunction(
    nameOrSignature: 'executeMsg',
  ): TypedContractMethod<
    [
      sourceChainId: BigNumberish,
      sourceNttManagerAddress: BytesLike,
      message: TransceiverStructs.NttManagerMessageStruct,
    ],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'getCurrentInboundCapacity',
  ): TypedContractMethod<[chainId_: BigNumberish], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'getCurrentOutboundCapacity',
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'getInboundLimitParams',
  ): TypedContractMethod<
    [chainId_: BigNumberish],
    [IRateLimiter.RateLimitParamsStructOutput],
    'view'
  >;
  getFunction(
    nameOrSignature: 'getInboundQueuedTransfer',
  ): TypedContractMethod<
    [digest: BytesLike],
    [IRateLimiter.InboundQueuedTransferStructOutput],
    'view'
  >;
  getFunction(
    nameOrSignature: 'getMigratesImmutables',
  ): TypedContractMethod<[], [boolean], 'view'>;
  getFunction(
    nameOrSignature: 'getMode',
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'getOutboundLimitParams',
  ): TypedContractMethod<
    [],
    [IRateLimiter.RateLimitParamsStructOutput],
    'view'
  >;
  getFunction(
    nameOrSignature: 'getOutboundQueuedTransfer',
  ): TypedContractMethod<
    [queueSequence: BigNumberish],
    [IRateLimiter.OutboundQueuedTransferStructOutput],
    'view'
  >;
  getFunction(
    nameOrSignature: 'getPeer',
  ): TypedContractMethod<
    [chainId_: BigNumberish],
    [INttManager.NttManagerPeerStructOutput],
    'view'
  >;
  getFunction(
    nameOrSignature: 'getThreshold',
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'getTransceivers',
  ): TypedContractMethod<[], [string[]], 'view'>;
  getFunction(
    nameOrSignature: 'initialize',
  ): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'isMessageApproved',
  ): TypedContractMethod<[digest: BytesLike], [boolean], 'view'>;
  getFunction(
    nameOrSignature: 'isMessageExecuted',
  ): TypedContractMethod<[digest: BytesLike], [boolean], 'view'>;
  getFunction(
    nameOrSignature: 'isPaused',
  ): TypedContractMethod<[], [boolean], 'view'>;
  getFunction(
    nameOrSignature: 'messageAttestations',
  ): TypedContractMethod<[digest: BytesLike], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'migrate',
  ): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'mode',
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'nextMessageSequence',
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'owner',
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'pause',
  ): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'pauser',
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'quoteDeliveryPrice',
  ): TypedContractMethod<
    [
      recipientChain: BigNumberish,
      transceiverInstructions: TransceiverStructs.TransceiverInstructionStruct[],
      enabledTransceivers: AddressLike[],
    ],
    [[bigint[], bigint]],
    'view'
  >;
  getFunction(
    nameOrSignature: 'rateLimitDuration',
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'removeTransceiver',
  ): TypedContractMethod<[transceiver: AddressLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'setInboundLimit',
  ): TypedContractMethod<
    [limit: BigNumberish, chainId_: BigNumberish],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'setOutboundLimit',
  ): TypedContractMethod<[limit: BigNumberish], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'setPeer',
  ): TypedContractMethod<
    [
      peerChainId: BigNumberish,
      peerContract: BytesLike,
      decimals: BigNumberish,
      inboundLimit: BigNumberish,
    ],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'setThreshold',
  ): TypedContractMethod<[threshold: BigNumberish], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'setTransceiver',
  ): TypedContractMethod<[transceiver: AddressLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'token',
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'tokenDecimals',
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'transceiverAttestedToMessage',
  ): TypedContractMethod<
    [digest: BytesLike, index: BigNumberish],
    [boolean],
    'view'
  >;
  getFunction(
    nameOrSignature: 'transfer(uint256,uint16,bytes32)',
  ): TypedContractMethod<
    [amount: BigNumberish, recipientChain: BigNumberish, recipient: BytesLike],
    [bigint],
    'payable'
  >;
  getFunction(
    nameOrSignature: 'transfer(uint256,uint16,bytes32,bool,bytes)',
  ): TypedContractMethod<
    [
      amount: BigNumberish,
      recipientChain: BigNumberish,
      recipient: BytesLike,
      shouldQueue: boolean,
      transceiverInstructions: BytesLike,
    ],
    [bigint],
    'payable'
  >;
  getFunction(
    nameOrSignature: 'transferOwnership',
  ): TypedContractMethod<[newOwner: AddressLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'transferPauserCapability',
  ): TypedContractMethod<[newPauser: AddressLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'unpause',
  ): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'upgrade',
  ): TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    'nonpayable'
  >;

  getEvent(
    key: 'AdminChanged',
  ): TypedContractEvent<
    AdminChangedEvent.InputTuple,
    AdminChangedEvent.OutputTuple,
    AdminChangedEvent.OutputObject
  >;
  getEvent(
    key: 'BeaconUpgraded',
  ): TypedContractEvent<
    BeaconUpgradedEvent.InputTuple,
    BeaconUpgradedEvent.OutputTuple,
    BeaconUpgradedEvent.OutputObject
  >;
  getEvent(
    key: 'InboundTransferQueued',
  ): TypedContractEvent<
    InboundTransferQueuedEvent.InputTuple,
    InboundTransferQueuedEvent.OutputTuple,
    InboundTransferQueuedEvent.OutputObject
  >;
  getEvent(
    key: 'Initialized',
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: 'MessageAlreadyExecuted',
  ): TypedContractEvent<
    MessageAlreadyExecutedEvent.InputTuple,
    MessageAlreadyExecutedEvent.OutputTuple,
    MessageAlreadyExecutedEvent.OutputObject
  >;
  getEvent(
    key: 'MessageAttestedTo',
  ): TypedContractEvent<
    MessageAttestedToEvent.InputTuple,
    MessageAttestedToEvent.OutputTuple,
    MessageAttestedToEvent.OutputObject
  >;
  getEvent(
    key: 'NotPaused',
  ): TypedContractEvent<
    NotPausedEvent.InputTuple,
    NotPausedEvent.OutputTuple,
    NotPausedEvent.OutputObject
  >;
  getEvent(
    key: 'OutboundTransferQueued',
  ): TypedContractEvent<
    OutboundTransferQueuedEvent.InputTuple,
    OutboundTransferQueuedEvent.OutputTuple,
    OutboundTransferQueuedEvent.OutputObject
  >;
  getEvent(
    key: 'OutboundTransferRateLimited',
  ): TypedContractEvent<
    OutboundTransferRateLimitedEvent.InputTuple,
    OutboundTransferRateLimitedEvent.OutputTuple,
    OutboundTransferRateLimitedEvent.OutputObject
  >;
  getEvent(
    key: 'OwnershipTransferred',
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: 'Paused',
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: 'PauserTransferred',
  ): TypedContractEvent<
    PauserTransferredEvent.InputTuple,
    PauserTransferredEvent.OutputTuple,
    PauserTransferredEvent.OutputObject
  >;
  getEvent(
    key: 'PeerUpdated',
  ): TypedContractEvent<
    PeerUpdatedEvent.InputTuple,
    PeerUpdatedEvent.OutputTuple,
    PeerUpdatedEvent.OutputObject
  >;
  getEvent(
    key: 'ThresholdChanged',
  ): TypedContractEvent<
    ThresholdChangedEvent.InputTuple,
    ThresholdChangedEvent.OutputTuple,
    ThresholdChangedEvent.OutputObject
  >;
  getEvent(
    key: 'TransceiverAdded',
  ): TypedContractEvent<
    TransceiverAddedEvent.InputTuple,
    TransceiverAddedEvent.OutputTuple,
    TransceiverAddedEvent.OutputObject
  >;
  getEvent(
    key: 'TransceiverRemoved',
  ): TypedContractEvent<
    TransceiverRemovedEvent.InputTuple,
    TransceiverRemovedEvent.OutputTuple,
    TransceiverRemovedEvent.OutputObject
  >;
  getEvent(
    key: 'TransferRedeemed',
  ): TypedContractEvent<
    TransferRedeemedEvent.InputTuple,
    TransferRedeemedEvent.OutputTuple,
    TransferRedeemedEvent.OutputObject
  >;
  getEvent(
    key: 'TransferSent',
  ): TypedContractEvent<
    TransferSentEvent.InputTuple,
    TransferSentEvent.OutputTuple,
    TransferSentEvent.OutputObject
  >;
  getEvent(
    key: 'Upgraded',
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;

  filters: {
    'AdminChanged(address,address)': TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;
    AdminChanged: TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;

    'BeaconUpgraded(address)': TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;
    BeaconUpgraded: TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;

    'InboundTransferQueued(bytes32)': TypedContractEvent<
      InboundTransferQueuedEvent.InputTuple,
      InboundTransferQueuedEvent.OutputTuple,
      InboundTransferQueuedEvent.OutputObject
    >;
    InboundTransferQueued: TypedContractEvent<
      InboundTransferQueuedEvent.InputTuple,
      InboundTransferQueuedEvent.OutputTuple,
      InboundTransferQueuedEvent.OutputObject
    >;

    'Initialized(uint64)': TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    'MessageAlreadyExecuted(bytes32,bytes32)': TypedContractEvent<
      MessageAlreadyExecutedEvent.InputTuple,
      MessageAlreadyExecutedEvent.OutputTuple,
      MessageAlreadyExecutedEvent.OutputObject
    >;
    MessageAlreadyExecuted: TypedContractEvent<
      MessageAlreadyExecutedEvent.InputTuple,
      MessageAlreadyExecutedEvent.OutputTuple,
      MessageAlreadyExecutedEvent.OutputObject
    >;

    'MessageAttestedTo(bytes32,address,uint8)': TypedContractEvent<
      MessageAttestedToEvent.InputTuple,
      MessageAttestedToEvent.OutputTuple,
      MessageAttestedToEvent.OutputObject
    >;
    MessageAttestedTo: TypedContractEvent<
      MessageAttestedToEvent.InputTuple,
      MessageAttestedToEvent.OutputTuple,
      MessageAttestedToEvent.OutputObject
    >;

    'NotPaused(bool)': TypedContractEvent<
      NotPausedEvent.InputTuple,
      NotPausedEvent.OutputTuple,
      NotPausedEvent.OutputObject
    >;
    NotPaused: TypedContractEvent<
      NotPausedEvent.InputTuple,
      NotPausedEvent.OutputTuple,
      NotPausedEvent.OutputObject
    >;

    'OutboundTransferQueued(uint64)': TypedContractEvent<
      OutboundTransferQueuedEvent.InputTuple,
      OutboundTransferQueuedEvent.OutputTuple,
      OutboundTransferQueuedEvent.OutputObject
    >;
    OutboundTransferQueued: TypedContractEvent<
      OutboundTransferQueuedEvent.InputTuple,
      OutboundTransferQueuedEvent.OutputTuple,
      OutboundTransferQueuedEvent.OutputObject
    >;

    'OutboundTransferRateLimited(address,uint64,uint256,uint256)': TypedContractEvent<
      OutboundTransferRateLimitedEvent.InputTuple,
      OutboundTransferRateLimitedEvent.OutputTuple,
      OutboundTransferRateLimitedEvent.OutputObject
    >;
    OutboundTransferRateLimited: TypedContractEvent<
      OutboundTransferRateLimitedEvent.InputTuple,
      OutboundTransferRateLimitedEvent.OutputTuple,
      OutboundTransferRateLimitedEvent.OutputObject
    >;

    'OwnershipTransferred(address,address)': TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    'Paused(bool)': TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    'PauserTransferred(address,address)': TypedContractEvent<
      PauserTransferredEvent.InputTuple,
      PauserTransferredEvent.OutputTuple,
      PauserTransferredEvent.OutputObject
    >;
    PauserTransferred: TypedContractEvent<
      PauserTransferredEvent.InputTuple,
      PauserTransferredEvent.OutputTuple,
      PauserTransferredEvent.OutputObject
    >;

    'PeerUpdated(uint16,bytes32,uint8,bytes32,uint8)': TypedContractEvent<
      PeerUpdatedEvent.InputTuple,
      PeerUpdatedEvent.OutputTuple,
      PeerUpdatedEvent.OutputObject
    >;
    PeerUpdated: TypedContractEvent<
      PeerUpdatedEvent.InputTuple,
      PeerUpdatedEvent.OutputTuple,
      PeerUpdatedEvent.OutputObject
    >;

    'ThresholdChanged(uint8,uint8)': TypedContractEvent<
      ThresholdChangedEvent.InputTuple,
      ThresholdChangedEvent.OutputTuple,
      ThresholdChangedEvent.OutputObject
    >;
    ThresholdChanged: TypedContractEvent<
      ThresholdChangedEvent.InputTuple,
      ThresholdChangedEvent.OutputTuple,
      ThresholdChangedEvent.OutputObject
    >;

    'TransceiverAdded(address,uint256,uint8)': TypedContractEvent<
      TransceiverAddedEvent.InputTuple,
      TransceiverAddedEvent.OutputTuple,
      TransceiverAddedEvent.OutputObject
    >;
    TransceiverAdded: TypedContractEvent<
      TransceiverAddedEvent.InputTuple,
      TransceiverAddedEvent.OutputTuple,
      TransceiverAddedEvent.OutputObject
    >;

    'TransceiverRemoved(address,uint8)': TypedContractEvent<
      TransceiverRemovedEvent.InputTuple,
      TransceiverRemovedEvent.OutputTuple,
      TransceiverRemovedEvent.OutputObject
    >;
    TransceiverRemoved: TypedContractEvent<
      TransceiverRemovedEvent.InputTuple,
      TransceiverRemovedEvent.OutputTuple,
      TransceiverRemovedEvent.OutputObject
    >;

    'TransferRedeemed(bytes32)': TypedContractEvent<
      TransferRedeemedEvent.InputTuple,
      TransferRedeemedEvent.OutputTuple,
      TransferRedeemedEvent.OutputObject
    >;
    TransferRedeemed: TypedContractEvent<
      TransferRedeemedEvent.InputTuple,
      TransferRedeemedEvent.OutputTuple,
      TransferRedeemedEvent.OutputObject
    >;

    'TransferSent(bytes32,uint256,uint256,uint16,uint64)': TypedContractEvent<
      TransferSentEvent.InputTuple,
      TransferSentEvent.OutputTuple,
      TransferSentEvent.OutputObject
    >;
    TransferSent: TypedContractEvent<
      TransferSentEvent.InputTuple,
      TransferSentEvent.OutputTuple,
      TransferSentEvent.OutputObject
    >;

    'Upgraded(address)': TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
  };
}
