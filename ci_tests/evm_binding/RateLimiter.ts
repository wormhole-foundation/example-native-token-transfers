/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export type NormalizedAmountStruct = {
  amount: BigNumberish;
  decimals: BigNumberish;
};

export type NormalizedAmountStructOutput = [BigNumber, number] & {
  amount: BigNumber;
  decimals: number;
};

export declare namespace IRateLimiter {
  export type InboundQueuedTransferStruct = {
    amount: NormalizedAmountStruct;
    txTimestamp: BigNumberish;
    recipient: string;
  };

  export type InboundQueuedTransferStructOutput = [
    NormalizedAmountStructOutput,
    BigNumber,
    string
  ] & {
    amount: NormalizedAmountStructOutput;
    txTimestamp: BigNumber;
    recipient: string;
  };

  export type OutboundQueuedTransferStruct = {
    recipient: BytesLike;
    amount: NormalizedAmountStruct;
    txTimestamp: BigNumberish;
    recipientChain: BigNumberish;
    sender: string;
    transceiverInstructions: BytesLike;
  };

  export type OutboundQueuedTransferStructOutput = [
    string,
    NormalizedAmountStructOutput,
    BigNumber,
    number,
    string,
    string
  ] & {
    recipient: string;
    amount: NormalizedAmountStructOutput;
    txTimestamp: BigNumber;
    recipientChain: number;
    sender: string;
    transceiverInstructions: string;
  };
}

export interface RateLimiterInterface extends utils.Interface {
  functions: {
    "getCurrentInboundCapacity(uint16)": FunctionFragment;
    "getCurrentOutboundCapacity()": FunctionFragment;
    "getInboundQueuedTransfer(bytes32)": FunctionFragment;
    "getOutboundQueuedTransfer(uint64)": FunctionFragment;
    "rateLimitDuration()": FunctionFragment;
    "tokenDecimals()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getCurrentInboundCapacity"
      | "getCurrentOutboundCapacity"
      | "getInboundQueuedTransfer"
      | "getOutboundQueuedTransfer"
      | "rateLimitDuration"
      | "tokenDecimals"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getCurrentInboundCapacity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentOutboundCapacity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInboundQueuedTransfer",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getOutboundQueuedTransfer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rateLimitDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenDecimals",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getCurrentInboundCapacity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentOutboundCapacity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInboundQueuedTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOutboundQueuedTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rateLimitDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenDecimals",
    data: BytesLike
  ): Result;

  events: {
    "InboundTransferQueued(bytes32)": EventFragment;
    "OutboundTransferQueued(uint64)": EventFragment;
    "OutboundTransferRateLimited(address,uint64,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "InboundTransferQueued"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OutboundTransferQueued"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "OutboundTransferRateLimited"
  ): EventFragment;
}

export interface InboundTransferQueuedEventObject {
  digest: string;
}
export type InboundTransferQueuedEvent = TypedEvent<
  [string],
  InboundTransferQueuedEventObject
>;

export type InboundTransferQueuedEventFilter =
  TypedEventFilter<InboundTransferQueuedEvent>;

export interface OutboundTransferQueuedEventObject {
  queueSequence: BigNumber;
}
export type OutboundTransferQueuedEvent = TypedEvent<
  [BigNumber],
  OutboundTransferQueuedEventObject
>;

export type OutboundTransferQueuedEventFilter =
  TypedEventFilter<OutboundTransferQueuedEvent>;

export interface OutboundTransferRateLimitedEventObject {
  sender: string;
  sequence: BigNumber;
  amount: BigNumber;
  currentCapacity: BigNumber;
}
export type OutboundTransferRateLimitedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  OutboundTransferRateLimitedEventObject
>;

export type OutboundTransferRateLimitedEventFilter =
  TypedEventFilter<OutboundTransferRateLimitedEvent>;

export interface RateLimiter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RateLimiterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getCurrentInboundCapacity(
      chainId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCurrentOutboundCapacity(overrides?: CallOverrides): Promise<[BigNumber]>;

    getInboundQueuedTransfer(
      digest: BytesLike,
      overrides?: CallOverrides
    ): Promise<[IRateLimiter.InboundQueuedTransferStructOutput]>;

    getOutboundQueuedTransfer(
      queueSequence: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[IRateLimiter.OutboundQueuedTransferStructOutput]>;

    rateLimitDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokenDecimals(overrides?: CallOverrides): Promise<[number]>;
  };

  getCurrentInboundCapacity(
    chainId_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCurrentOutboundCapacity(overrides?: CallOverrides): Promise<BigNumber>;

  getInboundQueuedTransfer(
    digest: BytesLike,
    overrides?: CallOverrides
  ): Promise<IRateLimiter.InboundQueuedTransferStructOutput>;

  getOutboundQueuedTransfer(
    queueSequence: BigNumberish,
    overrides?: CallOverrides
  ): Promise<IRateLimiter.OutboundQueuedTransferStructOutput>;

  rateLimitDuration(overrides?: CallOverrides): Promise<BigNumber>;

  tokenDecimals(overrides?: CallOverrides): Promise<number>;

  callStatic: {
    getCurrentInboundCapacity(
      chainId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentOutboundCapacity(overrides?: CallOverrides): Promise<BigNumber>;

    getInboundQueuedTransfer(
      digest: BytesLike,
      overrides?: CallOverrides
    ): Promise<IRateLimiter.InboundQueuedTransferStructOutput>;

    getOutboundQueuedTransfer(
      queueSequence: BigNumberish,
      overrides?: CallOverrides
    ): Promise<IRateLimiter.OutboundQueuedTransferStructOutput>;

    rateLimitDuration(overrides?: CallOverrides): Promise<BigNumber>;

    tokenDecimals(overrides?: CallOverrides): Promise<number>;
  };

  filters: {
    "InboundTransferQueued(bytes32)"(
      digest?: null
    ): InboundTransferQueuedEventFilter;
    InboundTransferQueued(digest?: null): InboundTransferQueuedEventFilter;

    "OutboundTransferQueued(uint64)"(
      queueSequence?: null
    ): OutboundTransferQueuedEventFilter;
    OutboundTransferQueued(
      queueSequence?: null
    ): OutboundTransferQueuedEventFilter;

    "OutboundTransferRateLimited(address,uint64,uint256,uint256)"(
      sender?: string | null,
      sequence?: null,
      amount?: null,
      currentCapacity?: null
    ): OutboundTransferRateLimitedEventFilter;
    OutboundTransferRateLimited(
      sender?: string | null,
      sequence?: null,
      amount?: null,
      currentCapacity?: null
    ): OutboundTransferRateLimitedEventFilter;
  };

  estimateGas: {
    getCurrentInboundCapacity(
      chainId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentOutboundCapacity(overrides?: CallOverrides): Promise<BigNumber>;

    getInboundQueuedTransfer(
      digest: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOutboundQueuedTransfer(
      queueSequence: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rateLimitDuration(overrides?: CallOverrides): Promise<BigNumber>;

    tokenDecimals(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getCurrentInboundCapacity(
      chainId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentOutboundCapacity(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInboundQueuedTransfer(
      digest: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOutboundQueuedTransfer(
      queueSequence: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rateLimitDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenDecimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
