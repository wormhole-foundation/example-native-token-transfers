/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  NttManagerState,
  NttManagerStateInterface,
} from "../NttManagerState";

const _abi = [
  {
    type: "function",
    name: "chainId",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint16",
        internalType: "uint16",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getCurrentInboundCapacity",
    inputs: [
      {
        name: "chainId_",
        type: "uint16",
        internalType: "uint16",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getCurrentOutboundCapacity",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getInboundQueuedTransfer",
    inputs: [
      {
        name: "digest",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    outputs: [
      {
        name: "",
        type: "tuple",
        internalType: "struct IRateLimiter.InboundQueuedTransfer",
        components: [
          {
            name: "amount",
            type: "tuple",
            internalType: "struct TrimmedAmount",
            components: [
              {
                name: "amount",
                type: "uint64",
                internalType: "uint64",
              },
              {
                name: "decimals",
                type: "uint8",
                internalType: "uint8",
              },
            ],
          },
          {
            name: "txTimestamp",
            type: "uint64",
            internalType: "uint64",
          },
          {
            name: "recipient",
            type: "address",
            internalType: "address",
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getMigratesImmutables",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getMode",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint8",
        internalType: "uint8",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getOutboundQueuedTransfer",
    inputs: [
      {
        name: "queueSequence",
        type: "uint64",
        internalType: "uint64",
      },
    ],
    outputs: [
      {
        name: "",
        type: "tuple",
        internalType: "struct IRateLimiter.OutboundQueuedTransfer",
        components: [
          {
            name: "recipient",
            type: "bytes32",
            internalType: "bytes32",
          },
          {
            name: "amount",
            type: "tuple",
            internalType: "struct TrimmedAmount",
            components: [
              {
                name: "amount",
                type: "uint64",
                internalType: "uint64",
              },
              {
                name: "decimals",
                type: "uint8",
                internalType: "uint8",
              },
            ],
          },
          {
            name: "txTimestamp",
            type: "uint64",
            internalType: "uint64",
          },
          {
            name: "recipientChain",
            type: "uint16",
            internalType: "uint16",
          },
          {
            name: "sender",
            type: "address",
            internalType: "address",
          },
          {
            name: "transceiverInstructions",
            type: "bytes",
            internalType: "bytes",
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getPeer",
    inputs: [
      {
        name: "chainId_",
        type: "uint16",
        internalType: "uint16",
      },
    ],
    outputs: [
      {
        name: "",
        type: "tuple",
        internalType: "struct INttManagerState.NttManagerPeer",
        components: [
          {
            name: "peerAddress",
            type: "bytes32",
            internalType: "bytes32",
          },
          {
            name: "tokenDecimals",
            type: "uint8",
            internalType: "uint8",
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getThreshold",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint8",
        internalType: "uint8",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getTransceivers",
    inputs: [],
    outputs: [
      {
        name: "result",
        type: "address[]",
        internalType: "address[]",
      },
    ],
    stateMutability: "pure",
  },
  {
    type: "function",
    name: "initialize",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "isMessageApproved",
    inputs: [
      {
        name: "digest",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "isMessageExecuted",
    inputs: [
      {
        name: "digest",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "isPaused",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "messageAttestations",
    inputs: [
      {
        name: "digest",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    outputs: [
      {
        name: "count",
        type: "uint8",
        internalType: "uint8",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "migrate",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "mode",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint8",
        internalType: "enum INttManager.Mode",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "nextMessageSequence",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint64",
        internalType: "uint64",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "owner",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "pause",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "pauser",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "rateLimitDuration",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint64",
        internalType: "uint64",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "removeTransceiver",
    inputs: [
      {
        name: "transceiver",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "setInboundLimit",
    inputs: [
      {
        name: "limit",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "chainId_",
        type: "uint16",
        internalType: "uint16",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "setOutboundLimit",
    inputs: [
      {
        name: "limit",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "setPeer",
    inputs: [
      {
        name: "peerChainId",
        type: "uint16",
        internalType: "uint16",
      },
      {
        name: "peerContract",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "decimals",
        type: "uint8",
        internalType: "uint8",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "setThreshold",
    inputs: [
      {
        name: "threshold",
        type: "uint8",
        internalType: "uint8",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "setTransceiver",
    inputs: [
      {
        name: "transceiver",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "token",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "tokenDecimals",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint8",
        internalType: "uint8",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "tokenDecimals_",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint8",
        internalType: "uint8",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "transceiverAttestedToMessage",
    inputs: [
      {
        name: "digest",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "index",
        type: "uint8",
        internalType: "uint8",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "transferOwnership",
    inputs: [
      {
        name: "newOwner",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "transferPauserCapability",
    inputs: [
      {
        name: "newPauser",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "upgrade",
    inputs: [
      {
        name: "newImplementation",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "event",
    name: "AdminChanged",
    inputs: [
      {
        name: "previousAdmin",
        type: "address",
        indexed: false,
        internalType: "address",
      },
      {
        name: "newAdmin",
        type: "address",
        indexed: false,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "BeaconUpgraded",
    inputs: [
      {
        name: "beacon",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "InboundTransferQueued",
    inputs: [
      {
        name: "digest",
        type: "bytes32",
        indexed: false,
        internalType: "bytes32",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "Initialized",
    inputs: [
      {
        name: "version",
        type: "uint64",
        indexed: false,
        internalType: "uint64",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "MessageAlreadyExecuted",
    inputs: [
      {
        name: "sourceNttManager",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32",
      },
      {
        name: "msgHash",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "MessageAttestedTo",
    inputs: [
      {
        name: "digest",
        type: "bytes32",
        indexed: false,
        internalType: "bytes32",
      },
      {
        name: "transceiver",
        type: "address",
        indexed: false,
        internalType: "address",
      },
      {
        name: "index",
        type: "uint8",
        indexed: false,
        internalType: "uint8",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "NotPaused",
    inputs: [
      {
        name: "notPaused",
        type: "bool",
        indexed: false,
        internalType: "bool",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "OutboundTransferQueued",
    inputs: [
      {
        name: "queueSequence",
        type: "uint64",
        indexed: false,
        internalType: "uint64",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "OutboundTransferRateLimited",
    inputs: [
      {
        name: "sender",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "sequence",
        type: "uint64",
        indexed: false,
        internalType: "uint64",
      },
      {
        name: "amount",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "currentCapacity",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "OwnershipTransferred",
    inputs: [
      {
        name: "previousOwner",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "newOwner",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "Paused",
    inputs: [
      {
        name: "paused",
        type: "bool",
        indexed: false,
        internalType: "bool",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "PauserTransferred",
    inputs: [
      {
        name: "oldPauser",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "newPauser",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "PeerUpdated",
    inputs: [
      {
        name: "chainId_",
        type: "uint16",
        indexed: true,
        internalType: "uint16",
      },
      {
        name: "oldPeerContract",
        type: "bytes32",
        indexed: false,
        internalType: "bytes32",
      },
      {
        name: "oldPeerDecimals",
        type: "uint8",
        indexed: false,
        internalType: "uint8",
      },
      {
        name: "peerContract",
        type: "bytes32",
        indexed: false,
        internalType: "bytes32",
      },
      {
        name: "peerDecimals",
        type: "uint8",
        indexed: false,
        internalType: "uint8",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "ThresholdChanged",
    inputs: [
      {
        name: "oldThreshold",
        type: "uint8",
        indexed: false,
        internalType: "uint8",
      },
      {
        name: "threshold",
        type: "uint8",
        indexed: false,
        internalType: "uint8",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "TransceiverAdded",
    inputs: [
      {
        name: "transceiver",
        type: "address",
        indexed: false,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "TransceiverAdded",
    inputs: [
      {
        name: "transceiver",
        type: "address",
        indexed: false,
        internalType: "address",
      },
      {
        name: "transceiversNum",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "threshold",
        type: "uint8",
        indexed: false,
        internalType: "uint8",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "TransceiverRemoved",
    inputs: [
      {
        name: "transceiver",
        type: "address",
        indexed: false,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "TransceiverRemoved",
    inputs: [
      {
        name: "transceiver",
        type: "address",
        indexed: false,
        internalType: "address",
      },
      {
        name: "threshold",
        type: "uint8",
        indexed: false,
        internalType: "uint8",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "TransferRedeemed",
    inputs: [
      {
        name: "digest",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "TransferSent",
    inputs: [
      {
        name: "recipient",
        type: "bytes32",
        indexed: false,
        internalType: "bytes32",
      },
      {
        name: "amount",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "fee",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "recipientChain",
        type: "uint16",
        indexed: false,
        internalType: "uint16",
      },
      {
        name: "msgSequence",
        type: "uint64",
        indexed: false,
        internalType: "uint64",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "Upgraded",
    inputs: [
      {
        name: "implementation",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "error",
    name: "AmountTooLarge",
    inputs: [
      {
        name: "amount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
  },
  {
    type: "error",
    name: "CallerNotTransceiver",
    inputs: [
      {
        name: "caller",
        type: "address",
        internalType: "address",
      },
    ],
  },
  {
    type: "error",
    name: "CannotRenounceWhilePaused",
    inputs: [
      {
        name: "account",
        type: "address",
        internalType: "address",
      },
    ],
  },
  {
    type: "error",
    name: "CapacityCannotExceedLimit",
    inputs: [
      {
        name: "newCurrentCapacity",
        type: "tuple",
        internalType: "struct TrimmedAmount",
        components: [
          {
            name: "amount",
            type: "uint64",
            internalType: "uint64",
          },
          {
            name: "decimals",
            type: "uint8",
            internalType: "uint8",
          },
        ],
      },
      {
        name: "newLimit",
        type: "tuple",
        internalType: "struct TrimmedAmount",
        components: [
          {
            name: "amount",
            type: "uint64",
            internalType: "uint64",
          },
          {
            name: "decimals",
            type: "uint8",
            internalType: "uint8",
          },
        ],
      },
    ],
  },
  {
    type: "error",
    name: "DisabledTransceiver",
    inputs: [
      {
        name: "transceiver",
        type: "address",
        internalType: "address",
      },
    ],
  },
  {
    type: "error",
    name: "InboundQueuedTransferNotFound",
    inputs: [
      {
        name: "digest",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
  },
  {
    type: "error",
    name: "InboundQueuedTransferStillQueued",
    inputs: [
      {
        name: "digest",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "transferTimestamp",
        type: "uint256",
        internalType: "uint256",
      },
    ],
  },
  {
    type: "error",
    name: "InvalidInitialization",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidPauser",
    inputs: [
      {
        name: "account",
        type: "address",
        internalType: "address",
      },
    ],
  },
  {
    type: "error",
    name: "InvalidPeer",
    inputs: [
      {
        name: "chainId",
        type: "uint16",
        internalType: "uint16",
      },
      {
        name: "peerAddress",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
  },
  {
    type: "error",
    name: "InvalidPeerChainIdZero",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidPeerDecimals",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidPeerZeroAddress",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidTransceiverZeroAddress",
    inputs: [],
  },
  {
    type: "error",
    name: "NonRegisteredTransceiver",
    inputs: [
      {
        name: "transceiver",
        type: "address",
        internalType: "address",
      },
    ],
  },
  {
    type: "error",
    name: "NotEnoughCapacity",
    inputs: [
      {
        name: "currentCapacity",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "amount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
  },
  {
    type: "error",
    name: "NotInitializing",
    inputs: [],
  },
  {
    type: "error",
    name: "NotMigrating",
    inputs: [],
  },
  {
    type: "error",
    name: "NumberOfDecimalsNotEqual",
    inputs: [
      {
        name: "decimals",
        type: "uint8",
        internalType: "uint8",
      },
      {
        name: "decimalsOther",
        type: "uint8",
        internalType: "uint8",
      },
    ],
  },
  {
    type: "error",
    name: "OnlyDelegateCall",
    inputs: [],
  },
  {
    type: "error",
    name: "OutboundQueuedTransferNotFound",
    inputs: [
      {
        name: "queueSequence",
        type: "uint64",
        internalType: "uint64",
      },
    ],
  },
  {
    type: "error",
    name: "OutboundQueuedTransferStillQueued",
    inputs: [
      {
        name: "queueSequence",
        type: "uint64",
        internalType: "uint64",
      },
      {
        name: "transferTimestamp",
        type: "uint256",
        internalType: "uint256",
      },
    ],
  },
  {
    type: "error",
    name: "OwnableInvalidOwner",
    inputs: [
      {
        name: "owner",
        type: "address",
        internalType: "address",
      },
    ],
  },
  {
    type: "error",
    name: "OwnableUnauthorizedAccount",
    inputs: [
      {
        name: "account",
        type: "address",
        internalType: "address",
      },
    ],
  },
  {
    type: "error",
    name: "ReentrancyGuardReentrantCall",
    inputs: [],
  },
  {
    type: "error",
    name: "RequireContractIsNotPaused",
    inputs: [],
  },
  {
    type: "error",
    name: "RequireContractIsPaused",
    inputs: [],
  },
  {
    type: "error",
    name: "RetrievedIncorrectRegisteredTransceivers",
    inputs: [
      {
        name: "retrieved",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "registered",
        type: "uint256",
        internalType: "uint256",
      },
    ],
  },
  {
    type: "error",
    name: "ThresholdTooHigh",
    inputs: [
      {
        name: "threshold",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "transceivers",
        type: "uint256",
        internalType: "uint256",
      },
    ],
  },
  {
    type: "error",
    name: "TooManyTransceivers",
    inputs: [],
  },
  {
    type: "error",
    name: "TransceiverAlreadyEnabled",
    inputs: [
      {
        name: "transceiver",
        type: "address",
        internalType: "address",
      },
    ],
  },
  {
    type: "error",
    name: "UnexpectedDeployer",
    inputs: [
      {
        name: "expectedOwner",
        type: "address",
        internalType: "address",
      },
      {
        name: "owner",
        type: "address",
        internalType: "address",
      },
    ],
  },
  {
    type: "error",
    name: "ZeroThreshold",
    inputs: [],
  },
] as const;

export class NttManagerState__factory {
  static readonly abi = _abi;
  static createInterface(): NttManagerStateInterface {
    return new utils.Interface(_abi) as NttManagerStateInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): NttManagerState {
    return new Contract(address, _abi, signerOrProvider) as NttManagerState;
  }
}
