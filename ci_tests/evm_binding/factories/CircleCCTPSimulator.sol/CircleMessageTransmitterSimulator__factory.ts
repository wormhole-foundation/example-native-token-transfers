/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  CircleMessageTransmitterSimulator,
  CircleMessageTransmitterSimulatorInterface,
} from "../../CircleCCTPSimulator.sol/CircleMessageTransmitterSimulator";

const _abi = [
  {
    type: "constructor",
    inputs: [
      {
        name: "messageTransmitter_",
        type: "address",
        internalType: "address",
      },
      {
        name: "attesterPrivateKey_",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "fetchMessageTransmitterLogsFromLogs",
    inputs: [
      {
        name: "logs",
        type: "tuple[]",
        internalType: "struct VmSafe.Log[]",
        components: [
          {
            name: "topics",
            type: "bytes32[]",
            internalType: "bytes32[]",
          },
          {
            name: "data",
            type: "bytes",
            internalType: "bytes",
          },
          {
            name: "emitter",
            type: "address",
            internalType: "address",
          },
        ],
      },
    ],
    outputs: [
      {
        name: "",
        type: "tuple[]",
        internalType: "struct VmSafe.Log[]",
        components: [
          {
            name: "topics",
            type: "bytes32[]",
            internalType: "bytes32[]",
          },
          {
            name: "data",
            type: "bytes",
            internalType: "bytes",
          },
          {
            name: "emitter",
            type: "address",
            internalType: "address",
          },
        ],
      },
    ],
    stateMutability: "pure",
  },
  {
    type: "function",
    name: "fetchSignedMessageFromLog",
    inputs: [
      {
        name: "log",
        type: "tuple",
        internalType: "struct VmSafe.Log",
        components: [
          {
            name: "topics",
            type: "bytes32[]",
            internalType: "bytes32[]",
          },
          {
            name: "data",
            type: "bytes",
            internalType: "bytes",
          },
          {
            name: "emitter",
            type: "address",
            internalType: "address",
          },
        ],
      },
    ],
    outputs: [
      {
        name: "",
        type: "tuple",
        internalType: "struct CCTPMessageLib.CCTPMessage",
        components: [
          {
            name: "message",
            type: "bytes",
            internalType: "bytes",
          },
          {
            name: "signature",
            type: "bytes",
            internalType: "bytes",
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "messageTransmitter",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "contract IMessageTransmitter",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "signMessage",
    inputs: [
      {
        name: "message",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [
      {
        name: "signedMessage",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "valid",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "vm",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "contract Vm",
      },
    ],
    stateMutability: "view",
  },
] as const;

const _bytecode =
  "0x608060409080825234620002fe57600090828162000e7780380380916200002782856200032d565b833981010312620002fa576200003d8162000351565b602091820151835460018290556001600160a81b031916600883901b610100600160a81b0316176001600160a01b03928316151560ff1690811780865591929062000092575b8551610b109081620003678239f35b85519363ffa1864960e01b855260049384860152737109709ecfa91a80626ff3989d68f67f5b1dd12d928186602481875afa9586156200023e578796620002ba575b50829060081c16948751639b0d94b760e01b8152828187818a5afa928315620002b057889362000270575b5050833b156200026c57875163ca669fa760e01b80825292841686820181905293908881602481838a5af1801562000262576200024c575b50863b156200024857885163fae3687960e01b81529116858201528681602481838a5af180156200023e5790879162000226575b5050823b156200022257906024869283895195869485938452888401525af18015620002185790849162000200575b5050813b15620001fc576001602484928387519586948593632ef794dd60e21b85528401525af18015620001f257620001d7575b80808062000083565b620001e3829162000303565b620001ef5780620001ce565b80fd5b83513d84823e3d90fd5b8280fd5b6200020b9062000303565b620001fc5782386200019a565b85513d86823e3d90fd5b8580fd5b620002319062000303565b620002225785386200016b565b88513d89823e3d90fd5b8780fd5b6200025a9098919862000303565b963862000137565b8a513d8b823e3d90fd5b8680fd5b9080929350813d8311620002a8575b6200028b81836200032d565b810103126200026c576200029f9062000351565b903880620000ff565b503d6200027f565b89513d8a823e3d90fd5b9095508181813d8311620002f2575b620002d581836200032d565b810103126200026c57620002ea839162000351565b9590620000d4565b503d620002c9565b5080fd5b600080fd5b6001600160401b0381116200031757604052565b634e487b7160e01b600052604160045260246000fd5b601f909101601f19168101906001600160401b038211908210176200031757604052565b51906001600160a01b0382168203620002fe5756fe604060808152600436101561001357600080fd5b6000803560e01c918263167c52221461007c57505080633a768463146100775780637b04c1811461007257806385a5affe1461006d578063874361aa146100685763c19912191461006357600080fd5b6105f7565b610547565b61042d565b610400565b6103d1565b346101885760209182600319360112610185576004359067ffffffffffffffff821161018557506100b283913690600401610298565b60608284516100c0816101a2565b828152015201908151928184511061014b57610125826101479501519361011c6100f46100ee878451610952565b9661069c565b61010a8561010483865151610826565b10610833565b61011681845151610826565b906106aa565b90515114610876565b61012e83610a02565b90610137610201565b9384528301525191829182610399565b0390f35b606491519062461bcd60e51b825260048201526015602482015274746f55696e743235365f6f75744f66426f756e647360581b6044820152fd5b80fd5b5080fd5b634e487b7160e01b600052604160045260246000fd5b6040810190811067ffffffffffffffff8211176101be57604052565b61018c565b6060810190811067ffffffffffffffff8211176101be57604052565b90601f8019910116810190811067ffffffffffffffff8211176101be57604052565b6040519061020e826101a2565b565b67ffffffffffffffff81116101be5760051b60200190565b81601f8201121561027f5780359067ffffffffffffffff82116101be576040519261025d601f8401601f1916602001856101df565b8284526020838301011161027f57816000926020809301838601378301015290565b600080fd5b35906001600160a01b038216820361027f57565b91909160608184031261027f57604051906102b2826101c3565b819381359067ffffffffffffffff9182811161027f5783019281601f8501121561027f578335936102e285610210565b906102f060405192836101df565b858252602095868084019160051b8301019185831161027f5787809101915b838310610349575050505085528381013592831161027f5760409361033a8593610344958401610228565b9086015201610284565b910152565b823581529181019188910161030f565b919082519283825260005b848110610385575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201610364565b906103ce916020815260206103b983516040838501526060840190610359565b920151906040601f1982850301910152610359565b90565b3461027f57600036600319011261027f576020604051737109709ecfa91a80626ff3989d68f67f5b1dd12d8152f35b3461027f57600036600319011261027f5760005460405160089190911c6001600160a01b03168152602090f35b3461027f57602036600319011261027f5760043567ffffffffffffffff811161027f57610469610464610147923690600401610228565b610a02565b604051918291602083526020830190610359565b602080820190808352835180925260409283810182858560051b84010196019460009081935b8685106104b557505050505050505090565b9091929394959697603f198282030185528689516060928584820183519583528551809152846080840196019089905b80821061052a57505050908291610509600196868096015184820387860152610359565b9281878060a01b03910151169101529a0195019501939695949291906104a3565b82518852968601968d968a945092909201916001909101906104e5565b3461027f5760208060031936011261027f5767ffffffffffffffff9060043582811161027f573660238201121561027f57806004013561058681610210565b9361059460405195866101df565b818552838501906024809360051b8501019336851161027f57838101925b8584106105d1576101476105c58961071f565b6040519182918261047d565b833583811161027f5787916105ec8392883691870101610298565b8152019301926105b2565b3461027f57600036600319011261027f57602060ff600054166040519015158152f35b634e487b7160e01b600052601160045260246000fd5b600019811461063f5760010190565b61061a565b634e487b7160e01b600052603260045260246000fd5b8051156106675760200190565b610644565b80518210156106675760209160051b010190565b906001820180921161063f57565b90601f820180921161063f57565b604001908160401161063f57565b9190820180921161063f57565b906106c182610210565b6040906106d0825191826101df565b83815280936106e1601f1991610210565b0191600091825b8481106106f6575050505050565b6020908351610704816101c3565b606080825283908183015286868301528285010152016106e8565b906000805b835181101561078c577f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b03661076261075b838761066c565b515161065a565b5114610777575b61077290610630565b610724565b9061078461077291610680565b919050610769565b50610799909291926106b7565b6000805b835181101561081f577f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b0366107d461075b838761066c565b51146107e9575b6107e490610630565b61079d565b906108176107e4916107fb848761066c565b51610806828761066c565b52610811818661066c565b50610680565b9190506107db565b5050905090565b9190820391821161063f57565b1561083a57565b60405162461bcd60e51b8152602060048201526014602482015273546f6f206d616e7920657874726120627974657360601b6044820152606490fd5b1561087d57565b60405162461bcd60e51b815260206004820152602a60248201527f6661696c656420746f207061727365204d6573736167655472616e736d6974746044820152696572206d65737361676560b01b6064820152608490fd5b156108dc57565b60405162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b6044820152606490fd5b1561091957565b60405162461bcd60e51b8152602060048201526011602482015270736c6963655f6f75744f66426f756e647360781b6044820152606490fd5b6109668261095f8161068e565b10156108d5565b61097b81516109748461069c565b1115610912565b81610993575050604051600081526020810160405290565b60405191601f8116916040831560051b80858701019484860193010101905b8084106109ca5750508252601f01601f191660405290565b90928351815260208091019301906109b2565b9081606091031261027f57805160ff8116810361027f57916040602083015192015190565b6020815191012060015490604051916338d07aa960e21b835260048301526024820152606081604481737109709ecfa91a80626ff3989d68f67f5b1dd12d5afa8015610ace576000808092610a92575b60408051602081019390935282019290925260f89190911b6001600160f81b031916606082015290506103ce81606181015b03601f1981018352826101df565b5050506103ce610abb610a849260603d8111610ac7575b610ab381836101df565b8101906109dd565b91935090915082610a52565b503d610aa9565b6040513d6000823e3d90fdfea2646970667358221220b1ec7a40adabf45ecb8d74fce8b314d7f01ec4ee3b63d125b779b7f790d8f9f664736f6c63430008130033";

type CircleMessageTransmitterSimulatorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CircleMessageTransmitterSimulatorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CircleMessageTransmitterSimulator__factory extends ContractFactory {
  constructor(...args: CircleMessageTransmitterSimulatorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    messageTransmitter_: string,
    attesterPrivateKey_: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<CircleMessageTransmitterSimulator> {
    return super.deploy(
      messageTransmitter_,
      attesterPrivateKey_,
      overrides || {}
    ) as Promise<CircleMessageTransmitterSimulator>;
  }
  override getDeployTransaction(
    messageTransmitter_: string,
    attesterPrivateKey_: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(
      messageTransmitter_,
      attesterPrivateKey_,
      overrides || {}
    );
  }
  override attach(address: string): CircleMessageTransmitterSimulator {
    return super.attach(address) as CircleMessageTransmitterSimulator;
  }
  override connect(signer: Signer): CircleMessageTransmitterSimulator__factory {
    return super.connect(signer) as CircleMessageTransmitterSimulator__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CircleMessageTransmitterSimulatorInterface {
    return new utils.Interface(
      _abi
    ) as CircleMessageTransmitterSimulatorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CircleMessageTransmitterSimulator {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as CircleMessageTransmitterSimulator;
  }
}
