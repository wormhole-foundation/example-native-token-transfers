/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TrimmingTest,
  TrimmingTestInterface,
} from "../../TrimmedAmount.t.sol/TrimmingTest";

const _abi = [
  {
    type: "function",
    name: "IS_TEST",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "excludeArtifacts",
    inputs: [],
    outputs: [
      {
        name: "excludedArtifacts_",
        type: "string[]",
        internalType: "string[]",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "excludeContracts",
    inputs: [],
    outputs: [
      {
        name: "excludedContracts_",
        type: "address[]",
        internalType: "address[]",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "excludeSenders",
    inputs: [],
    outputs: [
      {
        name: "excludedSenders_",
        type: "address[]",
        internalType: "address[]",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "failed",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "targetArtifactSelectors",
    inputs: [],
    outputs: [
      {
        name: "targetedArtifactSelectors_",
        type: "tuple[]",
        internalType: "struct StdInvariant.FuzzSelector[]",
        components: [
          {
            name: "addr",
            type: "address",
            internalType: "address",
          },
          {
            name: "selectors",
            type: "bytes4[]",
            internalType: "bytes4[]",
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "targetArtifacts",
    inputs: [],
    outputs: [
      {
        name: "targetedArtifacts_",
        type: "string[]",
        internalType: "string[]",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "targetContracts",
    inputs: [],
    outputs: [
      {
        name: "targetedContracts_",
        type: "address[]",
        internalType: "address[]",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "targetInterfaces",
    inputs: [],
    outputs: [
      {
        name: "targetedInterfaces_",
        type: "tuple[]",
        internalType: "struct StdInvariant.FuzzInterface[]",
        components: [
          {
            name: "addr",
            type: "address",
            internalType: "address",
          },
          {
            name: "artifacts",
            type: "string[]",
            internalType: "string[]",
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "targetSelectors",
    inputs: [],
    outputs: [
      {
        name: "targetedSelectors_",
        type: "tuple[]",
        internalType: "struct StdInvariant.FuzzSelector[]",
        components: [
          {
            name: "addr",
            type: "address",
            internalType: "address",
          },
          {
            name: "selectors",
            type: "bytes4[]",
            internalType: "bytes4[]",
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "targetSenders",
    inputs: [],
    outputs: [
      {
        name: "targetedSenders_",
        type: "address[]",
        internalType: "address[]",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "testAddOperatorDecimalsNotEqualNoRevert",
    inputs: [],
    outputs: [],
    stateMutability: "pure",
  },
  {
    type: "function",
    name: "testAddOperatorDecimalsNotEqualRevert",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "testAddOperatorNonZero",
    inputs: [],
    outputs: [],
    stateMutability: "pure",
  },
  {
    type: "function",
    name: "testAddOperatorZero",
    inputs: [],
    outputs: [],
    stateMutability: "pure",
  },
  {
    type: "function",
    name: "testDifferentDecimals",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "testFuzz_AddOperatorOverload",
    inputs: [
      {
        name: "a",
        type: "uint72",
        internalType: "TrimmedAmount",
      },
      {
        name: "b",
        type: "uint72",
        internalType: "TrimmedAmount",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "testFuzz_EqOperatorOverload",
    inputs: [
      {
        name: "a",
        type: "uint72",
        internalType: "TrimmedAmount",
      },
      {
        name: "b",
        type: "uint72",
        internalType: "TrimmedAmount",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "testFuzz_GtOperatorOverload",
    inputs: [
      {
        name: "a",
        type: "uint72",
        internalType: "TrimmedAmount",
      },
      {
        name: "b",
        type: "uint72",
        internalType: "TrimmedAmount",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "testFuzz_LtOperatorOverload",
    inputs: [
      {
        name: "a",
        type: "uint72",
        internalType: "TrimmedAmount",
      },
      {
        name: "b",
        type: "uint72",
        internalType: "TrimmedAmount",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "testFuzz_SubOperatorOverload",
    inputs: [
      {
        name: "a",
        type: "uint72",
        internalType: "TrimmedAmount",
      },
      {
        name: "b",
        type: "uint72",
        internalType: "TrimmedAmount",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "testSubOperatorNonZero",
    inputs: [],
    outputs: [],
    stateMutability: "pure",
  },
  {
    type: "function",
    name: "testSubOperatorOverflow",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "testSubOperatorZero",
    inputs: [],
    outputs: [],
    stateMutability: "pure",
  },
  {
    type: "function",
    name: "testTrimLessThan8",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "testTrimmingRoundTrip",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "test_packUnpack",
    inputs: [
      {
        name: "amount",
        type: "uint64",
        internalType: "uint64",
      },
      {
        name: "decimals",
        type: "uint8",
        internalType: "uint8",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "event",
    name: "log",
    inputs: [
      {
        name: "",
        type: "string",
        indexed: false,
        internalType: "string",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_address",
    inputs: [
      {
        name: "",
        type: "address",
        indexed: false,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_array",
    inputs: [
      {
        name: "val",
        type: "uint256[]",
        indexed: false,
        internalType: "uint256[]",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_array",
    inputs: [
      {
        name: "val",
        type: "int256[]",
        indexed: false,
        internalType: "int256[]",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_array",
    inputs: [
      {
        name: "val",
        type: "address[]",
        indexed: false,
        internalType: "address[]",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_bytes",
    inputs: [
      {
        name: "",
        type: "bytes",
        indexed: false,
        internalType: "bytes",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_bytes32",
    inputs: [
      {
        name: "",
        type: "bytes32",
        indexed: false,
        internalType: "bytes32",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_int",
    inputs: [
      {
        name: "",
        type: "int256",
        indexed: false,
        internalType: "int256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_named_address",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string",
      },
      {
        name: "val",
        type: "address",
        indexed: false,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_named_array",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string",
      },
      {
        name: "val",
        type: "uint256[]",
        indexed: false,
        internalType: "uint256[]",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_named_array",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string",
      },
      {
        name: "val",
        type: "int256[]",
        indexed: false,
        internalType: "int256[]",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_named_array",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string",
      },
      {
        name: "val",
        type: "address[]",
        indexed: false,
        internalType: "address[]",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_named_bytes",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string",
      },
      {
        name: "val",
        type: "bytes",
        indexed: false,
        internalType: "bytes",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_named_bytes32",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string",
      },
      {
        name: "val",
        type: "bytes32",
        indexed: false,
        internalType: "bytes32",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_named_decimal_int",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string",
      },
      {
        name: "val",
        type: "int256",
        indexed: false,
        internalType: "int256",
      },
      {
        name: "decimals",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_named_decimal_uint",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string",
      },
      {
        name: "val",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "decimals",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_named_int",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string",
      },
      {
        name: "val",
        type: "int256",
        indexed: false,
        internalType: "int256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_named_string",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string",
      },
      {
        name: "val",
        type: "string",
        indexed: false,
        internalType: "string",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_named_uint",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string",
      },
      {
        name: "val",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_string",
    inputs: [
      {
        name: "",
        type: "string",
        indexed: false,
        internalType: "string",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_uint",
    inputs: [
      {
        name: "",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "logs",
    inputs: [
      {
        name: "",
        type: "bytes",
        indexed: false,
        internalType: "bytes",
      },
    ],
    anonymous: false,
  },
  {
    type: "error",
    name: "AmountTooLarge",
    inputs: [
      {
        name: "amount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
  },
  {
    type: "error",
    name: "NumberOfDecimalsNotEqual",
    inputs: [
      {
        name: "decimals",
        type: "uint8",
        internalType: "uint8",
      },
      {
        name: "decimalsOther",
        type: "uint8",
        internalType: "uint8",
      },
    ],
  },
] as const;

const _bytecode =
  "0x6080806040523461002d57600160ff1981816007541617600755600b541617600b5561212e90816100338239f35b600080fdfe6080604052600436101561001257600080fd5b6000803560e01c806303b247c614611636578063122c4d9214611175578063158d361e146116365780631eaaf08f146116025780631ed7831c1461158357806325653d8c146114835780632ade38801461121057806332962b7a146111755780633841c23d146111895780633a5c1b0f146111755780633e5e3c23146110f65780633f7286f414611077578063477e93e214610f625780634e2aa78f14610e9157806366d9a9a014610d145780637cbbaee514610bf857806385226c8114610acf57806391336dd8146109ac578063916a17c61461075157806394726d8f14610641578063b5508aa914610504578063ba414fa6146104df578063d0516883146103dd578063dd0cd1e014610263578063e20c9f71146101d4578063f25d7b451461016b5763fa7626d41461014657600080fd5b34610168578060031936011261016857602060ff600754166040519015158152f35b80fd5b5034610168576040366003190112610168576001600160401b03600435818116908181036101d0576024359160ff83168093036101cc576101c9938368ffffffffffffffff006101c39460081b161760081c16611a6c565b80611a6c565b80f35b8480fd5b8380fd5b5034610168578060031936011261016857604051601380548083529083526020808301937f66de8ffda797e3de9c05e8fc57b3bf0ec28a930d40b0d285d93c06501cf6a09092915b8282106102435761023f8561023381890382611906565b6040519182918261171c565b0390f35b83546001600160a01b03168652948501946001938401939091019061021c565b5034610168578060031936011261016857604051610280816118eb565b60128152600a602082015260405191610298836118eb565b600892838152836020820152815b60ff8082169060028210156103d9576102ca816102c38489611e09565b5116611c21565b600590808202918204036103c5576102ef90826102e7858a611e09565b511690611c32565b908082168881036103a75750630bebc2006001600160401b0380938a1c16019182116103915761032a816103238588611e09565b5116611e30565b926007938085029485040361037d57926103739261036e92610350610378979689611e09565b5116908a68ffffffffffffffff008092821b1617928b1b1617611e64565b611e47565b611df8565b6102a6565b634e487b7160e01b87526011600452602487fd5b634e487b7160e01b600052601160045260246000fd5b6044908960405191635ce6db6160e11b835260048301526024820152fd5b634e487b7160e01b86526011600452602486fd5b8480f35b50346101685780600319360112610168576040516103fa816118eb565b601281526003602082015260405190610412826118eb565b60089081835260036020840152835b60ff8082169060028210156104db5761043e816102c38487611e09565b9060059180830290838204036104c75761046061047b91836102e7878a611e09565b6104758361046e878a611e09565b5116611ca1565b90611f00565b9261048a82610323838b611e09565b808402938404036104c757926103739268ffffffffffffffff0061036e936104b66104c298978c611e09565b511691891b1617611e64565b610421565b634e487b7160e01b89526011600452602489fd5b8680f35b503461016857806003193601126101685760206104fa611966565b6040519015158152f35b503461016857806003193601126101685760175461052181611a55565b61052e6040519182611906565b81815260209182820160176000527fc624b66cc0138b8fabc209247f72d758e1cf3343756d543badbf24212bed8c15906000905b838210610577576040518061023f8782611860565b60405160009184549160019280841c908481168015610637575b8b83108114610623578284528b94939291811561060757506001146105ce575b506105c0816001960382611906565b815201930191019091610562565b60008881528481209650905b8082106105f057508101830194506105c06105b1565b8654838301860152958501958b94909101906105da565b60ff19168584015250151560051b8101830194506105c06105b1565b634e487b7160e01b87526022600452602487fd5b91607f1691610591565b503461016857806003193601126101685760405161065e816118eb565b6012815260036020820152815b60ff908181169160028310156103d957610689816102c38587611e09565b90600591808302928304036103c5576106a6816102c38688611e09565b916006928084029384040361037d57906102e76106cc6106d39493836102e7898b611e09565b9587611e09565b9184737109709ecfa91a80626ff3989d68f67f5b1dd12d803b1561074d57818091600460405180948193633d21120560e21b83525af180156107425761072e575b50506107299261072391611f00565b50611df8565b61066b565b610737906118c2565b6101cc578438610714565b6040513d84823e3d90fd5b5080fd5b5034610168578060031936011261016857601a5461076e81611a55565b9061077c6040519283611906565b808252601a8352827f057c384a7d1c54f3a1b2e5e67b2617b8224fdfd1ea7234eea573a6ff665ff63e602084015b8383106107bf576040518061023f87826117a8565b6040516107cb816118eb565b82546001600160a01b031681526040516001840180548083529089526020808a20908301918a915b81600784011061093e5784600197946002979460209794610856945491818110610922575b818110610906575b8181106108ea575b8181106108ce575b8181106108b2575b818110610896575b81811061087c575b10610868575b500382611906565b838201528152019201920191906107aa565b6001600160e01b031916815286013861084e565b828a1b6001600160e01b0319168452928901928b01610848565b604083901b6001600160e01b0319168452928901928b01610840565b606083901b6001600160e01b0319168452928901928b01610838565b608083901b6001600160e01b0319168452928901928b01610830565b60a083901b6001600160e01b0319168452928901928b01610828565b60c083901b6001600160e01b0319168452928901928b01610820565b60e083901b6001600160e01b0319168452928901928b01610818565b926001610100600892865463ffffffff60e01b90818160e01b16835260c08282821b16602085015260a08383821b1660408601526080848460608282851b16818a01521b1690860152838360401b1690850152828260201b16908401521660e08201520194019201916107f3565b5034610168576040366003190112610168576109c661163b565b6109ce611658565b90737109709ecfa91a80626ff3989d68f67f5b1dd12d90813b156101d0576040519184632631f2b160e11b9384815260ff861660ff85161460048201528181602481865afa801561074257610abb575b50506001600160401b0392838360081c16848660081c16810180911161037d5790829187933b156101d05760248492879460405195869485938452111560048301525afa801561074257610aa7575b505060ff81610a9f610a8d86610a876101c9988697611e91565b93611e91565b94808360081c16908660081c16611a6c565b169116611a6c565b610ab0906118c2565b6101d0578338610a6d565b610ac4906118c2565b6101cc578438610a1e565b5034610168578060031936011261016857601854610aec81611a55565b610af96040519182611906565b81815260209182820160186000527fb13d2d76d1f4b7be834882e410b3e3a8afaf69f83600ae24db354391d2378d2e906000905b838210610b42576040518061023f8782611860565b60405160009184549160019280841c908481168015610bee575b8b83108114610623578284528b949392918115610bd25750600114610b99575b50610b8b816001960382611906565b815201930191019091610b2d565b60008881528481209650905b808210610bbb5750810183019450610b8b610b7c565b8654838301860152958501958b9490910190610ba5565b60ff19168584015250151560051b810183019450610b8b610b7c565b91607f1691610b5c565b5034610168578060031936011261016857604051610c15816118eb565b601281526003602082015260405191610c2d836118eb565b60089081845260036020850152805b60ff8082166002811015610d1057610c58826102c38389611e09565b60059080820291820403610cfc57610c74836102c3848a611e09565b906001600160ff1b03821682036103c55790610cb2610c9b610cb893866102e7878d611e09565b9185610ca7868c611e09565b51169060011b611c32565b90611e91565b91610cc781610323848b611e09565b91600792808402938404036103c557926103739268ffffffffffffffff0061036e936104b6610cf798978d611e09565b610c3c565b634e487b7160e01b85526011600452602485fd5b8380f35b5034610168578060031936011261016857601954610d3181611a55565b90610d3f6040519283611906565b80825260198352827f944998273e477b495144fb8794c914197f3ccb46be2900f4698fd0ef743c9695602084015b838310610d82576040518061023f87826117a8565b604051610d8e816118eb565b82546001600160a01b031681526040516001840180548083529089526020808a20908301918a915b816007840110610e235784600197946002979460209794610e1194549181811061092257818110610906578181106108ea578181106108ce578181106108b2578181106108965781811061087c571061086857500382611906565b83820152815201920192019190610d6d565b926001610100600892865463ffffffff60e01b90818160e01b16835260c08282821b16602085015260a08383821b1660408601526080848460608282851b16818a01521b1690860152838360401b1690850152828260201b16908401521660e0820152019401920191610db6565b5034610168578060031936011261016857604051610eae816118eb565b601281526003602082015260405190610ec6826118eb565b60089081835260036020840152835b60ff8082169060028210156104db57610ef2816102c38487611e09565b9060059180830290838204036104c757610f14610f2291836102e7878a611e09565b610cb28361046e878a611e09565b92610f3182610323838b611e09565b808402938404036104c757926103739268ffffffffffffffff0061036e936104b6610f5d98978c611e09565b610ed5565b5034610168578060031936011261016857604051610f7f816118eb565b60128152600380602083015260405190610f98826118eb565b600891828152816020820152845b60ff808216600281101561107357610fc2826102c3838a611e09565b600590808202918204036104c757610fde836102c3848b611e09565b906001600160ff1b038216820361105f579061047561100561101193866102e7878e611e09565b9185610ca7868d611e09565b91611020816103238488611e09565b91828702928784040361105f57926103739268ffffffffffffffff0061036e9361104e61105a98978a611e09565b5116918a1b1617611e64565b610fa6565b634e487b7160e01b8a52601160045260248afd5b8780f35b5034610168578060031936011261016857604051601580548083529083526020808301937f55f448fdea98c4d29eb340757ef0a66cd03dbb9538908a6a81d96026b71ec47592915b8282106110d65761023f8561023381890382611906565b83546001600160a01b0316865294850194600193840193909101906110bf565b5034610168578060031936011261016857604051601680548083529083526020808301937fd833147d7dc355ba459fc788f669e58cfaf9dc25ddcd0702e87d69c7b512428992915b8282106111555761023f8561023381890382611906565b83546001600160a01b03168652948501946001938401939091019061113e565b503461016857806003193601126101685780f35b503461016857806003193601126101685780737109709ecfa91a80626ff3989d68f67f5b1dd12d803b1561120d578190600460405180948193633d21120560e21b83525af18015610742576111f9575b604051635ce6db6160e11b81526008600482015260036024820152604490fd5b61120382916118c2565b61016857806111d9565b50fd5b5034610168578060031936011261016857601b549061122e82611a55565b61123b6040519182611906565b828152602081018093601b84527f3ad8aa4f87544323a9d1e5dd902f40c356527a7955687113db5f9a85ad579dc184925b82841061133d57858588604051916020830190602084525180915260408301600590604083831b860101939580925b8484106112a85786860387f35b9091929394603f198782030184528751906020604082019260018060a01b03815116835201519160406020830152825180915260609060208284019282871b850101940192865b82811061131257505050505060208060019299019401940192969493919061129b565b9091929394602080611330600193605f198782030189528951611783565b97019501939291016112ef565b604051611349816118eb565b82546001600160a01b031681526001830180549061136682611a55565b916113746040519384611906565b808352602083019160005260206000206000925b8284106113ae57505050506001928260209283600295015281520192019301929061126c565b604051600083548060011c906001811615611479575b6020821060018216146114655781845260018116908115611442575060011461140a575b50600192826113fc85946020940382611906565b815201920193019290611388565b6000858152602081209092505b81831061142c575050810160200160016113e8565b6001816020925483868801015201920191611417565b60ff191660208581019190915291151560051b84019091019150600190506113e8565b634e487b7160e01b83526022600452602483fd5b90607f16906113c4565b50346101685760403660031901126101685761149d61163b565b6114a5611658565b90737109709ecfa91a80626ff3989d68f67f5b1dd12d90813b156101d057604051632631f2b160e11b80825260ff838116908616146004830152908581602481875afa801561157857611565575b508490833b1561074d5760405190815281816024816001600160401b0397888a60081c16898960081c16101560048301525afa801561074257611551575b505060ff81610a9f610a8d8661154b6101c9988697611f00565b93611f00565b61155a906118c2565b6101d0578338611531565b611571909591956118c2565b93386114f3565b6040513d88823e3d90fd5b5034610168578060031936011261016857604051601480548083529083526020808301937fce6d7b5282bd9a3661ae061feed1dbda4e52ab073b1f9285be6e155d9c38d4ec92915b8282106115e25761023f8561023381890382611906565b83546001600160a01b0316865294850194600193840193909101906115cb565b5034610168576040366003190112610168576101c961163061162261163b565b61162a611658565b90611e64565b80611f7e565b611670565b6004359068ffffffffffffffffff8216820361165357565b600080fd5b6024359068ffffffffffffffffff8216820361165357565b346116535760403660031901126116535761168961163b565b611691611658565b90737109709ecfa91a80626ff3989d68f67f5b1dd12d91823b1561165357600060249360405194858092632631f2b160e11b825260ff861660ff88161460048301525afa908115611710576116ff936116fa92611701575b506116f481846120d6565b926120d6565b611f7e565b005b61170a906118c2565b386116e9565b6040513d6000823e3d90fd5b6020908160408183019282815285518094520193019160005b828110611743575050505090565b83516001600160a01b031685529381019392810192600101611735565b60005b8381106117735750506000910152565b8181015183820152602001611763565b9060209161179c81518092818552858086019101611760565b601f01601f1916010190565b602080820190808352835180925260409283810182858560051b840101960194600080935b8685106117df57505050505050505090565b909192939480969798603f198382030186528951826060818885019360018060a01b038151168652015193888382015284518094520192019085905b80821061183c5750505090806001929a0195019501939695949291906117cd565b82516001600160e01b03191684528a9493840193909201916001919091019061181b565b602080820190808352835180925260408301928160408460051b8301019501936000915b8483106118945750505050505090565b90919293949584806118b2600193603f198682030187528a51611783565b9801930193019194939290611884565b6001600160401b0381116118d557604052565b634e487b7160e01b600052604160045260246000fd5b604081019081106001600160401b038211176118d557604052565b90601f801991011681019081106001600160401b038211176118d557604052565b3d15611961573d906001600160401b0382116118d55760405191611955601f8201601f191660200184611906565b82523d6000602084013e565b606090565b60075460081c60ff16156119805760ff60075460081c1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d803b6119a1575090565b60408051602081018381526519985a5b195960d21b8284015291815260608101906001600160401b03821181831017611a4157918482611a1560248397959684976040526080810195630667f9d760e41b8752611a05825180926084850190611760565b8101036004810184520182611906565b51925af150611a22611927565b60208180518101031261074d5760200151908115158203610168575090565b634e487b7160e01b85526041600452602485fd5b6001600160401b0381116118d55760051b60200190565b90808203611a78575050565b611b60906040907f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506080835160208152602260208201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e8582015261745d60f01b6060820152a1815193828552611b0a838601604090600a8152690808080808081319599d60b21b60208201520190565b906020860152847fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89586920390a181519282849384528301604090600a8152690808080808149a59da1d60b21b60208201520190565b9060208301520390a1611b71611b73565b565b737109709ecfa91a80626ff3989d68f67f5b1dd12d803b611ba1575b5061010061ff00196007541617600755565b6040519060208201908082526519985a5b195960d21b6040840152600160608401526060835260808301918383106001600160401b038411176118d557600083611c0d60248397849760405260a08101956370ca10bb60e01b8752611a058251809260a4850190611760565b51925af150611c1a611927565b5038611b8f565b60ff16604d811161039157600a0a90565b90611c3c81611d0d565b600860ff82161015611c9457611c559080925b84611da1565b916001600160401b038311611c7c575060ff68ffffffffffffffff0091169160081b161790565b602490604051906304041d9560e11b82526004820152fd5b50611c5560088092611c4f565b611caa81611d0d565b600860ff82161015611d0057611cc1908092611d36565b906001600160401b038211611ce75760ff68ffffffffffffffff0091169160081b161790565b6040516304041d9560e11b815260006004820152602490fd5b50611cc160088092611d36565b60ff811660081015611d1f5750600890565b90565b9060ff8091169116039060ff821161039157565b60ff821660ff8216818114611d98571115611d7d57611d5d91611d5891611d22565b611c21565b15611d6757600090565b634e487b7160e01b600052601260045260246000fd5b611d5890611d8a92611d22565b156001171561039157600090565b50505050600090565b919060ff821660ff8216818114611df1571115611dd057611dc591611d5891611d22565b908115611d67570490565b611d5890611ddd92611d22565b908181029181830414901517156103915790565b5050505090565b60ff1660ff81146103915760010190565b906002811015611e1a5760051b0190565b634e487b7160e01b600052603260045260246000fd5b6001600160401b0316604d811161039157600a0a90565b15611e4e57565b634e487b7160e01b600052600160045260246000fd5b6001600160401b03808360081c16908260081c16149182611e8457505090565b60ff919250811691161490565b90611e9c8183611ed0565b6001600160401b039182808360081c169160081c16019182116103915760ff68ffffffffffffffff0091169160081b161790565b60ff8091169116808203611ee2575050565b6044925060405191635ce6db6160e11b835260048301526024820152fd5b611f0a8282611ed0565b6001600160401b03809260081c16828260081c16039182116103915760ff68ffffffffffffffff0091169160081b161790565b60405190611f4a826118eb565b600582526466616c736560d81b6020830152565b60405190611f6b826118eb565b60048252637472756560e01b6020830152565b81151581151503611f8d575050565b61209f906040907f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506080835160208152602260208201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b626f6f85820152616c5d60f01b6060820152a1156120c857612002611f5e565b925b81519382855261202e838601604090600a8152690808080808081319599d60b21b60208201520190565b948086036020820152806120647f280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf3583978894611783565b0390a1156120b8576120ad612077611f5e565b82519383859485528401604090600a8152690808080808149a59da1d60b21b60208201520190565b908382036020850152611783565b0390a1611b71611b73565b6120ad6120c3611f3d565b612077565b6120d0611f3d565b92612004565b906120e18183611ed0565b6001600160401b03809160081c169160081c16119056fea26469706673582212201f17e5d559bf7e7e27da8fdf8723c1058a6e2f9959fc04d21c240f82cbcc6a7264736f6c63430008130033";

type TrimmingTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TrimmingTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TrimmingTest__factory extends ContractFactory {
  constructor(...args: TrimmingTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<TrimmingTest> {
    return super.deploy(overrides || {}) as Promise<TrimmingTest>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TrimmingTest {
    return super.attach(address) as TrimmingTest;
  }
  override connect(signer: Signer): TrimmingTest__factory {
    return super.connect(signer) as TrimmingTest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TrimmingTestInterface {
    return new utils.Interface(_abi) as TrimmingTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TrimmingTest {
    return new Contract(address, _abi, signerOrProvider) as TrimmingTest;
  }
}
