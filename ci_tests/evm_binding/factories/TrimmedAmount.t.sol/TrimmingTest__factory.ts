/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TrimmingTest,
  TrimmingTestInterface,
} from "../../TrimmedAmount.t.sol/TrimmingTest";

const _abi = [
  {
    type: "function",
    name: "IS_TEST",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "excludeArtifacts",
    inputs: [],
    outputs: [
      {
        name: "excludedArtifacts_",
        type: "string[]",
        internalType: "string[]",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "excludeContracts",
    inputs: [],
    outputs: [
      {
        name: "excludedContracts_",
        type: "address[]",
        internalType: "address[]",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "excludeSenders",
    inputs: [],
    outputs: [
      {
        name: "excludedSenders_",
        type: "address[]",
        internalType: "address[]",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "failed",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "targetArtifactSelectors",
    inputs: [],
    outputs: [
      {
        name: "targetedArtifactSelectors_",
        type: "tuple[]",
        internalType: "struct StdInvariant.FuzzSelector[]",
        components: [
          {
            name: "addr",
            type: "address",
            internalType: "address",
          },
          {
            name: "selectors",
            type: "bytes4[]",
            internalType: "bytes4[]",
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "targetArtifacts",
    inputs: [],
    outputs: [
      {
        name: "targetedArtifacts_",
        type: "string[]",
        internalType: "string[]",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "targetContracts",
    inputs: [],
    outputs: [
      {
        name: "targetedContracts_",
        type: "address[]",
        internalType: "address[]",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "targetInterfaces",
    inputs: [],
    outputs: [
      {
        name: "targetedInterfaces_",
        type: "tuple[]",
        internalType: "struct StdInvariant.FuzzInterface[]",
        components: [
          {
            name: "addr",
            type: "address",
            internalType: "address",
          },
          {
            name: "artifacts",
            type: "string[]",
            internalType: "string[]",
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "targetSelectors",
    inputs: [],
    outputs: [
      {
        name: "targetedSelectors_",
        type: "tuple[]",
        internalType: "struct StdInvariant.FuzzSelector[]",
        components: [
          {
            name: "addr",
            type: "address",
            internalType: "address",
          },
          {
            name: "selectors",
            type: "bytes4[]",
            internalType: "bytes4[]",
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "targetSenders",
    inputs: [],
    outputs: [
      {
        name: "targetedSenders_",
        type: "address[]",
        internalType: "address[]",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "testAddOperatorDecimalsNotEqualNoRevert",
    inputs: [],
    outputs: [],
    stateMutability: "pure",
  },
  {
    type: "function",
    name: "testAddOperatorDecimalsNotEqualRevert",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "testAddOperatorNonZero",
    inputs: [],
    outputs: [],
    stateMutability: "pure",
  },
  {
    type: "function",
    name: "testAddOperatorZero",
    inputs: [],
    outputs: [],
    stateMutability: "pure",
  },
  {
    type: "function",
    name: "testDifferentDecimals",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "testSubOperatorNonZero",
    inputs: [],
    outputs: [],
    stateMutability: "pure",
  },
  {
    type: "function",
    name: "testSubOperatorOverflow",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "testSubOperatorZero",
    inputs: [],
    outputs: [],
    stateMutability: "pure",
  },
  {
    type: "function",
    name: "testTrimLessThan8",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "testTrimmingRoundTrip",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "event",
    name: "log",
    inputs: [
      {
        name: "",
        type: "string",
        indexed: false,
        internalType: "string",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_address",
    inputs: [
      {
        name: "",
        type: "address",
        indexed: false,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_array",
    inputs: [
      {
        name: "val",
        type: "uint256[]",
        indexed: false,
        internalType: "uint256[]",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_array",
    inputs: [
      {
        name: "val",
        type: "int256[]",
        indexed: false,
        internalType: "int256[]",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_array",
    inputs: [
      {
        name: "val",
        type: "address[]",
        indexed: false,
        internalType: "address[]",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_bytes",
    inputs: [
      {
        name: "",
        type: "bytes",
        indexed: false,
        internalType: "bytes",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_bytes32",
    inputs: [
      {
        name: "",
        type: "bytes32",
        indexed: false,
        internalType: "bytes32",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_int",
    inputs: [
      {
        name: "",
        type: "int256",
        indexed: false,
        internalType: "int256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_named_address",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string",
      },
      {
        name: "val",
        type: "address",
        indexed: false,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_named_array",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string",
      },
      {
        name: "val",
        type: "uint256[]",
        indexed: false,
        internalType: "uint256[]",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_named_array",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string",
      },
      {
        name: "val",
        type: "int256[]",
        indexed: false,
        internalType: "int256[]",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_named_array",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string",
      },
      {
        name: "val",
        type: "address[]",
        indexed: false,
        internalType: "address[]",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_named_bytes",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string",
      },
      {
        name: "val",
        type: "bytes",
        indexed: false,
        internalType: "bytes",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_named_bytes32",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string",
      },
      {
        name: "val",
        type: "bytes32",
        indexed: false,
        internalType: "bytes32",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_named_decimal_int",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string",
      },
      {
        name: "val",
        type: "int256",
        indexed: false,
        internalType: "int256",
      },
      {
        name: "decimals",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_named_decimal_uint",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string",
      },
      {
        name: "val",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "decimals",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_named_int",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string",
      },
      {
        name: "val",
        type: "int256",
        indexed: false,
        internalType: "int256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_named_string",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string",
      },
      {
        name: "val",
        type: "string",
        indexed: false,
        internalType: "string",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_named_uint",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string",
      },
      {
        name: "val",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_string",
    inputs: [
      {
        name: "",
        type: "string",
        indexed: false,
        internalType: "string",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_uint",
    inputs: [
      {
        name: "",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "logs",
    inputs: [
      {
        name: "",
        type: "bytes",
        indexed: false,
        internalType: "bytes",
      },
    ],
    anonymous: false,
  },
  {
    type: "error",
    name: "AmountTooLarge",
    inputs: [
      {
        name: "amount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
  },
  {
    type: "error",
    name: "NumberOfDecimalsNotEqual",
    inputs: [
      {
        name: "decimals",
        type: "uint8",
        internalType: "uint8",
      },
      {
        name: "decimalsOther",
        type: "uint8",
        internalType: "uint8",
      },
    ],
  },
] as const;

const _bytecode =
  "0x6080806040523461002d57600160ff1981816007541617600755600b541617600b55611d0390816100338239f35b600080fdfe608080604052600436101561001357600080fd5b60009081803560e01c918263122c4d921461156557505080631ed7831c146114e65780632ade38801461125a57806332962b7a146110665780633841c23d14610fb05780633a5c1b0f14610f6e5780633e5e3c2314610eef5780633f7286f414610e70578063477e93e214610d745780634e2aa78f14610cae57806366d9a9a014610b315780637cbbaee514610a3857806385226c811461090f578063916a17c6146106b457806394726d8f14610588578063b5508aa91461044b578063ba414fa614610426578063d051688314610318578063dd0cd1e0146101be578063e20c9f711461012f5763fa7626d41461010a57600080fd5b3461012c578060031936011261012c57602060ff600754166040519015158152f35b80fd5b503461012c578060031936011261012c57604051601380548083529083526020808301937f66de8ffda797e3de9c05e8fc57b3bf0ec28a930d40b0d285d93c06501cf6a09092915b82821061019e5761019a8561018e81890382611776565b60405191829182611599565b0390f35b83546001600160a01b031686529485019460019384019390910190610177565b503461012c578060031936011261012c576040516101db81611732565b60128152602091600a83830152604051926101f584611732565b60088085528082860152825b60ff8082166002811015610314576102248261021d838a611b57565b51166118b8565b600590808202918204036103005761024c61027e9184610244858c611b57565b511690611911565b60008760405161025b81611732565b82815201526040519061026d82611732565b630bebc20082528688830152611be4565b916102948161028d848c611b57565b5116611b7e565b91600792808402938404036102ec57926102e2926102dd926102ba6102e797968d611b57565b51166001600160401b03604051926102d184611732565b16825288820152611bb2565b611b95565b611b46565b610201565b634e487b7160e01b88526011600452602488fd5b634e487b7160e01b87526011600452602487fd5b8580f35b503461012c578060031936011261012c5760405161033581611732565b601281526020906003828201526040519161034f83611732565b60088352600381840152835b60ff808216906002821015610422576103788161021d8488611b57565b90600591808302908382040361040e5761039a6103b59183610244878b611b57565b6103af836103a8878b611b57565b511661199d565b90611c6f565b926103c48261028d838b611b57565b8084029384040361040e57926102e2926102dd926103e661040997968b611b57565b51166001600160401b03604051926103fd84611732565b16825287820152611bb2565b61035b565b634e487b7160e01b89526011600452602489fd5b8680f35b503461012c578060031936011261012c5760206104416117d6565b6040519015158152f35b503461012c578060031936011261012c57601754610468816118a1565b6104756040519182611776565b81815260209182820160176000527fc624b66cc0138b8fabc209247f72d758e1cf3343756d543badbf24212bed8c15906000905b8382106104be576040518061019a87826116b8565b60405160009184549160019280841c90848116801561057e575b8b8310811461056a578284528b94939291811561054e5750600114610515575b50610507816001960382611776565b8152019301910190916104a9565b60008881528481209650905b80821061053757508101830194506105076104f8565b8654838301860152958501958b9490910190610521565b60ff19168584015250151560051b8101830194506105076104f8565b634e487b7160e01b87526022600452602487fd5b91607f16916104d8565b503461012c578060031936011261012c576040516105a581611732565b6012815260036020820152815b60ff908181169160028310156106b0576105d08161021d8587611b57565b906005918083029283040361069c576105ed8161021d8688611b57565b9160069280840293840403610300579061024461061361061a949383610244898b611b57565b9587611b57565b9184737109709ecfa91a80626ff3989d68f67f5b1dd12d803b1561069857818091600460405180948193633d21120560e21b83525af1801561068d57610675575b50506106709261066a91611c6f565b50611b46565b6105b2565b61067e90611763565b61068957843861065b565b8480fd5b6040513d84823e3d90fd5b5080fd5b634e487b7160e01b86526011600452602486fd5b8480f35b503461012c578060031936011261012c57601a546106d1816118a1565b906106df6040519283611776565b808252601a8352827f057c384a7d1c54f3a1b2e5e67b2617b8224fdfd1ea7234eea573a6ff665ff63e602084015b838310610722576040518061019a8782611600565b60405161072e81611732565b82546001600160a01b031681526040516001840180548083529089526020808a20908301918a915b8160078401106108a157846001979460029794602097946107b9945491818110610885575b818110610869575b81811061084d575b818110610831575b818110610815575b8181106107f9575b8181106107df575b106107cb575b500382611776565b8382015281520192019201919061070d565b6001600160e01b03191681528601386107b1565b828a1b6001600160e01b0319168452928901928b016107ab565b604083901b6001600160e01b0319168452928901928b016107a3565b606083901b6001600160e01b0319168452928901928b0161079b565b608083901b6001600160e01b0319168452928901928b01610793565b60a083901b6001600160e01b0319168452928901928b0161078b565b60c083901b6001600160e01b0319168452928901928b01610783565b60e083901b6001600160e01b0319168452928901928b0161077b565b926001610100600892865463ffffffff60e01b90818160e01b16835260c08282821b16602085015260a08383821b1660408601526080848460608282851b16818a01521b1690860152838360401b1690850152828260201b16908401521660e0820152019401920191610756565b503461012c578060031936011261012c5760185461092c816118a1565b6109396040519182611776565b81815260209182820160186000527fb13d2d76d1f4b7be834882e410b3e3a8afaf69f83600ae24db354391d2378d2e906000905b838210610982576040518061019a87826116b8565b60405160009184549160019280841c908481168015610a2e575b8b8310811461056a578284528b949392918115610a1257506001146109d9575b506109cb816001960382611776565b81520193019101909161096d565b60008881528481209650905b8082106109fb57508101830194506109cb6109bc565b8654838301860152958501958b94909101906109e5565b60ff19168584015250151560051b8101830194506109cb6109bc565b91607f169161099c565b503461012c578060031936011261012c57604051610a5581611732565b6012815260209160038383015260405192610a6f84611732565b60088452600381850152815b60ff80821660028110156106b057610a978261021d8389611b57565b6005908082029182040361069c57610ab38361021d848a611b57565b906001600160ff1b03821682036103005790610af1610ada610af79386610244878d611b57565b9185610ae6868c611b57565b51169060011b611911565b90611be4565b91610b068161028d848b611b57565b916007928084029384040361030057926102e2926102dd926103e6610b2c97968c611b57565b610a7b565b503461012c578060031936011261012c57601954610b4e816118a1565b90610b5c6040519283611776565b80825260198352827f944998273e477b495144fb8794c914197f3ccb46be2900f4698fd0ef743c9695602084015b838310610b9f576040518061019a8782611600565b604051610bab81611732565b82546001600160a01b031681526040516001840180548083529089526020808a20908301918a915b816007840110610c405784600197946002979460209794610c2e945491818110610885578181106108695781811061084d5781811061083157818110610815578181106107f9578181106107df57106107cb57500382611776565b83820152815201920192019190610b8a565b926001610100600892865463ffffffff60e01b90818160e01b16835260c08282821b16602085015260a08383821b1660408601526080848460608282851b16818a01521b1690860152838360401b1690850152828260201b16908401521660e0820152019401920191610bd3565b503461012c578060031936011261012c57604051610ccb81611732565b6012815260209060038282015260405191610ce583611732565b60088352600381840152835b60ff80821690600282101561042257610d0e8161021d8488611b57565b90600591808302908382040361040e57610d30610d3e9183610244878b611b57565b610af1836103a8878b611b57565b92610d4d8261028d838b611b57565b8084029384040361040e57926102e2926102dd926103e6610d6f97968b611b57565b610cf1565b503461012c578060031936011261012c57604051610d9181611732565b60128152600360208181840152604051610daa81611732565b600881528282820152845b60ff8082166002811015610e6c57610dd18261021d838a611b57565b6005908082029182040361040e57610ded8361021d848b611b57565b906001600160ff1b0382168203610e5857906103af610e14610e209386610244878e611b57565b9185610ae6868d611b57565b91610e2f8161028d8488611b57565b918288029288840403610e5857926102e2926102dd926102ba610e53979689611b57565b610db5565b634e487b7160e01b8a52601160045260248afd5b8780f35b503461012c578060031936011261012c57604051601580548083529083526020808301937f55f448fdea98c4d29eb340757ef0a66cd03dbb9538908a6a81d96026b71ec47592915b828210610ecf5761019a8561018e81890382611776565b83546001600160a01b031686529485019460019384019390910190610eb8565b503461012c578060031936011261012c57604051601680548083529083526020808301937fd833147d7dc355ba459fc788f669e58cfaf9dc25ddcd0702e87d69c7b512428992915b828210610f4e5761019a8561018e81890382611776565b83546001600160a01b031686529485019460019384019390910190610f37565b503461012c578060031936011261012c5760006020604051610f8f81611732565b828152015260036020604051610fa481611732565b63366138f28152015280f35b503461012c578060031936011261012c57610fc96118df565b90806020604051610fd981611732565b8281520152604051610fea81611732565b6107d0815260036020820152737109709ecfa91a80626ff3989d68f67f5b1dd12d803b1561106257828091600460405180948193633d21120560e21b83525af1801561105757611044575b506110409192611be4565b5080f35b9161105161104093611763565b91611035565b6040513d85823e3d90fd5b8280fd5b503461012c578060031936011261012c5761107f6118df565b6001600160401b039061109e8282511660ff6020809401511690611a42565b624c4b408181036110ad578480f35b60809182917f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50836040518781526022888201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b6060820152a16040519060408252600a6040830152690808080808081319599d60b21b6060830152858201527fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8938491a16040519060408252600a6040830152690808080808149a59da1d60b21b606083015284820152a1737109709ecfa91a80626ff3989d68f67f5b1dd12d91823b6111bb575b50505061010061ff00196007541617600755388080808480f35b604051918201918383526519985a5b195960d21b6040820152600160608201526060815260808101918183109083111761124657918482611230602483979596849760405260a08101956370ca10bb60e01b87526112208251809260a48501906115dd565b8101036004810184520182611776565b51925af15061123d611797565b503880806111a1565b634e487b7160e01b85526041600452602485fd5b503461012c578060031936011261012c57601b5490611278826118a1565b6112856040519182611776565b828152602081018093601b84527f3ad8aa4f87544323a9d1e5dd902f40c356527a7955687113db5f9a85ad579dc184925b82841061139e57858588604051916020830190602084525180915260408301600590604083831b860101939580925b8484106112f25786860387f35b9091929394603f198782030184528751906020604082019260018060a01b03815116835201519160406020830152825180915260609060208284019282871b850101940192865b82811061135c5750505050506020806001929901940194019296949391906112e5565b909192939460208080600193605f198782030189528951611388815180928185528580860191016115dd565b601f01601f191601019701950193929101611339565b6040516113aa81611732565b82546001600160a01b03168152600183018054906113c7826118a1565b916113d56040519384611776565b80835260208301918a5260208a208a925b82841061140c5750505050600192826020928360029501528152019201930192906112b6565b60405182548d90600181811c91908116156114dc575b6020821060018216146114c7578184528f9190600181169081156114a2575060011461146c575b50506001928261145e85946020940382611776565b8152019201930192906113e6565b909150848252602082205b81831061148c57505081016020018d82611449565b6001816020925483868801015201920191611477565b60ff191660208681019190915291151560051b850190910192508f9150839050611449565b50634e487b7160e01b8f52602260045260248ffd5b90607f1690611422565b503461012c578060031936011261012c57604051601480548083529083526020808301937fce6d7b5282bd9a3661ae061feed1dbda4e52ab073b1f9285be6e155d9c38d4ec92915b8282106115455761019a8561018e81890382611776565b83546001600160a01b03168652948501946001938401939091019061152e565b81903461159657816003193601126115965780611583602092611732565b8281520152611593604051611732565b80f35b50fd5b6020908160408183019282815285518094520193019160005b8281106115c0575050505090565b83516001600160a01b0316855293810193928101926001016115b2565b60005b8381106115f05750506000910152565b81810151838201526020016115e0565b602080820190808352835180925260409283810182858560051b840101960194600080935b86851061163757505050505050505090565b909192939480969798603f198382030186528951826060818885019360018060a01b038151168652015193888382015284518094520192019085905b8082106116945750505090806001929a019501950193969594929190611625565b82516001600160e01b03191684528a94938401939092019160019190910190611673565b602080820190808352835180925260408301928160408460051b8301019501936000915b8483106116ec5750505050505090565b909192939495848080600193603f198682030187528a51611718815180928185528580860191016115dd565b601f01601f191601019801969594919091019201906116dc565b604081019081106001600160401b0382111761174d57604052565b634e487b7160e01b600052604160045260246000fd5b6001600160401b03811161174d57604052565b90601f801991011681019081106001600160401b0382111761174d57604052565b3d156117d1573d906001600160401b03821161174d57604051916117c5601f8201601f191660200184611776565b82523d6000602084013e565b606090565b60075460081c60ff16156117f05760ff60075460081c1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d803b611811575090565b60408051602081018381526519985a5b195960d21b8284015291815260608101906001600160401b038211818310176112465791848261187560248397959684976040526080810195630667f9d760e41b87526112208251809260848501906115dd565b51925af150611882611797565b602081805181010312610698576020015190811515820361012c575090565b6001600160401b03811161174d5760051b60200190565b60ff16604d81116118c957600a0a90565b634e487b7160e01b600052601160045260246000fd5b600060206040516118ef81611732565b828152015260405161190081611732565b631dcd650081526008602082015290565b906000602060405161192281611732565b828152015261193081611a19565b600860ff82161015611990576119499080925b84611b0e565b916001600160401b039081841161197857509060ff916040519361196c85611732565b16835216602082015290565b602490604051906304041d9560e11b82526004820152fd5b5061194960088092611943565b600060206040516119ad81611732565b82815201526119bb81611a19565b600860ff82161015611a0c576119d2908092611ab9565b906001600160401b03908183116119f35760ff916040519361196c85611732565b6040516304041d9560e11b815260006004820152602490fd5b506119d260088092611ab9565b60ff811660081015611a2b5750600890565b90565b9060ff8091169116039060ff82116118c957565b9060ff1660068114611ab5576006811115611a8d576005190160ff81116118c957611a6c906118b8565b908115611a77570490565b634e487b7160e01b600052601260045260246000fd5b60060360ff81116118c957611aa1906118b8565b908181029181830414901517156118c95790565b5090565b60ff821660ff8216818114611b05571115611aea57611ae091611adb91611a2e565b6118b8565b15611a7757600090565b611adb90611af792611a2e565b15600117156118c957600090565b50505050600090565b919060ff821660ff8216818114611b3f571115611b3257611a6c91611adb91611a2e565b611adb90611aa192611a2e565b5050505090565b60ff1660ff81146118c95760010190565b906002811015611b685760051b0190565b634e487b7160e01b600052603260045260246000fd5b6001600160401b0316604d81116118c957600a0a90565b15611b9c57565b634e487b7160e01b600052600160045260246000fd5b906001600160401b038083511690825116149182611bcf57505090565b60ff8092935060208092015116920151161490565b60006020604051611bf481611732565b8281520152602081019160ff83511660ff60208301511690818103611c4c5750506001600160401b03808093511691511601918183116118c95760ff9051169060405192611c4184611732565b168252602082015290565b604051635ce6db6160e11b815260ff918216600482015291166024820152604490fd5b60006020604051611c7f81611732565b8281520152602081019160ff83511660ff60208301511690818103611c4c5750506001600160401b0380809351169151169003918183116118c95760ff9051169060405192611c418461173256fea2646970667358221220054e6558602680a6fc40c2daef4d905bae981c9daac60065be78b47b816d588064736f6c63430008130033";

type TrimmingTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TrimmingTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TrimmingTest__factory extends ContractFactory {
  constructor(...args: TrimmingTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<TrimmingTest> {
    return super.deploy(overrides || {}) as Promise<TrimmingTest>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TrimmingTest {
    return super.attach(address) as TrimmingTest;
  }
  override connect(signer: Signer): TrimmingTest__factory {
    return super.connect(signer) as TrimmingTest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TrimmingTestInterface {
    return new utils.Interface(_abi) as TrimmingTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TrimmingTest {
    return new Contract(address, _abi, signerOrProvider) as TrimmingTest;
  }
}
