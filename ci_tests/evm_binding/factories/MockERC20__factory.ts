/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MockERC20, MockERC20Interface } from "../MockERC20";

const _abi = [
  {
    type: "function",
    name: "DOMAIN_SEPARATOR",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "allowance",
    inputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "approve",
    inputs: [
      {
        name: "spender",
        type: "address",
        internalType: "address",
      },
      {
        name: "amount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "balanceOf",
    inputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "decimals",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint8",
        internalType: "uint8",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "initialize",
    inputs: [
      {
        name: "_name",
        type: "string",
        internalType: "string",
      },
      {
        name: "_symbol",
        type: "string",
        internalType: "string",
      },
      {
        name: "_decimals",
        type: "uint8",
        internalType: "uint8",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "name",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "nonces",
    inputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "permit",
    inputs: [
      {
        name: "owner",
        type: "address",
        internalType: "address",
      },
      {
        name: "spender",
        type: "address",
        internalType: "address",
      },
      {
        name: "value",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "deadline",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "v",
        type: "uint8",
        internalType: "uint8",
      },
      {
        name: "r",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "s",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "symbol",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "totalSupply",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "transfer",
    inputs: [
      {
        name: "to",
        type: "address",
        internalType: "address",
      },
      {
        name: "amount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "transferFrom",
    inputs: [
      {
        name: "from",
        type: "address",
        internalType: "address",
      },
      {
        name: "to",
        type: "address",
        internalType: "address",
      },
      {
        name: "amount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "event",
    name: "Approval",
    inputs: [
      {
        name: "owner",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "spender",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "amount",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "Transfer",
    inputs: [
      {
        name: "from",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "to",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "amount",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
] as const;

const _bytecode =
  "0x6080806040523461001657610e8a908161001c8239f35b600080fdfe608060408181526004918236101561001657600080fd5b600092833560e01c91826306fdde0314610a4857508163095ea7b3146109d75781631624f6c61461068957816318160ddd1461066a57816323b872dd14610587578163313ce567146105655781633644e5151461054157816370a082311461050b5781637ecebe00146104d357816395d89b41146103f4578163a9059cbb14610361578163d505accf146100ff575063dd62ed3e146100b457600080fd5b346100fb57806003193601126100fb57806020926100d0610b97565b6100d8610bb2565b6001600160a01b0391821683526005865283832091168252845220549051908152f35b5080fd5b90503461035d5760e036600319011261035d5761011a610b97565b610122610bb2565b9260443590606435936084359360ff85168095036103595742861061031657610149610c1f565b9660018060a01b0380921696878a5260209660088852858b20998a549a6000198c146103035760018c019055865192858a8501957f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c987528c8a870152169b8c606086015289608086015260a085015260c084015260c0835260e0830167ffffffffffffffff94848210868311176102f0578189528451902061010085019261190160f01b845261010286015261012285015260428152610160840194818610908611176102dd57848852519020835261018082015260a4356101a082015260c4356101c0909101528880528590899060809060015afa156102d35787511690811515806102ca575b1561029657508652600583528086208587528352808620829055519081527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259190a380f35b825162461bcd60e51b8152908101859052600e60248201526d24a72b20a624a22fa9a4a3a722a960911b6044820152606490fd5b50858214610251565b82513d89823e3d90fd5b634e487b7160e01b8d526041875260248dfd5b634e487b7160e01b8e526041885260248efd5b634e487b7160e01b8d526011875260248dfd5b506020606492519162461bcd60e51b8352820152601760248201527f5045524d49545f444541444c494e455f455850495245440000000000000000006044820152fd5b8780fd5b8280fd5b90503461035d578160031936011261035d579160209261037f610b97565b9083602435923385528287526103988483872054610ddb565b3386528388528286205560018060a01b0316938481526103bb8483832054610d6c565b928582528752205582519081527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef843392a35160018152f35b5050346100fb57816003193601126100fb5780519082600180549161041883610adc565b808652928281169081156104ab575060011461044f575b5050506104418261044b940383610b16565b5191829182610b4e565b0390f35b94508085527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf65b8286106104935750505061044182602061044b958201019461042f565b80546020878701810191909152909501948101610476565b61044b97508693506020925061044194915060ff191682840152151560051b8201019461042f565b5050346100fb5760203660031901126100fb5760209181906001600160a01b036104fb610b97565b1681526008845220549051908152f35b90503461035d57602036600319011261035d5760209282916001600160a01b03610533610b97565b168252845220549051908152f35b5050346100fb57816003193601126100fb5760209061055e610c1f565b9051908152f35b5050346100fb57816003193601126100fb5760209060ff600254169051908152f35b828434610667576060366003190112610667576105a2610b97565b927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6105cc610bb2565b60443560018060a01b038097169384865286602098899460058652828920338a52865282892054856000198203610644575b505087895283865261061385848b2054610ddb565b888a52848752838a2055169687815261062f8483832054610d6c565b92888252855220558551908152a35160018152f35b61064d91610ddb565b888a5260058752838a20338b528752838a20558b856105fe565b80fd5b5050346100fb57816003193601126100fb576020906003549051908152f35b839150346100fb5760603660031901126100fb5767ffffffffffffffff9281358481116109d3576106bd9036908401610bc8565b936024358181116109cf576106d59036908501610bc8565b926044359260ff84168094036109cb5760ff600954166109925750855182811161097f57806107048754610adc565b97601f98898111610926575b506020908983116001146108b75788926108ac575b50508160011b916000199060031b1c19161785555b835191821161089957506001926107518454610adc565b868111610837575b5060209582116001146107b95794849582939495926107ae575b5050600019600383901b1c191690831b1782555b60ff1990816002541617600255466006556107a0610c39565b600755600954161760095580f35b015190508580610773565b838552601f198216957fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf691865b88811061082157508386979896959610610808575b505050811b018255610787565b015160001960f88460031b161c191690558580806107fb565b81830151845592860192602092830192016107e6565b8486527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf68780850160051c82019260208610610890575b0160051c019085905b828110610885575050610759565b878155018590610877565b9250819261086e565b634e487b7160e01b855260419052602484fd5b015190508880610725565b888052600080516020610e358339815191529250601f198416895b81811061090e57509084600195949392106108f5575b505050811b01855561073a565b015160001960f88460031b161c191690558880806108e8565b929360206001819287860151815501950193016108d2565b909150878052600080516020610e358339815191528980850160051c82019260208610610976575b9085949392910160051c01905b8181106109685750610710565b89815584935060010161095b565b9250819261094e565b634e487b7160e01b865260418252602486fd5b906020606492519162461bcd60e51b835282015260136024820152721053149150511657d253925512505312569151606a1b6044820152fd5b8580fd5b8480fd5b8380fd5b5050346100fb57806003193601126100fb57602091816109f5610b97565b91602435918291338152600587528181209460018060a01b0316948582528752205582519081527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925843392a35160018152f35b8490843461035d578260031936011261035d57828054610a6781610adc565b808552916001918083169081156104ab5750600114610a92575050506104418261044b940383610b16565b8080965052600080516020610e358339815191525b828610610ac45750505061044182602061044b958201019461042f565b80546020878701810191909152909501948101610aa7565b90600182811c92168015610b0c575b6020831014610af657565b634e487b7160e01b600052602260045260246000fd5b91607f1691610aeb565b90601f8019910116810190811067ffffffffffffffff821117610b3857604052565b634e487b7160e01b600052604160045260246000fd5b6020808252825181830181905290939260005b828110610b8357505060409293506000838284010152601f8019910116010190565b818101860151848201604001528501610b61565b600435906001600160a01b0382168203610bad57565b600080fd5b602435906001600160a01b0382168203610bad57565b81601f82011215610bad5780359067ffffffffffffffff8211610b385760405192610bfd601f8401601f191660200185610b16565b82845260208383010111610bad57816000926020809301838601378301015290565b6006544603610c2e5760075490565b610c36610c39565b90565b604051600090815490610c4b82610adc565b8082528160209485820194600190878282169182600014610d4e575050600114610d06575b50610c7d92500382610b16565b51902090604051908101917f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f835260408201527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260a0815260c0810181811067ffffffffffffffff821117610b385760405251902090565b600080805287925090600080516020610e358339815191525b858310610d36575050610c7d935082010138610c70565b80548388018501528694508893909201918101610d1f565b60ff19168852610c7d95151560051b8501019250389150610c709050565b90810190818111610dc5578110610d805790565b60405162461bcd60e51b815260206004820152601860248201527f45524332303a206164646974696f6e206f766572666c6f7700000000000000006044820152606490fd5b634e487b7160e01b600052601160045260246000fd5b90808210610def578103908111610dc55790565b60405162461bcd60e51b815260206004820152601c60248201527f45524332303a207375627472616374696f6e20756e646572666c6f77000000006044820152606490fdfe290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563a2646970667358221220a7ff9a1d242ecd26ad230ce1fbb3313d5ecdccf3769786558e1fa67cf1c363b064736f6c63430008130033";

type MockERC20ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockERC20ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockERC20__factory extends ContractFactory {
  constructor(...args: MockERC20ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<MockERC20> {
    return super.deploy(overrides || {}) as Promise<MockERC20>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockERC20 {
    return super.attach(address) as MockERC20;
  }
  override connect(signer: Signer): MockERC20__factory {
    return super.connect(signer) as MockERC20__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockERC20Interface {
    return new utils.Interface(_abi) as MockERC20Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockERC20 {
    return new Contract(address, _abi, signerOrProvider) as MockERC20;
  }
}
