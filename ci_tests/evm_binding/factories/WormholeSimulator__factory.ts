/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  WormholeSimulator,
  WormholeSimulatorInterface,
} from "../WormholeSimulator";

const _abi = [
  {
    type: "constructor",
    inputs: [
      {
        name: "wormhole_",
        type: "address",
        internalType: "address",
      },
      {
        name: "devnetGuardian",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "encodeAndSignMessage",
    inputs: [
      {
        name: "vm_",
        type: "tuple",
        internalType: "struct IWormhole.VM",
        components: [
          {
            name: "version",
            type: "uint8",
            internalType: "uint8",
          },
          {
            name: "timestamp",
            type: "uint32",
            internalType: "uint32",
          },
          {
            name: "nonce",
            type: "uint32",
            internalType: "uint32",
          },
          {
            name: "emitterChainId",
            type: "uint16",
            internalType: "uint16",
          },
          {
            name: "emitterAddress",
            type: "bytes32",
            internalType: "bytes32",
          },
          {
            name: "sequence",
            type: "uint64",
            internalType: "uint64",
          },
          {
            name: "consistencyLevel",
            type: "uint8",
            internalType: "uint8",
          },
          {
            name: "payload",
            type: "bytes",
            internalType: "bytes",
          },
          {
            name: "guardianSetIndex",
            type: "uint32",
            internalType: "uint32",
          },
          {
            name: "signatures",
            type: "tuple[]",
            internalType: "struct IWormhole.Signature[]",
            components: [
              {
                name: "r",
                type: "bytes32",
                internalType: "bytes32",
              },
              {
                name: "s",
                type: "bytes32",
                internalType: "bytes32",
              },
              {
                name: "v",
                type: "uint8",
                internalType: "uint8",
              },
              {
                name: "guardianIndex",
                type: "uint8",
                internalType: "uint8",
              },
            ],
          },
          {
            name: "hash",
            type: "bytes32",
            internalType: "bytes32",
          },
        ],
      },
    ],
    outputs: [
      {
        name: "signedMessage",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "encodeObservation",
    inputs: [
      {
        name: "vm_",
        type: "tuple",
        internalType: "struct IWormhole.VM",
        components: [
          {
            name: "version",
            type: "uint8",
            internalType: "uint8",
          },
          {
            name: "timestamp",
            type: "uint32",
            internalType: "uint32",
          },
          {
            name: "nonce",
            type: "uint32",
            internalType: "uint32",
          },
          {
            name: "emitterChainId",
            type: "uint16",
            internalType: "uint16",
          },
          {
            name: "emitterAddress",
            type: "bytes32",
            internalType: "bytes32",
          },
          {
            name: "sequence",
            type: "uint64",
            internalType: "uint64",
          },
          {
            name: "consistencyLevel",
            type: "uint8",
            internalType: "uint8",
          },
          {
            name: "payload",
            type: "bytes",
            internalType: "bytes",
          },
          {
            name: "guardianSetIndex",
            type: "uint32",
            internalType: "uint32",
          },
          {
            name: "signatures",
            type: "tuple[]",
            internalType: "struct IWormhole.Signature[]",
            components: [
              {
                name: "r",
                type: "bytes32",
                internalType: "bytes32",
              },
              {
                name: "s",
                type: "bytes32",
                internalType: "bytes32",
              },
              {
                name: "v",
                type: "uint8",
                internalType: "uint8",
              },
              {
                name: "guardianIndex",
                type: "uint8",
                internalType: "uint8",
              },
            ],
          },
          {
            name: "hash",
            type: "bytes32",
            internalType: "bytes32",
          },
        ],
      },
    ],
    outputs: [
      {
        name: "encodedObservation",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    stateMutability: "pure",
  },
  {
    type: "function",
    name: "fetchSignedMessageFromLogs",
    inputs: [
      {
        name: "log",
        type: "tuple",
        internalType: "struct VmSafe.Log",
        components: [
          {
            name: "topics",
            type: "bytes32[]",
            internalType: "bytes32[]",
          },
          {
            name: "data",
            type: "bytes",
            internalType: "bytes",
          },
          {
            name: "emitter",
            type: "address",
            internalType: "address",
          },
        ],
      },
      {
        name: "emitterChainId",
        type: "uint16",
        internalType: "uint16",
      },
    ],
    outputs: [
      {
        name: "signedMessage",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "fetchWormholeMessageFromLog",
    inputs: [
      {
        name: "logs",
        type: "tuple[]",
        internalType: "struct VmSafe.Log[]",
        components: [
          {
            name: "topics",
            type: "bytes32[]",
            internalType: "bytes32[]",
          },
          {
            name: "data",
            type: "bytes",
            internalType: "bytes",
          },
          {
            name: "emitter",
            type: "address",
            internalType: "address",
          },
        ],
      },
    ],
    outputs: [
      {
        name: "",
        type: "tuple[]",
        internalType: "struct VmSafe.Log[]",
        components: [
          {
            name: "topics",
            type: "bytes32[]",
            internalType: "bytes32[]",
          },
          {
            name: "data",
            type: "bytes",
            internalType: "bytes",
          },
          {
            name: "emitter",
            type: "address",
            internalType: "address",
          },
        ],
      },
    ],
    stateMutability: "pure",
  },
  {
    type: "function",
    name: "setMessageFee",
    inputs: [
      {
        name: "newFee",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "vm",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "contract Vm",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "wormhole",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "contract IWormhole",
      },
    ],
    stateMutability: "view",
  },
] as const;

const _bytecode =
  "0x608080604052346200074657600060408262001bcf80380380916200002582856200077b565b833981010312620007435760206200003d836200079f565b92015181546001600160a01b0319166001600160a01b03909316928317825560018190556040516001625e79b760e01b0319815260048101919091529160208360248160008051602062001baf8339815191525afa928315620004da578293620006ff575b50604051630667f9d760e41b808252306004830152600260248301529060208160448160008051602062001baf8339815191525afa90811562000686578491620006c7575b506200069157604051631cfe795160e01b815291602083600481845afa9283156200068657849362000642575b506040805163ffffffff8516602082019081526002828401529181529160608301916001600160401b038311848410176200062e578260405283519020938252606483015282608483015260208160448160008051602062001baf8339815191525afa91821562000522578592620005f9575b505060015b8181106200052d57505060018060a01b0383541690604051602081019082825260208152620001bb816200075f565b5190206001600160a01b039095169460008051602062001baf8339815191523b15620004b857604051906370ca10bb60e01b938483526004830152602482015285604482015284816064818360008051602062001baf8339815191525af1801562000522576200050c575b5083546001600160a01b031660008051602062001baf8339815191523b15620004b857604051928352600483015260248201526001604482015282816064818360008051602062001baf8339815191525af180156200050157908391620004e5575b508054604051637ca8cbad60e11b815263ffffffff939093166004840152829060249082906001600160a01b03165afa908115620004da5782916200039f575b50519060018251036200035a57815115620003465750602001516001600160a01b03160362000301576040516113e89081620007c78239f35b60405162461bcd60e51b815260206004820152601f60248201527f696e636f727265637420677561726469616e20736574206f76657272696465006044820152606490fd5b634e487b7160e01b81526032600452602490fd5b60405162461bcd60e51b815260206004820152601560248201527f677561726469616e732e6c656e67746820213d203100000000000000000000006044820152606490fd5b90503d8083833e620003b281836200077b565b810190602081830312620004d2578051906001600160401b038211620004d65701604081830312620004d25760408051929083016001600160401b03811184821017620004bc5760405281516001600160401b038111620004b85782019080601f83011215620004b8578151916001600160401b038311620004a4578260051b90604051936200044660208401866200077b565b8452602080850192820101928311620004a057602001905b828210620004855750505082526200047990602001620007b4565b602082015238620002c8565b6020809162000494846200079f565b8152019101906200045e565b8680fd5b634e487b7160e01b86526041600452602486fd5b8480fd5b634e487b7160e01b600052604160045260246000fd5b8280fd5b8380fd5b6040513d84823e3d90fd5b620004f0906200074b565b620004fd57813862000288565b5080fd5b6040513d85823e3d90fd5b6200051a909491946200074b565b923862000226565b6040513d87823e3d90fd5b60018060a01b0385541660405160208101908582526020815262000551816200075f565b5190208281018111620005e55760008051602062001baf8339815191523b15620004a0578290604051926370ca10bb60e01b8452600484015201602482015285604482015285816064818360008051602062001baf8339815191525af18015620005da579060019291620005c8575b50016200018c565b620005d3906200074b565b38620005c0565b6040513d88823e3d90fd5b634e487b7160e01b87526011600452602487fd5b6020809293503d831162000626575b6200061481856200077b565b81010312620004d65751388062000187565b503d62000608565b634e487b7160e01b87526041600452602487fd5b9092506020813d6020116200067d575b8162000661602093836200077b565b81010312620004d6576200067590620007b4565b913862000114565b3d915062000652565b6040513d86823e3d90fd5b60405162461bcd60e51b815260206004820152600e60248201526d1a5b98dbdc9c9958dd081cdb1bdd60921b6044820152606490fd5b90506020813d602011620006f6575b81620006e5602093836200077b565b81010312620004d6575138620000e7565b3d9150620006d6565b9092506020813d6020116200073a575b816200071e602093836200077b565b81010312620004fd5762000732906200079f565b9138620000a2565b3d91506200070f565b80fd5b600080fd5b6001600160401b038111620004bc57604052565b604081019081106001600160401b03821117620004bc57604052565b601f909101601f19168101906001600160401b03821190821017620004bc57604052565b51906001600160a01b03821682036200074657565b519063ffffffff82168203620007465756fe6080604052600436101561001257600080fd5b60003560e01c80630e6452951461008757806323aa2a9d146100825780633a7684631461007d57806355a58d7d1461007857806364bb9bfb1461007357806384acd1bb1461006e5763b34cd8601461006957600080fd5b610957565b61092e565b610915565b610866565b610699565b610451565b346100b8576100b46100a061009b366102ee565b611177565b604051918291602083526020830190610418565b0390f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b608081019081106001600160401b038211176100ee57604052565b6100bd565b6001600160401b0381116100ee57604052565b606081019081106001600160401b038211176100ee57604052565b604081019081106001600160401b038211176100ee57604052565b90601f801991011681019081106001600160401b038211176100ee57604052565b6040519061016082018281106001600160401b038211176100ee57604052565b60ff8116036100b857565b35906101938261017d565b565b63ffffffff8116036100b857565b359061019382610195565b61ffff8116036100b857565b3590610193826101ae565b35906001600160401b03821682036100b857565b81601f820112156100b8578035906001600160401b0382116100ee576040519261020d601f8401601f19166020018561013c565b828452602083830101116100b857816000926020809301838601378301015290565b6001600160401b0381116100ee5760051b60200190565b81601f820112156100b85780359061025d8261022f565b9260409261026d8451958661013c565b808552602091828087019260071b850101938185116100b8578301915b84831061029a5750505050505090565b6080838303126100b8578360809187516102b3816100d3565b853581528286013583820152888601356102cc8161017d565b89820152606080870135906102e08261017d565b82015281520192019161028a565b600319906020818301126100b8576004356001600160401b03928382116100b8576101609082840301126100b85761032461015d565b9261033182600401610188565b845261033f602483016101a3565b6020850152610350604483016101a3565b6040850152610361606483016101ba565b60608501526084820135608085015261037c60a483016101c5565b60a085015261038d60c48301610188565b60c085015260e48201358181116100b8578360046103ad928501016101d9565b60e08501526103bf61010483016101a3565b6101008501526101248201359081116100b8576101449260046103e492840101610246565b610120840152013561014082015290565b60005b8381106104085750506000910152565b81810151838201526020016103f8565b90602091610431815180928185528580860191016103f5565b601f01601f1916010190565b90602061044e928181520190610418565b90565b346100b8576020806003193601126100b85760008054909190610484906001600160a01b03165b6001600160a01b031690565b60408051634d4502c960e11b8152928084600481865afa93841561060b576104ef946104fd918791610671575b50835163436f7265848201908152600360f81b602082015260f09290921b6001600160f01b0319166021830152600435602383015295869160430190565b03601f19810186528561013c565b815163fbe3c2cd60e01b8152908082600481875afa91821561060b578692610642575b5082516358b9591160e11b8152918183600481885afa95861561060b5787966105bb948891610615575b50610585610556611036565b9361057461056261015d565b60018152964263ffffffff1690880152565b8588018a905261ffff166060860152565b60808401528660a084015261059d60c0840160c89052565b60e08301528561010083015261012082015284610140820152611177565b91803b156106105783926105e3925194858094819363f42bc64160e01b83526004830161043d565b03925af1801561060b576105f5575080f35b80610602610608926100f3565b8061068e565b80f35b6110d8565b505050fd5b6106359150843d861161063b575b61062d818361013c565b8101906113a3565b3861054a565b503d610623565b816106639293503d841161066a575b61065b818361013c565b81019061138e565b9038610520565b503d610651565b6106889150833d851161066a5761065b818361013c565b386104b1565b60009103126100b857565b346100b85760003660031901126100b8576020604051737109709ecfa91a80626ff3989d68f67f5b1dd12d8152f35b35906001600160a01b03821682036100b857565b9190916060818403126100b857604051906106f682610106565b81938135906001600160401b03918281116100b85783019281601f850112156100b8578335936107258561022f565b90610733604051928361013c565b858252602095868084019160051b830101918583116100b85787809101915b83831061078c57505050508552838101359283116100b85760409361077d85936107879584016101d9565b90860152016106c8565b910152565b8235815291810191889101610752565b602080820190808352835180925260409283810182858560051b84010196019460009081935b8685106107d457505050505050505090565b9091929394959697603f198282030185528689516060928584820183519583528551809152846080840196019089905b80821061084957505050908291610828600196868096015184820387860152610418565b9281878060a01b03910151169101529a0195019501939695949291906107c2565b82518852968601968d968a94509290920191600190910190610804565b346100b8576020806003193601126100b8576001600160401b03906004358281116100b857366023820112156100b85780600401356108a48161022f565b936108b2604051958661013c565b818552838501906024809360051b850101933685116100b857838101925b8584106108ef576100b46108e389610b8e565b6040519182918261079c565b83358381116100b857879161090a83928836918701016106dc565b8152019301926108d0565b346100b8576100b46100a0610929366102ee565b610c95565b346100b85760003660031901126100b8576000546040516001600160a01b039091168152602090f35b346100b85760403660031901126100b8576004356001600160401b0381116100b857610a6d61098d6100b49236906004016106dc565b61009b60243561099c816101ae565b6109a4610d40565b50610a5260206109b2610d40565b946109bd8151610ab9565b516080870152016109e16109d18251610f9d565b6001600160401b031660a0870152565b6109fb6109ee8251610f51565b63ffffffff166040870152565b610a12610a088251610f06565b60ff1660c0870152565b610a49610a37610a228351610fe9565b610a2d818551610e7b565b60e0890152610b0b565b610a4381845151610da6565b90610b19565b90515114610db3565b600183524263ffffffff16602084015261ffff166060830152565b6040519182918261043d565b634e487b7160e01b600052601160045260246000fd5b6000198114610a9e5760010190565b610a79565b634e487b7160e01b600052603260045260246000fd5b805160011015610ac95760400190565b610aa3565b805115610ac95760200190565b8051821015610ac95760209160051b010190565b9060018201809211610a9e57565b90601f8201809211610a9e57565b60a001908160a011610a9e57565b91908201809211610a9e57565b90610b308261022f565b604090610b3f8251918261013c565b8381528093610b50601f199161022f565b0191600091825b848110610b65575050505050565b6020908351610b7381610106565b60608082528390818301528686830152828501015201610b57565b906000805b8351811015610bfb577f6eb224fb001ed210e379b335e35efe88672a8ce935d981a6896b27ffdf52a3b2610bd1610bca8387610adb565b5151610ace565b5114610be6575b610be190610a8f565b610b93565b90610bf3610be191610aef565b919050610bd8565b50610c0890929192610b26565b6000805b8351811015610c8e577f6eb224fb001ed210e379b335e35efe88672a8ce935d981a6896b27ffdf52a3b2610c43610bca8387610adb565b5114610c58575b610c5390610a8f565b610c0c565b90610c86610c5391610c6a8487610adb565b51610c758287610adb565b52610c808186610adb565b50610aef565b919050610c4a565b5050905090565b61044e6053602083015192604081015190606081015190608081015160a08201519060e060c08401519301519360405198899663ffffffff60e01b809260e01b16602089015260e01b16602487015261ffff60f01b9060f01b166028860152602a8501526001600160401b0360c01b9060c01b16604a84015260ff60f81b9060f81b166052830152610d3081518092602086860191016103f5565b810103603381018452018261013c565b6040519061016082018281106001600160401b038211176100ee57604052816101406000918281528260208201528260408201528260608201528260808201528260a08201528260c0820152606060e08201528261010082015260606101208201520152565b91908203918211610a9e57565b15610dba57565b606460405162461bcd60e51b815260206004820152602060248201527f6661696c656420746f20706172736520776f726d686f6c65206d6573736167656044820152fd5b15610e0557565b60405162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b6044820152606490fd5b15610e4257565b60405162461bcd60e51b8152602060048201526011602482015270736c6963655f6f75744f66426f756e647360781b6044820152606490fd5b610e8f82610e8881610afd565b1015610dfe565b610ea48151610e9d84610b0b565b1115610e3b565b81610ebc575050604051600081526020810160405290565b60405191601f81169160a0831560051b80858701019484860193010101905b808410610ef35750508252601f01601f191660405290565b9092835181526020809101930190610edb565b6080815110610f16576080015190565b60405162461bcd60e51b8152602060048201526013602482015272746f55696e74385f6f75744f66426f756e647360681b6044820152606490fd5b6040815110610f61576040015190565b60405162461bcd60e51b8152602060048201526014602482015273746f55696e7433325f6f75744f66426f756e647360601b6044820152606490fd5b6020815110610fad576020015190565b60405162461bcd60e51b8152602060048201526014602482015273746f55696e7436345f6f75744f66426f756e647360601b6044820152606490fd5b60a0815110610ff95760a0015190565b60405162461bcd60e51b8152602060048201526015602482015274746f55696e743235365f6f75744f66426f756e647360581b6044820152606490fd5b604051602081018181106001600160401b038211176100ee576040526000815290565b60409081519161106883610121565b60018352829160005b6020808210156110ac5783516020929161108a826100d3565b6000825260008183015260008683015260006060830152828801015201611071565b505091925050565b908160609103126100b85780516110ca8161017d565b916040602083015192015190565b6040513d6000823e3d90fd5b908160209103126100b8575161044e81610195565b60ff601a199116019060ff8211610a9e57565b959294919093604898979460ff60f81b96879384809360f81b168a5263ffffffff60e01b9060e01b1660018a015260f81b16600588015260f81b1660068601526007850152602784015260f81b16604782015261117282518093602086850191016103f5565b010190565b61118081610c95565b906111cc61118d8361136a565b91610140810192835260606111a0611059565b60015494516040516338d07aa960e21b8152600481019690965260248601529392839081906044820190565b0381737109709ecfa91a80626ff3989d68f67f5b1dd12d5afa91821561060b5760009081908294611327575b509161123561124c92600494604061120f89610ace565b51019061121b89610ace565b51602098896112298c610ace565b510152529060ff169052565b6000606061124287610ace565b5101525160ff1690565b6000549094908390611266906001600160a01b0316610478565b604051631cfe795160e01b815293849182905afa801561060b5761044e946112ea936000926112f8575b50805160ff166112ad60606112a484610ace565b51015160ff1690565b6112b683610ace565b5151916112dc6112d760406112a48b6112ce89610ace565b51015197610ace565b6110f9565b946040519a8b998a0161110c565b03601f19810183528261013c565b611319919250853d8711611320575b611311818361013c565b8101906110e4565b9038611290565b503d611307565b611235945061124c925060049391506113569060603d8111611363575b61134e818361013c565b8101906110b4565b95919092945092506111f8565b503d611344565b60208151910120604051602081019182526020815261138881610121565b51902090565b908160209103126100b8575161044e816101ae565b908160209103126100b857519056fea264697066735822122041ba82dfcac6ac464ba82cc680b673dd555c5f23ff180e9f642f544c6d55b93864736f6c634300081300330000000000000000000000007109709ecfa91a80626ff3989d68f67f5b1dd12d";

type WormholeSimulatorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: WormholeSimulatorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class WormholeSimulator__factory extends ContractFactory {
  constructor(...args: WormholeSimulatorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    wormhole_: string,
    devnetGuardian: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<WormholeSimulator> {
    return super.deploy(
      wormhole_,
      devnetGuardian,
      overrides || {}
    ) as Promise<WormholeSimulator>;
  }
  override getDeployTransaction(
    wormhole_: string,
    devnetGuardian: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(
      wormhole_,
      devnetGuardian,
      overrides || {}
    );
  }
  override attach(address: string): WormholeSimulator {
    return super.attach(address) as WormholeSimulator;
  }
  override connect(signer: Signer): WormholeSimulator__factory {
    return super.connect(signer) as WormholeSimulator__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): WormholeSimulatorInterface {
    return new utils.Interface(_abi) as WormholeSimulatorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): WormholeSimulator {
    return new Contract(address, _abi, signerOrProvider) as WormholeSimulator;
  }
}
