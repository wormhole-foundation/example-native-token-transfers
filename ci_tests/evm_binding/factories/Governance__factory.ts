/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Governance, GovernanceInterface } from "../Governance";

const _abi = [
  {
    type: "constructor",
    inputs: [
      {
        name: "_wormhole",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "MODULE",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "encodeGeneralPurposeGovernanceMessage",
    inputs: [
      {
        name: "m",
        type: "tuple",
        internalType: "struct Governance.GeneralPurposeGovernanceMessage",
        components: [
          {
            name: "action",
            type: "uint8",
            internalType: "uint8",
          },
          {
            name: "chain",
            type: "uint16",
            internalType: "uint16",
          },
          {
            name: "governanceContract",
            type: "address",
            internalType: "address",
          },
          {
            name: "governedContract",
            type: "address",
            internalType: "address",
          },
          {
            name: "callData",
            type: "bytes",
            internalType: "bytes",
          },
        ],
      },
    ],
    outputs: [
      {
        name: "encoded",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    stateMutability: "pure",
  },
  {
    type: "function",
    name: "parseGeneralPurposeGovernanceMessage",
    inputs: [
      {
        name: "encoded",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [
      {
        name: "message",
        type: "tuple",
        internalType: "struct Governance.GeneralPurposeGovernanceMessage",
        components: [
          {
            name: "action",
            type: "uint8",
            internalType: "uint8",
          },
          {
            name: "chain",
            type: "uint16",
            internalType: "uint16",
          },
          {
            name: "governanceContract",
            type: "address",
            internalType: "address",
          },
          {
            name: "governedContract",
            type: "address",
            internalType: "address",
          },
          {
            name: "callData",
            type: "bytes",
            internalType: "bytes",
          },
        ],
      },
    ],
    stateMutability: "pure",
  },
  {
    type: "function",
    name: "performGovernance",
    inputs: [
      {
        name: "vaa",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "error",
    name: "GovernanceActionAlreadyConsumed",
    inputs: [
      {
        name: "digest",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
  },
  {
    type: "error",
    name: "InvalidAction",
    inputs: [
      {
        name: "action",
        type: "uint8",
        internalType: "uint8",
      },
    ],
  },
  {
    type: "error",
    name: "InvalidGovernanceChainId",
    inputs: [
      {
        name: "chainId",
        type: "uint16",
        internalType: "uint16",
      },
    ],
  },
  {
    type: "error",
    name: "InvalidGovernanceContract",
    inputs: [
      {
        name: "contractAddress",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
  },
  {
    type: "error",
    name: "InvalidModule",
    inputs: [
      {
        name: "module",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
  },
  {
    type: "error",
    name: "LengthMismatch",
    inputs: [
      {
        name: "encodedLength",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "expectedLength",
        type: "uint256",
        internalType: "uint256",
      },
    ],
  },
  {
    type: "error",
    name: "NotRecipientChain",
    inputs: [
      {
        name: "chainId",
        type: "uint16",
        internalType: "uint16",
      },
    ],
  },
  {
    type: "error",
    name: "NotRecipientContract",
    inputs: [
      {
        name: "contractAddress",
        type: "address",
        internalType: "address",
      },
    ],
  },
  {
    type: "error",
    name: "OutOfBounds",
    inputs: [
      {
        name: "offset",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "length",
        type: "uint256",
        internalType: "uint256",
      },
    ],
  },
  {
    type: "error",
    name: "PayloadTooLong",
    inputs: [
      {
        name: "size",
        type: "uint256",
        internalType: "uint256",
      },
    ],
  },
] as const;

const _bytecode =
  "0x60a03461008157601f610e3d38819003918201601f19168301916001600160401b038311848410176100865780849260209460405283398101031261008157516001600160a01b0381169081900361008157608052604051610da0908161009d8239608051818181610361015281816103c90152818161042601526104f10152f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe608080604052600436101561001357600080fd5b600090813560e01c908163094d3a34146109d9575080635601672414610289578063b281d07a146101fa5763cfa828971461004d57600080fd5b346101e357602060031981813601126101f657600435906001600160401b03908183116101f25760a09083360301126101ee576040519061008d82610a3d565b826004013560ff811681036101ea57825260248301359261ffff9081851685036101e6578584019485526100c360448201610b36565b92604085019384526100d760648301610b36565b976060860198895260848301359182116101e357506100fb91369101600401610ad0565b906080840191808352519081116101cb5750916101b39391606d93519182519051935191519751976040519889957747656e6572616c507572706f7365476f7665726e616e63658a88015260ff60f81b9060f81b16604087015261ffff60f01b809460f01b1660418701526bffffffffffffffffffffffff19809260601b16604387015260601b16605785015260f01b16606b8301526101a381518092878686019101610aee565b810103604d810185520183610a58565b6101c7604051928284938452830190610b11565b0390f35b6024906040519063a341969160e01b82526004820152fd5b80fd5b8680fd5b8580fd5b8380fd5b8480fd5b8280fd5b50346101e35760203660031901126101e357600435906001600160401b0382116101e35760806102356102303660048601610ad0565b610baf565b6101c76040519283926020845260ff815116602085015261ffff602082015116604085015260018060a01b0380604083015116606086015260608201511682850152015160a08084015260c0830190610b11565b50346101e35760203660031901126101e3576004356001600160401b0381116109d557366023820112156109d55780600401356001600160401b0381116101f65736602482840101116101f65761035d916102e8916024369201610a94565b82604051916102f683610a0b565b8183528160208401528160408401528160608401528160808401528160a08401528160c0840152606060e084015281610140610100948286820152606061012082015201526040518094819263607ec5ef60e11b8352602060048401526024830190610b11565b03817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa9081156109ca5783928491859361071b575b50501561059d575060608101805160405163fbe3c2cd60e01b815261ffff9392918416906020816004817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa801561063c57859187916106df575b5016036106c457506080810180516040516358b9591160e11b8152906020826004817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa91821561063c578692610690575b500361067757506101408101518084527f70eabfd7aa6e31808f975131c5b8c69fc72fba8ff2ad97ffb1c2acba4582aaed908160205260ff60408620541661065f57845260205260408320805460ff1916600117905560e001516104c190610baf565b9060ff82511660018103610647575060208281018051604051634d4502c960e11b815291929084169190816004817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa801561063c5784918791610600575b5016036105e557505060408101516001600160a01b03163081036105cd575060608101516080909101518051839283926020019083906001600160a01b03165af13d156105c5573d9061057c82610a79565b9161058a6040519384610a58565b82523d83602084013e5b1561059d575080f35b60405162461bcd60e51b8152602060048201529081906105c1906024830190610b11565b0390fd5b606090610594565b60249060405190630212334760e41b82526004820152fd5b51604051638510fea560e01b81529116600482015260249150fd5b9150506020813d602011610634575b8161061c60209383610a58565b810103126101ea5761062e8491610b4a565b3861052a565b3d915061060f565b6040513d88823e3d90fd5b602490604051906317949c6760e11b82526004820152fd5b602490604051906364cbf47160e01b82526004820152fd5b602490516040519063dd16ea0760e01b82526004820152fd5b9091506020813d6020116106bc575b816106ac60209383610a58565b810103126101ea5751903861045e565b3d915061069f565b5160405163259b974160e11b81529083166004820152602490fd5b9150506020813d602011610713575b816106fb60209383610a58565b810103126101ea5761070d8591610b4a565b38610402565b3d91506106ee565b92509250503d918284823e6107308382610a58565b60608184810103126101ee5780516001600160401b0381116101f25761016081830185840103126101f2576040519261076884610a0b565b610773828401610b59565b8452610783602083850101610b67565b6020850152610796604083850101610b67565b60408501526107a9606083850101610b4a565b60608501528282016080818101519086015260a001516001600160401b03811681036101e65760a08501526107e260c083850101610b59565b60c085015260e082840101516001600160401b0381116101e657858401601f82858701010112156101e657828401018051610824918588019190602001610b78565b60e08501526108368183850101610b67565b9084015261012081830101516001600160401b0381116101ea57848301601f82848601010112156101ea57808284010151906001600160401b0382116109b6576040519161088a60208260051b0184610a58565b808352602083019187860160208360071b83888a01010101116109b2576020818688010101925b60208360071b83888a010101018410610929575050505090610140916101208501528201015161014083015260208101519283151584036101f25760408201516001600160401b0381116101ea57820190808301601f830112156101ea57610920920190602081519101610b78565b9091388061039d565b6080848a890103126109ae576040518060808101106001600160401b0360808301111761099a57602080939282608080940160405287518152828801518382015261097660408901610b59565b604082015261098760608901610b59565b60608201528152019401939091506108b1565b634e487b7160e01b8b52604160045260248bfd5b8980fd5b8880fd5b634e487b7160e01b87526041600452602487fd5b6040513d85823e3d90fd5b5080fd5b9050346109d557816003193601126109d557807747656e6572616c507572706f7365476f7665726e616e636560209252f35b61016081019081106001600160401b03821117610a2757604052565b634e487b7160e01b600052604160045260246000fd5b60a081019081106001600160401b03821117610a2757604052565b90601f801991011681019081106001600160401b03821117610a2757604052565b6001600160401b038111610a2757601f01601f191660200190565b929192610aa082610a79565b91610aae6040519384610a58565b829481845281830111610acb578281602093846000960137010152565b600080fd5b9080601f83011215610acb57816020610aeb93359101610a94565b90565b60005b838110610b015750506000910152565b8181015183820152602001610af1565b90602091610b2a81518092818552858086019101610aee565b601f01601f1916010190565b35906001600160a01b0382168203610acb57565b519061ffff82168203610acb57565b519060ff82168203610acb57565b519063ffffffff82168203610acb57565b90929192610b8581610a79565b91610b936040519384610a58565b829482845282820111610acb576020610bad930190610aee565b565b906040805192610bbe84610a3d565b60008452602084019060008252828501916000835260608601600081526080870193606085528760208501517747656e6572616c507572706f7365476f7665726e616e63658103610ccb575060ff602186015116905261ffff92836023860151169052603784015190845180603711610cad57506001600160a01b039182169052604b84810151855190918110610c8f5750169052604d820151610c63911682610ce2565b92525191818303610c7357505050565b6044935051916355c5b3e360e11b835260048301526024820152fd5b604490885190633d71388b60e21b8252604b60048301526024820152fd5b604490885190633d71388b60e21b8252603760048301526024820152fd5b602490885190638c1c0dbf60e01b82526004820152fd5b90918215610d3c5782604d019160405193601f8116918215610d33575b604d838701938385019201015b818410610d235750508452601f01601f1916604052565b8051845260209384019301610d0c565b60209250610cff565b915050604051602081018181106001600160401b03821117610a275760405260008152600036813790604d9056fea264697066735822122016183c71518cb963fef00791be6a943dc5217ac0c9cd283e24d4479dce7fce9164736f6c63430008130033";

type GovernanceConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GovernanceConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Governance__factory extends ContractFactory {
  constructor(...args: GovernanceConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _wormhole: string,
    overrides?: Overrides & { from?: string }
  ): Promise<Governance> {
    return super.deploy(_wormhole, overrides || {}) as Promise<Governance>;
  }
  override getDeployTransaction(
    _wormhole: string,
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(_wormhole, overrides || {});
  }
  override attach(address: string): Governance {
    return super.attach(address) as Governance;
  }
  override connect(signer: Signer): Governance__factory {
    return super.connect(signer) as Governance__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GovernanceInterface {
    return new utils.Interface(_abi) as GovernanceInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Governance {
    return new Contract(address, _abi, signerOrProvider) as Governance;
  }
}
