/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  WormholeRelayerTest,
  WormholeRelayerTestInterface,
} from "../../WormholeRelayerTest.sol/WormholeRelayerTest";

const _abi = [
  {
    type: "receive",
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "IS_TEST",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "activeForks",
    inputs: [
      {
        name: "",
        type: "uint16",
        internalType: "uint16",
      },
    ],
    outputs: [
      {
        name: "chainId",
        type: "uint16",
        internalType: "uint16",
      },
      {
        name: "name",
        type: "string",
        internalType: "string",
      },
      {
        name: "url",
        type: "string",
        internalType: "string",
      },
      {
        name: "fork",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "relayer",
        type: "address",
        internalType: "contract IWormholeRelayer",
      },
      {
        name: "tokenBridge",
        type: "address",
        internalType: "contract ITokenBridge",
      },
      {
        name: "wormhole",
        type: "address",
        internalType: "contract IWormhole",
      },
      {
        name: "guardian",
        type: "address",
        internalType: "contract WormholeSimulator",
      },
      {
        name: "USDC",
        type: "address",
        internalType: "contract IERC20",
      },
      {
        name: "circleTokenMessenger",
        type: "address",
        internalType: "contract ITokenMessenger",
      },
      {
        name: "circleMessageTransmitter",
        type: "address",
        internalType: "contract IMessageTransmitter",
      },
      {
        name: "circleAttester",
        type: "address",
        internalType: "contract CircleMessageTransmitterSimulator",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "activeForksList",
    inputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint16",
        internalType: "uint16",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "chainInfosMainnet",
    inputs: [
      {
        name: "",
        type: "uint16",
        internalType: "uint16",
      },
    ],
    outputs: [
      {
        name: "chainId",
        type: "uint16",
        internalType: "uint16",
      },
      {
        name: "name",
        type: "string",
        internalType: "string",
      },
      {
        name: "url",
        type: "string",
        internalType: "string",
      },
      {
        name: "relayer",
        type: "address",
        internalType: "contract IWormholeRelayer",
      },
      {
        name: "tokenBridge",
        type: "address",
        internalType: "contract ITokenBridge",
      },
      {
        name: "wormhole",
        type: "address",
        internalType: "contract IWormhole",
      },
      {
        name: "circleMessageTransmitter",
        type: "address",
        internalType: "contract IMessageTransmitter",
      },
      {
        name: "circleTokenMessenger",
        type: "address",
        internalType: "contract ITokenMessenger",
      },
      {
        name: "USDC",
        type: "address",
        internalType: "contract IERC20",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "chainInfosTestnet",
    inputs: [
      {
        name: "",
        type: "uint16",
        internalType: "uint16",
      },
    ],
    outputs: [
      {
        name: "chainId",
        type: "uint16",
        internalType: "uint16",
      },
      {
        name: "name",
        type: "string",
        internalType: "string",
      },
      {
        name: "url",
        type: "string",
        internalType: "string",
      },
      {
        name: "relayer",
        type: "address",
        internalType: "contract IWormholeRelayer",
      },
      {
        name: "tokenBridge",
        type: "address",
        internalType: "contract ITokenBridge",
      },
      {
        name: "wormhole",
        type: "address",
        internalType: "contract IWormhole",
      },
      {
        name: "circleMessageTransmitter",
        type: "address",
        internalType: "contract IMessageTransmitter",
      },
      {
        name: "circleTokenMessenger",
        type: "address",
        internalType: "contract ITokenMessenger",
      },
      {
        name: "USDC",
        type: "address",
        internalType: "contract IERC20",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "createAndAttestToken",
    inputs: [
      {
        name: "homeChain",
        type: "uint16",
        internalType: "uint16",
      },
    ],
    outputs: [
      {
        name: "token",
        type: "address",
        internalType: "contract ERC20Mock",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "excludeArtifacts",
    inputs: [],
    outputs: [
      {
        name: "excludedArtifacts_",
        type: "string[]",
        internalType: "string[]",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "excludeContracts",
    inputs: [],
    outputs: [
      {
        name: "excludedContracts_",
        type: "address[]",
        internalType: "address[]",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "excludeSenders",
    inputs: [],
    outputs: [
      {
        name: "excludedSenders_",
        type: "address[]",
        internalType: "address[]",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "failed",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "logFork",
    inputs: [],
    outputs: [],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "mintUSDC",
    inputs: [
      {
        name: "chain",
        type: "uint16",
        internalType: "uint16",
      },
      {
        name: "addr",
        type: "address",
        internalType: "address",
      },
      {
        name: "amount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "mockOffchainRelayer",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "contract MockOffchainRelayer",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "performDelivery",
    inputs: [
      {
        name: "debugLogging",
        type: "bool",
        internalType: "bool",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "performDelivery",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "performDelivery",
    inputs: [
      {
        name: "logs",
        type: "tuple[]",
        internalType: "struct VmSafe.Log[]",
        components: [
          {
            name: "topics",
            type: "bytes32[]",
            internalType: "bytes32[]",
          },
          {
            name: "data",
            type: "bytes",
            internalType: "bytes",
          },
          {
            name: "emitter",
            type: "address",
            internalType: "address",
          },
        ],
      },
      {
        name: "debugLogging",
        type: "bool",
        internalType: "bool",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "performDelivery",
    inputs: [
      {
        name: "logs",
        type: "tuple[]",
        internalType: "struct VmSafe.Log[]",
        components: [
          {
            name: "topics",
            type: "bytes32[]",
            internalType: "bytes32[]",
          },
          {
            name: "data",
            type: "bytes",
            internalType: "bytes",
          },
          {
            name: "emitter",
            type: "address",
            internalType: "address",
          },
        ],
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "setActiveForks",
    inputs: [
      {
        name: "chainInfos",
        type: "tuple[]",
        internalType: "struct ChainInfo[]",
        components: [
          {
            name: "chainId",
            type: "uint16",
            internalType: "uint16",
          },
          {
            name: "name",
            type: "string",
            internalType: "string",
          },
          {
            name: "url",
            type: "string",
            internalType: "string",
          },
          {
            name: "relayer",
            type: "address",
            internalType: "contract IWormholeRelayer",
          },
          {
            name: "tokenBridge",
            type: "address",
            internalType: "contract ITokenBridge",
          },
          {
            name: "wormhole",
            type: "address",
            internalType: "contract IWormhole",
          },
          {
            name: "circleMessageTransmitter",
            type: "address",
            internalType: "contract IMessageTransmitter",
          },
          {
            name: "circleTokenMessenger",
            type: "address",
            internalType: "contract ITokenMessenger",
          },
          {
            name: "USDC",
            type: "address",
            internalType: "contract IERC20",
          },
        ],
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "setUp",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "setUpFork",
    inputs: [
      {
        name: "fork",
        type: "tuple",
        internalType: "struct ActiveFork",
        components: [
          {
            name: "chainId",
            type: "uint16",
            internalType: "uint16",
          },
          {
            name: "name",
            type: "string",
            internalType: "string",
          },
          {
            name: "url",
            type: "string",
            internalType: "string",
          },
          {
            name: "fork",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "relayer",
            type: "address",
            internalType: "contract IWormholeRelayer",
          },
          {
            name: "tokenBridge",
            type: "address",
            internalType: "contract ITokenBridge",
          },
          {
            name: "wormhole",
            type: "address",
            internalType: "contract IWormhole",
          },
          {
            name: "guardian",
            type: "address",
            internalType: "contract WormholeSimulator",
          },
          {
            name: "USDC",
            type: "address",
            internalType: "contract IERC20",
          },
          {
            name: "circleTokenMessenger",
            type: "address",
            internalType: "contract ITokenMessenger",
          },
          {
            name: "circleMessageTransmitter",
            type: "address",
            internalType: "contract IMessageTransmitter",
          },
          {
            name: "circleAttester",
            type: "address",
            internalType: "contract CircleMessageTransmitterSimulator",
          },
        ],
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "setUpGeneral",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "targetArtifactSelectors",
    inputs: [],
    outputs: [
      {
        name: "targetedArtifactSelectors_",
        type: "tuple[]",
        internalType: "struct StdInvariant.FuzzSelector[]",
        components: [
          {
            name: "addr",
            type: "address",
            internalType: "address",
          },
          {
            name: "selectors",
            type: "bytes4[]",
            internalType: "bytes4[]",
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "targetArtifacts",
    inputs: [],
    outputs: [
      {
        name: "targetedArtifacts_",
        type: "string[]",
        internalType: "string[]",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "targetContracts",
    inputs: [],
    outputs: [
      {
        name: "targetedContracts_",
        type: "address[]",
        internalType: "address[]",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "targetInterfaces",
    inputs: [],
    outputs: [
      {
        name: "targetedInterfaces_",
        type: "tuple[]",
        internalType: "struct StdInvariant.FuzzInterface[]",
        components: [
          {
            name: "addr",
            type: "address",
            internalType: "address",
          },
          {
            name: "artifacts",
            type: "string[]",
            internalType: "string[]",
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "targetSelectors",
    inputs: [],
    outputs: [
      {
        name: "targetedSelectors_",
        type: "tuple[]",
        internalType: "struct StdInvariant.FuzzSelector[]",
        components: [
          {
            name: "addr",
            type: "address",
            internalType: "address",
          },
          {
            name: "selectors",
            type: "bytes4[]",
            internalType: "bytes4[]",
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "targetSenders",
    inputs: [],
    outputs: [
      {
        name: "targetedSenders_",
        type: "address[]",
        internalType: "address[]",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "event",
    name: "log",
    inputs: [
      {
        name: "",
        type: "string",
        indexed: false,
        internalType: "string",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_address",
    inputs: [
      {
        name: "",
        type: "address",
        indexed: false,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_array",
    inputs: [
      {
        name: "val",
        type: "uint256[]",
        indexed: false,
        internalType: "uint256[]",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_array",
    inputs: [
      {
        name: "val",
        type: "int256[]",
        indexed: false,
        internalType: "int256[]",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_array",
    inputs: [
      {
        name: "val",
        type: "address[]",
        indexed: false,
        internalType: "address[]",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_bytes",
    inputs: [
      {
        name: "",
        type: "bytes",
        indexed: false,
        internalType: "bytes",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_bytes32",
    inputs: [
      {
        name: "",
        type: "bytes32",
        indexed: false,
        internalType: "bytes32",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_int",
    inputs: [
      {
        name: "",
        type: "int256",
        indexed: false,
        internalType: "int256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_named_address",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string",
      },
      {
        name: "val",
        type: "address",
        indexed: false,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_named_array",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string",
      },
      {
        name: "val",
        type: "uint256[]",
        indexed: false,
        internalType: "uint256[]",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_named_array",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string",
      },
      {
        name: "val",
        type: "int256[]",
        indexed: false,
        internalType: "int256[]",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_named_array",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string",
      },
      {
        name: "val",
        type: "address[]",
        indexed: false,
        internalType: "address[]",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_named_bytes",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string",
      },
      {
        name: "val",
        type: "bytes",
        indexed: false,
        internalType: "bytes",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_named_bytes32",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string",
      },
      {
        name: "val",
        type: "bytes32",
        indexed: false,
        internalType: "bytes32",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_named_decimal_int",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string",
      },
      {
        name: "val",
        type: "int256",
        indexed: false,
        internalType: "int256",
      },
      {
        name: "decimals",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_named_decimal_uint",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string",
      },
      {
        name: "val",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "decimals",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_named_int",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string",
      },
      {
        name: "val",
        type: "int256",
        indexed: false,
        internalType: "int256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_named_string",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string",
      },
      {
        name: "val",
        type: "string",
        indexed: false,
        internalType: "string",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_named_uint",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string",
      },
      {
        name: "val",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_string",
    inputs: [
      {
        name: "",
        type: "string",
        indexed: false,
        internalType: "string",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "log_uint",
    inputs: [
      {
        name: "",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "logs",
    inputs: [
      {
        name: "",
        type: "bytes",
        indexed: false,
        internalType: "bytes",
      },
    ],
    anonymous: false,
  },
] as const;

export class WormholeRelayerTest__factory {
  static readonly abi = _abi;
  static createInterface(): WormholeRelayerTestInterface {
    return new utils.Interface(_abi) as WormholeRelayerTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): WormholeRelayerTest {
    return new Contract(address, _abi, signerOrProvider) as WormholeRelayerTest;
  }
}
