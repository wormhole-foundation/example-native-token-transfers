/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TestImplementation2,
  TestImplementation2Interface,
} from "../../Implementation.t.sol/TestImplementation2";

const _abi = [
  {
    type: "function",
    name: "getMigratesImmutables",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "incrementCounter",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "initialize",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "migrate",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "otherInitializer",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "upgrade",
    inputs: [
      {
        name: "newImplementation",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "upgradeCount",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "event",
    name: "AdminChanged",
    inputs: [
      {
        name: "previousAdmin",
        type: "address",
        indexed: false,
        internalType: "address",
      },
      {
        name: "newAdmin",
        type: "address",
        indexed: false,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "BeaconUpgraded",
    inputs: [
      {
        name: "beacon",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "Initialized",
    inputs: [
      {
        name: "version",
        type: "uint64",
        indexed: false,
        internalType: "uint64",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "Upgraded",
    inputs: [
      {
        name: "implementation",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "error",
    name: "InvalidInitialization",
    inputs: [],
  },
  {
    type: "error",
    name: "NotInitializing",
    inputs: [],
  },
  {
    type: "error",
    name: "NotMigrating",
    inputs: [],
  },
  {
    type: "error",
    name: "OnlyDelegateCall",
    inputs: [],
  },
] as const;

const _bytecode =
  "0x60a080604052346100c5577ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a009081549060ff8260401c166100b657506001600160401b036002600160401b031982821601610071575b306080526040516106bc90816100cb8239608051816106450152f35b6001600160401b031990911681179091556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d290602090a1388080610055565b63f92ee8a960e01b8152600490fd5b600080fdfe6040608081526004908136101561001557600080fd5b600091823560e01c9081630900f010146102f35781635b34b9661461027f578163689f90c31461023c5781638129fc1c1461021b5781638fd3ab80146100ae57508063c2b3b94a1461008f5763c4128b6d1461007057600080fd5b3461008b578160031936011261008b57602091549051908152f35b5080fd5b82346100ab57806003193601126100ab576100a8610543565b80f35b80fd5b83833461008b578160031936011261008b576100c8610642565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a009081549167ffffffffffffffff80841660018101908282116102085760ff86861c169081156101fb575b506101eb5790680100000000000000009116809468ffffffffffffffffff1916171780825560ff7f7487ca88d037ca20519908b1ee7556206bef53bce0226a348750cb9d4f688e4e5416156101db5760ff81841c16156101cb57845460001981146101b857600101855568ff000000000000000019169055519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d290602090a180f35b634e487b7160e01b865260118752602486fd5b8251631afcd79f60e31b81528690fd5b8251632866815360e11b81528690fd5b835163f92ee8a960e01b81528790fd5b9050828216111588610113565b634e487b7160e01b875260118852602487fd5b83346100ab57806003193601126100ab57610234610642565b6100a8610543565b50503461008b578160031936011261008b5760209060ff7f5443fea4dc453d96b81ce55b62e11a4094cc4cbb8a360956a7253cfdb42506cb541690519015158152f35b83833461008b578160031936011261008b5760ff7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054821c16156102e45750805460001981146102d157600101815580f35b506011602492634e487b7160e01b835252fd5b51631afcd79f60e31b81529050fd5b91905034610477576020918260031936011261047b5780356001600160a01b038116908181036104d457610325610642565b3b156104eb577f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b031916821790557fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b8580a27f7487ca88d037ca20519908b1ee7556206bef53bce0226a348750cb9d4f688e4e9283549260ff84166104d85760ff199384166001178555303b156104d457805163011fa75760e71b81528681858183305af1801561049c576104a6575b50805163689f90c360e01b81529282848281305afa801561049c57610431575b505050507f5443fea4dc453d96b81ce55b62e11a4094cc4cbb8a360956a7253cfdb42506cb818154169055815416905580f35b82913d8411610494575b601f8301601f191685019167ffffffffffffffff83118684101761047f57505282018290031261047b57518015150361047757388080806103fe565b8280fd5b8380fd5b604190634e487b7160e01b6000525260246000fd5b3d925061043b565b82513d89823e3d90fd5b67ffffffffffffffff81979297116104c157865294386103de565b634e487b7160e01b825260418452602482fd5b8580fd5b634e487b7160e01b865260018352602486fd5b5082608492519162461bcd60e51b8352820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152fd5b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805460ff8160401c16159067ffffffffffffffff81168015908161063a575b6001149081610630575b159081610627575b506106155767ffffffffffffffff1981166001178355816105f6575b506105b95750565b68ff00000000000000001981541690557fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2602060405160018152a1565b68ffffffffffffffffff191668010000000000000001178255386105b1565b60405163f92ee8a960e01b8152600490fd5b90501538610595565b303b15915061058d565b839150610583565b307f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03161461067457565b604051633c64f99360e21b8152600490fdfea2646970667358221220a4994a8e6a9fea92bc03bf9e3d032e399a5389d784d5e3967d3596b37b6a1e9364736f6c63430008130033";

type TestImplementation2ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestImplementation2ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestImplementation2__factory extends ContractFactory {
  constructor(...args: TestImplementation2ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<TestImplementation2> {
    return super.deploy(overrides || {}) as Promise<TestImplementation2>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestImplementation2 {
    return super.attach(address) as TestImplementation2;
  }
  override connect(signer: Signer): TestImplementation2__factory {
    return super.connect(signer) as TestImplementation2__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestImplementation2Interface {
    return new utils.Interface(_abi) as TestImplementation2Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestImplementation2 {
    return new Contract(address, _abi, signerOrProvider) as TestImplementation2;
  }
}
