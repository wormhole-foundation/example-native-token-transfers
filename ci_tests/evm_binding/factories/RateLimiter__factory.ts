/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { RateLimiter, RateLimiterInterface } from "../RateLimiter";

const _abi = [
  {
    type: "function",
    name: "getCurrentInboundCapacity",
    inputs: [
      {
        name: "chainId_",
        type: "uint16",
        internalType: "uint16",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getCurrentOutboundCapacity",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getInboundQueuedTransfer",
    inputs: [
      {
        name: "digest",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    outputs: [
      {
        name: "",
        type: "tuple",
        internalType: "struct IRateLimiter.InboundQueuedTransfer",
        components: [
          {
            name: "amount",
            type: "tuple",
            internalType: "struct TrimmedAmount",
            components: [
              {
                name: "amount",
                type: "uint64",
                internalType: "uint64",
              },
              {
                name: "decimals",
                type: "uint8",
                internalType: "uint8",
              },
            ],
          },
          {
            name: "txTimestamp",
            type: "uint64",
            internalType: "uint64",
          },
          {
            name: "recipient",
            type: "address",
            internalType: "address",
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getOutboundQueuedTransfer",
    inputs: [
      {
        name: "queueSequence",
        type: "uint64",
        internalType: "uint64",
      },
    ],
    outputs: [
      {
        name: "",
        type: "tuple",
        internalType: "struct IRateLimiter.OutboundQueuedTransfer",
        components: [
          {
            name: "recipient",
            type: "bytes32",
            internalType: "bytes32",
          },
          {
            name: "amount",
            type: "tuple",
            internalType: "struct TrimmedAmount",
            components: [
              {
                name: "amount",
                type: "uint64",
                internalType: "uint64",
              },
              {
                name: "decimals",
                type: "uint8",
                internalType: "uint8",
              },
            ],
          },
          {
            name: "txTimestamp",
            type: "uint64",
            internalType: "uint64",
          },
          {
            name: "recipientChain",
            type: "uint16",
            internalType: "uint16",
          },
          {
            name: "sender",
            type: "address",
            internalType: "address",
          },
          {
            name: "transceiverInstructions",
            type: "bytes",
            internalType: "bytes",
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "rateLimitDuration",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint64",
        internalType: "uint64",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "tokenDecimals",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint8",
        internalType: "uint8",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "event",
    name: "InboundTransferQueued",
    inputs: [
      {
        name: "digest",
        type: "bytes32",
        indexed: false,
        internalType: "bytes32",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "OutboundTransferQueued",
    inputs: [
      {
        name: "queueSequence",
        type: "uint64",
        indexed: false,
        internalType: "uint64",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "OutboundTransferRateLimited",
    inputs: [
      {
        name: "sender",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "sequence",
        type: "uint64",
        indexed: false,
        internalType: "uint64",
      },
      {
        name: "amount",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "currentCapacity",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "error",
    name: "CapacityCannotExceedLimit",
    inputs: [
      {
        name: "newCurrentCapacity",
        type: "tuple",
        internalType: "struct TrimmedAmount",
        components: [
          {
            name: "amount",
            type: "uint64",
            internalType: "uint64",
          },
          {
            name: "decimals",
            type: "uint8",
            internalType: "uint8",
          },
        ],
      },
      {
        name: "newLimit",
        type: "tuple",
        internalType: "struct TrimmedAmount",
        components: [
          {
            name: "amount",
            type: "uint64",
            internalType: "uint64",
          },
          {
            name: "decimals",
            type: "uint8",
            internalType: "uint8",
          },
        ],
      },
    ],
  },
  {
    type: "error",
    name: "InboundQueuedTransferNotFound",
    inputs: [
      {
        name: "digest",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
  },
  {
    type: "error",
    name: "InboundQueuedTransferStillQueued",
    inputs: [
      {
        name: "digest",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "transferTimestamp",
        type: "uint256",
        internalType: "uint256",
      },
    ],
  },
  {
    type: "error",
    name: "NotEnoughCapacity",
    inputs: [
      {
        name: "currentCapacity",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "amount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
  },
  {
    type: "error",
    name: "OutboundQueuedTransferNotFound",
    inputs: [
      {
        name: "queueSequence",
        type: "uint64",
        internalType: "uint64",
      },
    ],
  },
  {
    type: "error",
    name: "OutboundQueuedTransferStillQueued",
    inputs: [
      {
        name: "queueSequence",
        type: "uint64",
        internalType: "uint64",
      },
      {
        name: "transferTimestamp",
        type: "uint256",
        internalType: "uint256",
      },
    ],
  },
] as const;

export class RateLimiter__factory {
  static readonly abi = _abi;
  static createInterface(): RateLimiterInterface {
    return new utils.Interface(_abi) as RateLimiterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RateLimiter {
    return new Contract(address, _abi, signerOrProvider) as RateLimiter;
  }
}
