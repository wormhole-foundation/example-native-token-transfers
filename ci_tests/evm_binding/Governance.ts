/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace Governance {
  export type GeneralPurposeGovernanceMessageStruct = {
    action: BigNumberish;
    chain: BigNumberish;
    governanceContract: string;
    governedContract: string;
    callData: BytesLike;
  };

  export type GeneralPurposeGovernanceMessageStructOutput = [
    number,
    number,
    string,
    string,
    string
  ] & {
    action: number;
    chain: number;
    governanceContract: string;
    governedContract: string;
    callData: string;
  };
}

export interface GovernanceInterface extends utils.Interface {
  functions: {
    "MODULE()": FunctionFragment;
    "encodeGeneralPurposeGovernanceMessage((uint8,uint16,address,address,bytes))": FunctionFragment;
    "parseGeneralPurposeGovernanceMessage(bytes)": FunctionFragment;
    "performGovernance(bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MODULE"
      | "encodeGeneralPurposeGovernanceMessage"
      | "parseGeneralPurposeGovernanceMessage"
      | "performGovernance"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "MODULE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "encodeGeneralPurposeGovernanceMessage",
    values: [Governance.GeneralPurposeGovernanceMessageStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "parseGeneralPurposeGovernanceMessage",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "performGovernance",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "MODULE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "encodeGeneralPurposeGovernanceMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parseGeneralPurposeGovernanceMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "performGovernance",
    data: BytesLike
  ): Result;

  events: {};
}

export interface Governance extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GovernanceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MODULE(overrides?: CallOverrides): Promise<[string]>;

    encodeGeneralPurposeGovernanceMessage(
      m: Governance.GeneralPurposeGovernanceMessageStruct,
      overrides?: CallOverrides
    ): Promise<[string] & { encoded: string }>;

    parseGeneralPurposeGovernanceMessage(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [Governance.GeneralPurposeGovernanceMessageStructOutput] & {
        message: Governance.GeneralPurposeGovernanceMessageStructOutput;
      }
    >;

    performGovernance(
      vaa: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  MODULE(overrides?: CallOverrides): Promise<string>;

  encodeGeneralPurposeGovernanceMessage(
    m: Governance.GeneralPurposeGovernanceMessageStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  parseGeneralPurposeGovernanceMessage(
    encoded: BytesLike,
    overrides?: CallOverrides
  ): Promise<Governance.GeneralPurposeGovernanceMessageStructOutput>;

  performGovernance(
    vaa: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    MODULE(overrides?: CallOverrides): Promise<string>;

    encodeGeneralPurposeGovernanceMessage(
      m: Governance.GeneralPurposeGovernanceMessageStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    parseGeneralPurposeGovernanceMessage(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<Governance.GeneralPurposeGovernanceMessageStructOutput>;

    performGovernance(vaa: BytesLike, overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    MODULE(overrides?: CallOverrides): Promise<BigNumber>;

    encodeGeneralPurposeGovernanceMessage(
      m: Governance.GeneralPurposeGovernanceMessageStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    parseGeneralPurposeGovernanceMessage(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    performGovernance(
      vaa: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MODULE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    encodeGeneralPurposeGovernanceMessage(
      m: Governance.GeneralPurposeGovernanceMessageStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    parseGeneralPurposeGovernanceMessage(
      encoded: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    performGovernance(
      vaa: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
