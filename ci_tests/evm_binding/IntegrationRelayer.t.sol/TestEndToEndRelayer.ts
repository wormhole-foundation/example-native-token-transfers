/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export type ChainInfoStruct = {
  chainId: BigNumberish;
  name: string;
  url: string;
  relayer: string;
  tokenBridge: string;
  wormhole: string;
  circleMessageTransmitter: string;
  circleTokenMessenger: string;
  USDC: string;
};

export type ChainInfoStructOutput = [
  number,
  string,
  string,
  string,
  string,
  string,
  string,
  string,
  string
] & {
  chainId: number;
  name: string;
  url: string;
  relayer: string;
  tokenBridge: string;
  wormhole: string;
  circleMessageTransmitter: string;
  circleTokenMessenger: string;
  USDC: string;
};

export type ActiveForkStruct = {
  chainId: BigNumberish;
  name: string;
  url: string;
  fork: BigNumberish;
  relayer: string;
  tokenBridge: string;
  wormhole: string;
  guardian: string;
  USDC: string;
  circleTokenMessenger: string;
  circleMessageTransmitter: string;
  circleAttester: string;
};

export type ActiveForkStructOutput = [
  number,
  string,
  string,
  BigNumber,
  string,
  string,
  string,
  string,
  string,
  string,
  string,
  string
] & {
  chainId: number;
  name: string;
  url: string;
  fork: BigNumber;
  relayer: string;
  tokenBridge: string;
  wormhole: string;
  guardian: string;
  USDC: string;
  circleTokenMessenger: string;
  circleMessageTransmitter: string;
  circleAttester: string;
};

export declare namespace TransceiverStructs {
  export type TransceiverInstructionStruct = {
    index: BigNumberish;
    payload: BytesLike;
  };

  export type TransceiverInstructionStructOutput = [number, string] & {
    index: number;
    payload: string;
  };
}

export declare namespace VmSafe {
  export type LogStruct = {
    topics: BytesLike[];
    data: BytesLike;
    emitter: string;
  };

  export type LogStructOutput = [string[], string, string] & {
    topics: string[];
    data: string;
    emitter: string;
  };
}

export declare namespace StdInvariant {
  export type FuzzSelectorStruct = { addr: string; selectors: BytesLike[] };

  export type FuzzSelectorStructOutput = [string, string[]] & {
    addr: string;
    selectors: string[];
  };

  export type FuzzInterfaceStruct = { addr: string; artifacts: string[] };

  export type FuzzInterfaceStructOutput = [string, string[]] & {
    addr: string;
    artifacts: string[];
  };
}

export interface TestEndToEndRelayerInterface extends utils.Interface {
  functions: {
    "IS_TEST()": FunctionFragment;
    "activeForks(uint16)": FunctionFragment;
    "activeForksList(uint256)": FunctionFragment;
    "buildTransceiverInstruction(bool)": FunctionFragment;
    "chainInfosMainnet(uint16)": FunctionFragment;
    "chainInfosTestnet(uint16)": FunctionFragment;
    "circleAttesterSource()": FunctionFragment;
    "circleAttesterTarget()": FunctionFragment;
    "createAndAttestToken(uint16)": FunctionFragment;
    "encodeTransceiverInstruction(bool)": FunctionFragment;
    "excludeArtifacts()": FunctionFragment;
    "excludeContracts()": FunctionFragment;
    "excludeSenders()": FunctionFragment;
    "failed()": FunctionFragment;
    "guardianSource()": FunctionFragment;
    "guardianTarget()": FunctionFragment;
    "logFork()": FunctionFragment;
    "mintUSDC(uint16,address,uint256)": FunctionFragment;
    "mockOffchainRelayer()": FunctionFragment;
    "performDelivery(bool)": FunctionFragment;
    "performDelivery()": FunctionFragment;
    "performDelivery((bytes32[],bytes,address)[],bool)": FunctionFragment;
    "performDelivery((bytes32[],bytes,address)[])": FunctionFragment;
    "relayerSource()": FunctionFragment;
    "relayerTarget()": FunctionFragment;
    "setActiveForks((uint16,string,string,address,address,address,address,address,address)[])": FunctionFragment;
    "setForkChains(bool,uint16,uint16)": FunctionFragment;
    "setMainnetForkChains(uint16,uint16)": FunctionFragment;
    "setTestnetForkChains(uint16,uint16)": FunctionFragment;
    "setUp()": FunctionFragment;
    "setUpFork((uint16,string,string,uint256,address,address,address,address,address,address,address,address))": FunctionFragment;
    "setUpGeneral()": FunctionFragment;
    "setUpOther((uint16,string,string,uint256,address,address,address,address,address,address,address,address))": FunctionFragment;
    "setUpSource()": FunctionFragment;
    "setUpTarget()": FunctionFragment;
    "sourceChain()": FunctionFragment;
    "sourceChainInfo()": FunctionFragment;
    "sourceFork()": FunctionFragment;
    "targetArtifactSelectors()": FunctionFragment;
    "targetArtifacts()": FunctionFragment;
    "targetChain()": FunctionFragment;
    "targetChainInfo()": FunctionFragment;
    "targetContracts()": FunctionFragment;
    "targetFork()": FunctionFragment;
    "targetInterfaces()": FunctionFragment;
    "targetSelectors()": FunctionFragment;
    "targetSenders()": FunctionFragment;
    "test_chainToChainBase()": FunctionFragment;
    "test_chainToChainReverts()": FunctionFragment;
    "tokenBridgeSource()": FunctionFragment;
    "tokenBridgeTarget()": FunctionFragment;
    "wormholeSource()": FunctionFragment;
    "wormholeTarget()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "IS_TEST"
      | "activeForks"
      | "activeForksList"
      | "buildTransceiverInstruction"
      | "chainInfosMainnet"
      | "chainInfosTestnet"
      | "circleAttesterSource"
      | "circleAttesterTarget"
      | "createAndAttestToken"
      | "encodeTransceiverInstruction"
      | "excludeArtifacts"
      | "excludeContracts"
      | "excludeSenders"
      | "failed"
      | "guardianSource"
      | "guardianTarget"
      | "logFork"
      | "mintUSDC"
      | "mockOffchainRelayer"
      | "performDelivery(bool)"
      | "performDelivery()"
      | "performDelivery((bytes32[],bytes,address)[],bool)"
      | "performDelivery((bytes32[],bytes,address)[])"
      | "relayerSource"
      | "relayerTarget"
      | "setActiveForks"
      | "setForkChains"
      | "setMainnetForkChains"
      | "setTestnetForkChains"
      | "setUp"
      | "setUpFork"
      | "setUpGeneral"
      | "setUpOther"
      | "setUpSource"
      | "setUpTarget"
      | "sourceChain"
      | "sourceChainInfo"
      | "sourceFork"
      | "targetArtifactSelectors"
      | "targetArtifacts"
      | "targetChain"
      | "targetChainInfo"
      | "targetContracts"
      | "targetFork"
      | "targetInterfaces"
      | "targetSelectors"
      | "targetSenders"
      | "test_chainToChainBase"
      | "test_chainToChainReverts"
      | "tokenBridgeSource"
      | "tokenBridgeTarget"
      | "wormholeSource"
      | "wormholeTarget"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "IS_TEST", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "activeForks",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "activeForksList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buildTransceiverInstruction",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "chainInfosMainnet",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "chainInfosTestnet",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "circleAttesterSource",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "circleAttesterTarget",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createAndAttestToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "encodeTransceiverInstruction",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "excludeArtifacts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "excludeContracts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "excludeSenders",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "failed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "guardianSource",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "guardianTarget",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "logFork", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mintUSDC",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mockOffchainRelayer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "performDelivery(bool)",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "performDelivery()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "performDelivery((bytes32[],bytes,address)[],bool)",
    values: [VmSafe.LogStruct[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "performDelivery((bytes32[],bytes,address)[])",
    values: [VmSafe.LogStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "relayerSource",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "relayerTarget",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setActiveForks",
    values: [ChainInfoStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setForkChains",
    values: [boolean, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMainnetForkChains",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTestnetForkChains",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setUp", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setUpFork",
    values: [ActiveForkStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setUpGeneral",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setUpOther",
    values: [ActiveForkStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setUpSource",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setUpTarget",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sourceChain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sourceChainInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sourceFork",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "targetArtifactSelectors",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "targetArtifacts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "targetChain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "targetChainInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "targetContracts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "targetFork",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "targetInterfaces",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "targetSelectors",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "targetSenders",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_chainToChainBase",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_chainToChainReverts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenBridgeSource",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenBridgeTarget",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "wormholeSource",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "wormholeTarget",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "IS_TEST", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "activeForks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activeForksList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buildTransceiverInstruction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "chainInfosMainnet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "chainInfosTestnet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "circleAttesterSource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "circleAttesterTarget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createAndAttestToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encodeTransceiverInstruction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludeArtifacts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludeContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludeSenders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "failed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "guardianSource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "guardianTarget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "logFork", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintUSDC", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mockOffchainRelayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "performDelivery(bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "performDelivery()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "performDelivery((bytes32[],bytes,address)[],bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "performDelivery((bytes32[],bytes,address)[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "relayerSource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "relayerTarget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setActiveForks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setForkChains",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMainnetForkChains",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTestnetForkChains",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setUp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setUpFork", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setUpGeneral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setUpOther", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setUpSource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUpTarget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sourceChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sourceChainInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sourceFork", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "targetArtifactSelectors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetArtifacts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetChainInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "targetFork", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "targetInterfaces",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetSelectors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetSenders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_chainToChainBase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_chainToChainReverts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenBridgeSource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenBridgeTarget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wormholeSource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wormholeTarget",
    data: BytesLike
  ): Result;

  events: {
    "InboundTransferQueued(bytes32)": EventFragment;
    "MessageAlreadyExecuted(bytes32,bytes32)": EventFragment;
    "MessageAttestedTo(bytes32,address,uint8)": EventFragment;
    "OutboundTransferQueued(uint64)": EventFragment;
    "OutboundTransferRateLimited(address,uint64,uint256,uint256)": EventFragment;
    "PeerUpdated(uint16,bytes32,uint8,bytes32,uint8)": EventFragment;
    "ThresholdChanged(uint8,uint8)": EventFragment;
    "TransceiverAdded(address,uint256,uint8)": EventFragment;
    "TransceiverRemoved(address,uint8)": EventFragment;
    "TransferRedeemed(bytes32)": EventFragment;
    "TransferSent(bytes32,uint256,uint256,uint16,uint64)": EventFragment;
    "log(string)": EventFragment;
    "log_address(address)": EventFragment;
    "log_array(uint256[])": EventFragment;
    "log_array(int256[])": EventFragment;
    "log_array(address[])": EventFragment;
    "log_bytes(bytes)": EventFragment;
    "log_bytes32(bytes32)": EventFragment;
    "log_int(int256)": EventFragment;
    "log_named_address(string,address)": EventFragment;
    "log_named_array(string,uint256[])": EventFragment;
    "log_named_array(string,int256[])": EventFragment;
    "log_named_array(string,address[])": EventFragment;
    "log_named_bytes(string,bytes)": EventFragment;
    "log_named_bytes32(string,bytes32)": EventFragment;
    "log_named_decimal_int(string,int256,uint256)": EventFragment;
    "log_named_decimal_uint(string,uint256,uint256)": EventFragment;
    "log_named_int(string,int256)": EventFragment;
    "log_named_string(string,string)": EventFragment;
    "log_named_uint(string,uint256)": EventFragment;
    "log_string(string)": EventFragment;
    "log_uint(uint256)": EventFragment;
    "logs(bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "InboundTransferQueued"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MessageAlreadyExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MessageAttestedTo"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OutboundTransferQueued"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "OutboundTransferRateLimited"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PeerUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ThresholdChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransceiverAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransceiverRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferRedeemed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferSent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_address"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_array(uint256[])"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_array(int256[])"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_array(address[])"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_bytes"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_bytes32"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_int"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_address"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "log_named_array(string,uint256[])"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "log_named_array(string,int256[])"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "log_named_array(string,address[])"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_bytes"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_bytes32"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_decimal_int"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_decimal_uint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_int"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_string"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_uint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_string"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_uint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "logs"): EventFragment;
}

export interface InboundTransferQueuedEventObject {
  digest: string;
}
export type InboundTransferQueuedEvent = TypedEvent<
  [string],
  InboundTransferQueuedEventObject
>;

export type InboundTransferQueuedEventFilter =
  TypedEventFilter<InboundTransferQueuedEvent>;

export interface MessageAlreadyExecutedEventObject {
  sourceNttManager: string;
  msgHash: string;
}
export type MessageAlreadyExecutedEvent = TypedEvent<
  [string, string],
  MessageAlreadyExecutedEventObject
>;

export type MessageAlreadyExecutedEventFilter =
  TypedEventFilter<MessageAlreadyExecutedEvent>;

export interface MessageAttestedToEventObject {
  digest: string;
  transceiver: string;
  index: number;
}
export type MessageAttestedToEvent = TypedEvent<
  [string, string, number],
  MessageAttestedToEventObject
>;

export type MessageAttestedToEventFilter =
  TypedEventFilter<MessageAttestedToEvent>;

export interface OutboundTransferQueuedEventObject {
  queueSequence: BigNumber;
}
export type OutboundTransferQueuedEvent = TypedEvent<
  [BigNumber],
  OutboundTransferQueuedEventObject
>;

export type OutboundTransferQueuedEventFilter =
  TypedEventFilter<OutboundTransferQueuedEvent>;

export interface OutboundTransferRateLimitedEventObject {
  sender: string;
  sequence: BigNumber;
  amount: BigNumber;
  currentCapacity: BigNumber;
}
export type OutboundTransferRateLimitedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  OutboundTransferRateLimitedEventObject
>;

export type OutboundTransferRateLimitedEventFilter =
  TypedEventFilter<OutboundTransferRateLimitedEvent>;

export interface PeerUpdatedEventObject {
  chainId_: number;
  oldPeerContract: string;
  oldPeerDecimals: number;
  peerContract: string;
  peerDecimals: number;
}
export type PeerUpdatedEvent = TypedEvent<
  [number, string, number, string, number],
  PeerUpdatedEventObject
>;

export type PeerUpdatedEventFilter = TypedEventFilter<PeerUpdatedEvent>;

export interface ThresholdChangedEventObject {
  oldThreshold: number;
  threshold: number;
}
export type ThresholdChangedEvent = TypedEvent<
  [number, number],
  ThresholdChangedEventObject
>;

export type ThresholdChangedEventFilter =
  TypedEventFilter<ThresholdChangedEvent>;

export interface TransceiverAddedEventObject {
  transceiver: string;
  transceiversNum: BigNumber;
  threshold: number;
}
export type TransceiverAddedEvent = TypedEvent<
  [string, BigNumber, number],
  TransceiverAddedEventObject
>;

export type TransceiverAddedEventFilter =
  TypedEventFilter<TransceiverAddedEvent>;

export interface TransceiverRemovedEventObject {
  transceiver: string;
  threshold: number;
}
export type TransceiverRemovedEvent = TypedEvent<
  [string, number],
  TransceiverRemovedEventObject
>;

export type TransceiverRemovedEventFilter =
  TypedEventFilter<TransceiverRemovedEvent>;

export interface TransferRedeemedEventObject {
  digest: string;
}
export type TransferRedeemedEvent = TypedEvent<
  [string],
  TransferRedeemedEventObject
>;

export type TransferRedeemedEventFilter =
  TypedEventFilter<TransferRedeemedEvent>;

export interface TransferSentEventObject {
  recipient: string;
  amount: BigNumber;
  fee: BigNumber;
  recipientChain: number;
  msgSequence: BigNumber;
}
export type TransferSentEvent = TypedEvent<
  [string, BigNumber, BigNumber, number, BigNumber],
  TransferSentEventObject
>;

export type TransferSentEventFilter = TypedEventFilter<TransferSentEvent>;

export interface logEventObject {
  arg0: string;
}
export type logEvent = TypedEvent<[string], logEventObject>;

export type logEventFilter = TypedEventFilter<logEvent>;

export interface log_addressEventObject {
  arg0: string;
}
export type log_addressEvent = TypedEvent<[string], log_addressEventObject>;

export type log_addressEventFilter = TypedEventFilter<log_addressEvent>;

export interface log_array_uint256_array_EventObject {
  val: BigNumber[];
}
export type log_array_uint256_array_Event = TypedEvent<
  [BigNumber[]],
  log_array_uint256_array_EventObject
>;

export type log_array_uint256_array_EventFilter =
  TypedEventFilter<log_array_uint256_array_Event>;

export interface log_array_int256_array_EventObject {
  val: BigNumber[];
}
export type log_array_int256_array_Event = TypedEvent<
  [BigNumber[]],
  log_array_int256_array_EventObject
>;

export type log_array_int256_array_EventFilter =
  TypedEventFilter<log_array_int256_array_Event>;

export interface log_array_address_array_EventObject {
  val: string[];
}
export type log_array_address_array_Event = TypedEvent<
  [string[]],
  log_array_address_array_EventObject
>;

export type log_array_address_array_EventFilter =
  TypedEventFilter<log_array_address_array_Event>;

export interface log_bytesEventObject {
  arg0: string;
}
export type log_bytesEvent = TypedEvent<[string], log_bytesEventObject>;

export type log_bytesEventFilter = TypedEventFilter<log_bytesEvent>;

export interface log_bytes32EventObject {
  arg0: string;
}
export type log_bytes32Event = TypedEvent<[string], log_bytes32EventObject>;

export type log_bytes32EventFilter = TypedEventFilter<log_bytes32Event>;

export interface log_intEventObject {
  arg0: BigNumber;
}
export type log_intEvent = TypedEvent<[BigNumber], log_intEventObject>;

export type log_intEventFilter = TypedEventFilter<log_intEvent>;

export interface log_named_addressEventObject {
  key: string;
  val: string;
}
export type log_named_addressEvent = TypedEvent<
  [string, string],
  log_named_addressEventObject
>;

export type log_named_addressEventFilter =
  TypedEventFilter<log_named_addressEvent>;

export interface log_named_array_string_uint256_array_EventObject {
  key: string;
  val: BigNumber[];
}
export type log_named_array_string_uint256_array_Event = TypedEvent<
  [string, BigNumber[]],
  log_named_array_string_uint256_array_EventObject
>;

export type log_named_array_string_uint256_array_EventFilter =
  TypedEventFilter<log_named_array_string_uint256_array_Event>;

export interface log_named_array_string_int256_array_EventObject {
  key: string;
  val: BigNumber[];
}
export type log_named_array_string_int256_array_Event = TypedEvent<
  [string, BigNumber[]],
  log_named_array_string_int256_array_EventObject
>;

export type log_named_array_string_int256_array_EventFilter =
  TypedEventFilter<log_named_array_string_int256_array_Event>;

export interface log_named_array_string_address_array_EventObject {
  key: string;
  val: string[];
}
export type log_named_array_string_address_array_Event = TypedEvent<
  [string, string[]],
  log_named_array_string_address_array_EventObject
>;

export type log_named_array_string_address_array_EventFilter =
  TypedEventFilter<log_named_array_string_address_array_Event>;

export interface log_named_bytesEventObject {
  key: string;
  val: string;
}
export type log_named_bytesEvent = TypedEvent<
  [string, string],
  log_named_bytesEventObject
>;

export type log_named_bytesEventFilter = TypedEventFilter<log_named_bytesEvent>;

export interface log_named_bytes32EventObject {
  key: string;
  val: string;
}
export type log_named_bytes32Event = TypedEvent<
  [string, string],
  log_named_bytes32EventObject
>;

export type log_named_bytes32EventFilter =
  TypedEventFilter<log_named_bytes32Event>;

export interface log_named_decimal_intEventObject {
  key: string;
  val: BigNumber;
  decimals: BigNumber;
}
export type log_named_decimal_intEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  log_named_decimal_intEventObject
>;

export type log_named_decimal_intEventFilter =
  TypedEventFilter<log_named_decimal_intEvent>;

export interface log_named_decimal_uintEventObject {
  key: string;
  val: BigNumber;
  decimals: BigNumber;
}
export type log_named_decimal_uintEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  log_named_decimal_uintEventObject
>;

export type log_named_decimal_uintEventFilter =
  TypedEventFilter<log_named_decimal_uintEvent>;

export interface log_named_intEventObject {
  key: string;
  val: BigNumber;
}
export type log_named_intEvent = TypedEvent<
  [string, BigNumber],
  log_named_intEventObject
>;

export type log_named_intEventFilter = TypedEventFilter<log_named_intEvent>;

export interface log_named_stringEventObject {
  key: string;
  val: string;
}
export type log_named_stringEvent = TypedEvent<
  [string, string],
  log_named_stringEventObject
>;

export type log_named_stringEventFilter =
  TypedEventFilter<log_named_stringEvent>;

export interface log_named_uintEventObject {
  key: string;
  val: BigNumber;
}
export type log_named_uintEvent = TypedEvent<
  [string, BigNumber],
  log_named_uintEventObject
>;

export type log_named_uintEventFilter = TypedEventFilter<log_named_uintEvent>;

export interface log_stringEventObject {
  arg0: string;
}
export type log_stringEvent = TypedEvent<[string], log_stringEventObject>;

export type log_stringEventFilter = TypedEventFilter<log_stringEvent>;

export interface log_uintEventObject {
  arg0: BigNumber;
}
export type log_uintEvent = TypedEvent<[BigNumber], log_uintEventObject>;

export type log_uintEventFilter = TypedEventFilter<log_uintEvent>;

export interface logsEventObject {
  arg0: string;
}
export type logsEvent = TypedEvent<[string], logsEventObject>;

export type logsEventFilter = TypedEventFilter<logsEvent>;

export interface TestEndToEndRelayer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TestEndToEndRelayerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    IS_TEST(overrides?: CallOverrides): Promise<[boolean]>;

    activeForks(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        string,
        string,
        BigNumber,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string
      ] & {
        chainId: number;
        name: string;
        url: string;
        fork: BigNumber;
        relayer: string;
        tokenBridge: string;
        wormhole: string;
        guardian: string;
        USDC: string;
        circleTokenMessenger: string;
        circleMessageTransmitter: string;
        circleAttester: string;
      }
    >;

    activeForksList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    buildTransceiverInstruction(
      relayer_off: boolean,
      overrides?: CallOverrides
    ): Promise<[TransceiverStructs.TransceiverInstructionStructOutput]>;

    chainInfosMainnet(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string
      ] & {
        chainId: number;
        name: string;
        url: string;
        relayer: string;
        tokenBridge: string;
        wormhole: string;
        circleMessageTransmitter: string;
        circleTokenMessenger: string;
        USDC: string;
      }
    >;

    chainInfosTestnet(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string
      ] & {
        chainId: number;
        name: string;
        url: string;
        relayer: string;
        tokenBridge: string;
        wormhole: string;
        circleMessageTransmitter: string;
        circleTokenMessenger: string;
        USDC: string;
      }
    >;

    circleAttesterSource(overrides?: CallOverrides): Promise<[string]>;

    circleAttesterTarget(overrides?: CallOverrides): Promise<[string]>;

    createAndAttestToken(
      homeChain: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    encodeTransceiverInstruction(
      relayer_off: boolean,
      overrides?: CallOverrides
    ): Promise<[string]>;

    excludeArtifacts(
      overrides?: CallOverrides
    ): Promise<[string[]] & { excludedArtifacts_: string[] }>;

    excludeContracts(
      overrides?: CallOverrides
    ): Promise<[string[]] & { excludedContracts_: string[] }>;

    excludeSenders(
      overrides?: CallOverrides
    ): Promise<[string[]] & { excludedSenders_: string[] }>;

    failed(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    guardianSource(overrides?: CallOverrides): Promise<[string]>;

    guardianTarget(overrides?: CallOverrides): Promise<[string]>;

    logFork(overrides?: CallOverrides): Promise<[void]>;

    mintUSDC(
      chain: BigNumberish,
      addr: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    mockOffchainRelayer(overrides?: CallOverrides): Promise<[string]>;

    "performDelivery(bool)"(
      debugLogging: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "performDelivery()"(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "performDelivery((bytes32[],bytes,address)[],bool)"(
      logs: VmSafe.LogStruct[],
      debugLogging: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "performDelivery((bytes32[],bytes,address)[])"(
      logs: VmSafe.LogStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    relayerSource(overrides?: CallOverrides): Promise<[string]>;

    relayerTarget(overrides?: CallOverrides): Promise<[string]>;

    setActiveForks(
      chainInfos: ChainInfoStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setForkChains(
      testnet: boolean,
      _sourceChain: BigNumberish,
      _targetChain: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setMainnetForkChains(
      _sourceChain: BigNumberish,
      _targetChain: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setTestnetForkChains(
      _sourceChain: BigNumberish,
      _targetChain: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setUp(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setUpFork(
      fork: ActiveForkStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setUpGeneral(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setUpOther(
      fork: ActiveForkStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setUpSource(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setUpTarget(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    sourceChain(overrides?: CallOverrides): Promise<[number]>;

    sourceChainInfo(
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string
      ] & {
        chainId: number;
        name: string;
        url: string;
        relayer: string;
        tokenBridge: string;
        wormhole: string;
        circleMessageTransmitter: string;
        circleTokenMessenger: string;
        USDC: string;
      }
    >;

    sourceFork(overrides?: CallOverrides): Promise<[BigNumber]>;

    targetArtifactSelectors(
      overrides?: CallOverrides
    ): Promise<
      [StdInvariant.FuzzSelectorStructOutput[]] & {
        targetedArtifactSelectors_: StdInvariant.FuzzSelectorStructOutput[];
      }
    >;

    targetArtifacts(
      overrides?: CallOverrides
    ): Promise<[string[]] & { targetedArtifacts_: string[] }>;

    targetChain(overrides?: CallOverrides): Promise<[number]>;

    targetChainInfo(
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string
      ] & {
        chainId: number;
        name: string;
        url: string;
        relayer: string;
        tokenBridge: string;
        wormhole: string;
        circleMessageTransmitter: string;
        circleTokenMessenger: string;
        USDC: string;
      }
    >;

    targetContracts(
      overrides?: CallOverrides
    ): Promise<[string[]] & { targetedContracts_: string[] }>;

    targetFork(overrides?: CallOverrides): Promise<[BigNumber]>;

    targetInterfaces(
      overrides?: CallOverrides
    ): Promise<
      [StdInvariant.FuzzInterfaceStructOutput[]] & {
        targetedInterfaces_: StdInvariant.FuzzInterfaceStructOutput[];
      }
    >;

    targetSelectors(
      overrides?: CallOverrides
    ): Promise<
      [StdInvariant.FuzzSelectorStructOutput[]] & {
        targetedSelectors_: StdInvariant.FuzzSelectorStructOutput[];
      }
    >;

    targetSenders(
      overrides?: CallOverrides
    ): Promise<[string[]] & { targetedSenders_: string[] }>;

    test_chainToChainBase(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    test_chainToChainReverts(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    tokenBridgeSource(overrides?: CallOverrides): Promise<[string]>;

    tokenBridgeTarget(overrides?: CallOverrides): Promise<[string]>;

    wormholeSource(overrides?: CallOverrides): Promise<[string]>;

    wormholeTarget(overrides?: CallOverrides): Promise<[string]>;
  };

  IS_TEST(overrides?: CallOverrides): Promise<boolean>;

  activeForks(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      number,
      string,
      string,
      BigNumber,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string
    ] & {
      chainId: number;
      name: string;
      url: string;
      fork: BigNumber;
      relayer: string;
      tokenBridge: string;
      wormhole: string;
      guardian: string;
      USDC: string;
      circleTokenMessenger: string;
      circleMessageTransmitter: string;
      circleAttester: string;
    }
  >;

  activeForksList(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  buildTransceiverInstruction(
    relayer_off: boolean,
    overrides?: CallOverrides
  ): Promise<TransceiverStructs.TransceiverInstructionStructOutput>;

  chainInfosMainnet(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, string, string, string, string, string, string, string, string] & {
      chainId: number;
      name: string;
      url: string;
      relayer: string;
      tokenBridge: string;
      wormhole: string;
      circleMessageTransmitter: string;
      circleTokenMessenger: string;
      USDC: string;
    }
  >;

  chainInfosTestnet(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, string, string, string, string, string, string, string, string] & {
      chainId: number;
      name: string;
      url: string;
      relayer: string;
      tokenBridge: string;
      wormhole: string;
      circleMessageTransmitter: string;
      circleTokenMessenger: string;
      USDC: string;
    }
  >;

  circleAttesterSource(overrides?: CallOverrides): Promise<string>;

  circleAttesterTarget(overrides?: CallOverrides): Promise<string>;

  createAndAttestToken(
    homeChain: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  encodeTransceiverInstruction(
    relayer_off: boolean,
    overrides?: CallOverrides
  ): Promise<string>;

  excludeArtifacts(overrides?: CallOverrides): Promise<string[]>;

  excludeContracts(overrides?: CallOverrides): Promise<string[]>;

  excludeSenders(overrides?: CallOverrides): Promise<string[]>;

  failed(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  guardianSource(overrides?: CallOverrides): Promise<string>;

  guardianTarget(overrides?: CallOverrides): Promise<string>;

  logFork(overrides?: CallOverrides): Promise<void>;

  mintUSDC(
    chain: BigNumberish,
    addr: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  mockOffchainRelayer(overrides?: CallOverrides): Promise<string>;

  "performDelivery(bool)"(
    debugLogging: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "performDelivery()"(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "performDelivery((bytes32[],bytes,address)[],bool)"(
    logs: VmSafe.LogStruct[],
    debugLogging: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "performDelivery((bytes32[],bytes,address)[])"(
    logs: VmSafe.LogStruct[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  relayerSource(overrides?: CallOverrides): Promise<string>;

  relayerTarget(overrides?: CallOverrides): Promise<string>;

  setActiveForks(
    chainInfos: ChainInfoStruct[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setForkChains(
    testnet: boolean,
    _sourceChain: BigNumberish,
    _targetChain: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setMainnetForkChains(
    _sourceChain: BigNumberish,
    _targetChain: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setTestnetForkChains(
    _sourceChain: BigNumberish,
    _targetChain: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setUp(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setUpFork(
    fork: ActiveForkStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setUpGeneral(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setUpOther(
    fork: ActiveForkStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setUpSource(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setUpTarget(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  sourceChain(overrides?: CallOverrides): Promise<number>;

  sourceChainInfo(
    overrides?: CallOverrides
  ): Promise<
    [number, string, string, string, string, string, string, string, string] & {
      chainId: number;
      name: string;
      url: string;
      relayer: string;
      tokenBridge: string;
      wormhole: string;
      circleMessageTransmitter: string;
      circleTokenMessenger: string;
      USDC: string;
    }
  >;

  sourceFork(overrides?: CallOverrides): Promise<BigNumber>;

  targetArtifactSelectors(
    overrides?: CallOverrides
  ): Promise<StdInvariant.FuzzSelectorStructOutput[]>;

  targetArtifacts(overrides?: CallOverrides): Promise<string[]>;

  targetChain(overrides?: CallOverrides): Promise<number>;

  targetChainInfo(
    overrides?: CallOverrides
  ): Promise<
    [number, string, string, string, string, string, string, string, string] & {
      chainId: number;
      name: string;
      url: string;
      relayer: string;
      tokenBridge: string;
      wormhole: string;
      circleMessageTransmitter: string;
      circleTokenMessenger: string;
      USDC: string;
    }
  >;

  targetContracts(overrides?: CallOverrides): Promise<string[]>;

  targetFork(overrides?: CallOverrides): Promise<BigNumber>;

  targetInterfaces(
    overrides?: CallOverrides
  ): Promise<StdInvariant.FuzzInterfaceStructOutput[]>;

  targetSelectors(
    overrides?: CallOverrides
  ): Promise<StdInvariant.FuzzSelectorStructOutput[]>;

  targetSenders(overrides?: CallOverrides): Promise<string[]>;

  test_chainToChainBase(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  test_chainToChainReverts(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  tokenBridgeSource(overrides?: CallOverrides): Promise<string>;

  tokenBridgeTarget(overrides?: CallOverrides): Promise<string>;

  wormholeSource(overrides?: CallOverrides): Promise<string>;

  wormholeTarget(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    IS_TEST(overrides?: CallOverrides): Promise<boolean>;

    activeForks(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        string,
        string,
        BigNumber,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string
      ] & {
        chainId: number;
        name: string;
        url: string;
        fork: BigNumber;
        relayer: string;
        tokenBridge: string;
        wormhole: string;
        guardian: string;
        USDC: string;
        circleTokenMessenger: string;
        circleMessageTransmitter: string;
        circleAttester: string;
      }
    >;

    activeForksList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    buildTransceiverInstruction(
      relayer_off: boolean,
      overrides?: CallOverrides
    ): Promise<TransceiverStructs.TransceiverInstructionStructOutput>;

    chainInfosMainnet(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string
      ] & {
        chainId: number;
        name: string;
        url: string;
        relayer: string;
        tokenBridge: string;
        wormhole: string;
        circleMessageTransmitter: string;
        circleTokenMessenger: string;
        USDC: string;
      }
    >;

    chainInfosTestnet(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string
      ] & {
        chainId: number;
        name: string;
        url: string;
        relayer: string;
        tokenBridge: string;
        wormhole: string;
        circleMessageTransmitter: string;
        circleTokenMessenger: string;
        USDC: string;
      }
    >;

    circleAttesterSource(overrides?: CallOverrides): Promise<string>;

    circleAttesterTarget(overrides?: CallOverrides): Promise<string>;

    createAndAttestToken(
      homeChain: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    encodeTransceiverInstruction(
      relayer_off: boolean,
      overrides?: CallOverrides
    ): Promise<string>;

    excludeArtifacts(overrides?: CallOverrides): Promise<string[]>;

    excludeContracts(overrides?: CallOverrides): Promise<string[]>;

    excludeSenders(overrides?: CallOverrides): Promise<string[]>;

    failed(overrides?: CallOverrides): Promise<boolean>;

    guardianSource(overrides?: CallOverrides): Promise<string>;

    guardianTarget(overrides?: CallOverrides): Promise<string>;

    logFork(overrides?: CallOverrides): Promise<void>;

    mintUSDC(
      chain: BigNumberish,
      addr: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    mockOffchainRelayer(overrides?: CallOverrides): Promise<string>;

    "performDelivery(bool)"(
      debugLogging: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "performDelivery()"(overrides?: CallOverrides): Promise<void>;

    "performDelivery((bytes32[],bytes,address)[],bool)"(
      logs: VmSafe.LogStruct[],
      debugLogging: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "performDelivery((bytes32[],bytes,address)[])"(
      logs: VmSafe.LogStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    relayerSource(overrides?: CallOverrides): Promise<string>;

    relayerTarget(overrides?: CallOverrides): Promise<string>;

    setActiveForks(
      chainInfos: ChainInfoStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    setForkChains(
      testnet: boolean,
      _sourceChain: BigNumberish,
      _targetChain: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMainnetForkChains(
      _sourceChain: BigNumberish,
      _targetChain: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTestnetForkChains(
      _sourceChain: BigNumberish,
      _targetChain: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setUp(overrides?: CallOverrides): Promise<void>;

    setUpFork(fork: ActiveForkStruct, overrides?: CallOverrides): Promise<void>;

    setUpGeneral(overrides?: CallOverrides): Promise<void>;

    setUpOther(
      fork: ActiveForkStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setUpSource(overrides?: CallOverrides): Promise<void>;

    setUpTarget(overrides?: CallOverrides): Promise<void>;

    sourceChain(overrides?: CallOverrides): Promise<number>;

    sourceChainInfo(
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string
      ] & {
        chainId: number;
        name: string;
        url: string;
        relayer: string;
        tokenBridge: string;
        wormhole: string;
        circleMessageTransmitter: string;
        circleTokenMessenger: string;
        USDC: string;
      }
    >;

    sourceFork(overrides?: CallOverrides): Promise<BigNumber>;

    targetArtifactSelectors(
      overrides?: CallOverrides
    ): Promise<StdInvariant.FuzzSelectorStructOutput[]>;

    targetArtifacts(overrides?: CallOverrides): Promise<string[]>;

    targetChain(overrides?: CallOverrides): Promise<number>;

    targetChainInfo(
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string
      ] & {
        chainId: number;
        name: string;
        url: string;
        relayer: string;
        tokenBridge: string;
        wormhole: string;
        circleMessageTransmitter: string;
        circleTokenMessenger: string;
        USDC: string;
      }
    >;

    targetContracts(overrides?: CallOverrides): Promise<string[]>;

    targetFork(overrides?: CallOverrides): Promise<BigNumber>;

    targetInterfaces(
      overrides?: CallOverrides
    ): Promise<StdInvariant.FuzzInterfaceStructOutput[]>;

    targetSelectors(
      overrides?: CallOverrides
    ): Promise<StdInvariant.FuzzSelectorStructOutput[]>;

    targetSenders(overrides?: CallOverrides): Promise<string[]>;

    test_chainToChainBase(overrides?: CallOverrides): Promise<void>;

    test_chainToChainReverts(overrides?: CallOverrides): Promise<void>;

    tokenBridgeSource(overrides?: CallOverrides): Promise<string>;

    tokenBridgeTarget(overrides?: CallOverrides): Promise<string>;

    wormholeSource(overrides?: CallOverrides): Promise<string>;

    wormholeTarget(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "InboundTransferQueued(bytes32)"(
      digest?: null
    ): InboundTransferQueuedEventFilter;
    InboundTransferQueued(digest?: null): InboundTransferQueuedEventFilter;

    "MessageAlreadyExecuted(bytes32,bytes32)"(
      sourceNttManager?: BytesLike | null,
      msgHash?: BytesLike | null
    ): MessageAlreadyExecutedEventFilter;
    MessageAlreadyExecuted(
      sourceNttManager?: BytesLike | null,
      msgHash?: BytesLike | null
    ): MessageAlreadyExecutedEventFilter;

    "MessageAttestedTo(bytes32,address,uint8)"(
      digest?: null,
      transceiver?: null,
      index?: null
    ): MessageAttestedToEventFilter;
    MessageAttestedTo(
      digest?: null,
      transceiver?: null,
      index?: null
    ): MessageAttestedToEventFilter;

    "OutboundTransferQueued(uint64)"(
      queueSequence?: null
    ): OutboundTransferQueuedEventFilter;
    OutboundTransferQueued(
      queueSequence?: null
    ): OutboundTransferQueuedEventFilter;

    "OutboundTransferRateLimited(address,uint64,uint256,uint256)"(
      sender?: string | null,
      sequence?: null,
      amount?: null,
      currentCapacity?: null
    ): OutboundTransferRateLimitedEventFilter;
    OutboundTransferRateLimited(
      sender?: string | null,
      sequence?: null,
      amount?: null,
      currentCapacity?: null
    ): OutboundTransferRateLimitedEventFilter;

    "PeerUpdated(uint16,bytes32,uint8,bytes32,uint8)"(
      chainId_?: BigNumberish | null,
      oldPeerContract?: null,
      oldPeerDecimals?: null,
      peerContract?: null,
      peerDecimals?: null
    ): PeerUpdatedEventFilter;
    PeerUpdated(
      chainId_?: BigNumberish | null,
      oldPeerContract?: null,
      oldPeerDecimals?: null,
      peerContract?: null,
      peerDecimals?: null
    ): PeerUpdatedEventFilter;

    "ThresholdChanged(uint8,uint8)"(
      oldThreshold?: null,
      threshold?: null
    ): ThresholdChangedEventFilter;
    ThresholdChanged(
      oldThreshold?: null,
      threshold?: null
    ): ThresholdChangedEventFilter;

    "TransceiverAdded(address,uint256,uint8)"(
      transceiver?: null,
      transceiversNum?: null,
      threshold?: null
    ): TransceiverAddedEventFilter;
    TransceiverAdded(
      transceiver?: null,
      transceiversNum?: null,
      threshold?: null
    ): TransceiverAddedEventFilter;

    "TransceiverRemoved(address,uint8)"(
      transceiver?: null,
      threshold?: null
    ): TransceiverRemovedEventFilter;
    TransceiverRemoved(
      transceiver?: null,
      threshold?: null
    ): TransceiverRemovedEventFilter;

    "TransferRedeemed(bytes32)"(
      digest?: BytesLike | null
    ): TransferRedeemedEventFilter;
    TransferRedeemed(digest?: BytesLike | null): TransferRedeemedEventFilter;

    "TransferSent(bytes32,uint256,uint256,uint16,uint64)"(
      recipient?: null,
      amount?: null,
      fee?: null,
      recipientChain?: null,
      msgSequence?: null
    ): TransferSentEventFilter;
    TransferSent(
      recipient?: null,
      amount?: null,
      fee?: null,
      recipientChain?: null,
      msgSequence?: null
    ): TransferSentEventFilter;

    "log(string)"(arg0?: null): logEventFilter;
    log(arg0?: null): logEventFilter;

    "log_address(address)"(arg0?: null): log_addressEventFilter;
    log_address(arg0?: null): log_addressEventFilter;

    "log_array(uint256[])"(val?: null): log_array_uint256_array_EventFilter;
    "log_array(int256[])"(val?: null): log_array_int256_array_EventFilter;
    "log_array(address[])"(val?: null): log_array_address_array_EventFilter;

    "log_bytes(bytes)"(arg0?: null): log_bytesEventFilter;
    log_bytes(arg0?: null): log_bytesEventFilter;

    "log_bytes32(bytes32)"(arg0?: null): log_bytes32EventFilter;
    log_bytes32(arg0?: null): log_bytes32EventFilter;

    "log_int(int256)"(arg0?: null): log_intEventFilter;
    log_int(arg0?: null): log_intEventFilter;

    "log_named_address(string,address)"(
      key?: null,
      val?: null
    ): log_named_addressEventFilter;
    log_named_address(key?: null, val?: null): log_named_addressEventFilter;

    "log_named_array(string,uint256[])"(
      key?: null,
      val?: null
    ): log_named_array_string_uint256_array_EventFilter;
    "log_named_array(string,int256[])"(
      key?: null,
      val?: null
    ): log_named_array_string_int256_array_EventFilter;
    "log_named_array(string,address[])"(
      key?: null,
      val?: null
    ): log_named_array_string_address_array_EventFilter;

    "log_named_bytes(string,bytes)"(
      key?: null,
      val?: null
    ): log_named_bytesEventFilter;
    log_named_bytes(key?: null, val?: null): log_named_bytesEventFilter;

    "log_named_bytes32(string,bytes32)"(
      key?: null,
      val?: null
    ): log_named_bytes32EventFilter;
    log_named_bytes32(key?: null, val?: null): log_named_bytes32EventFilter;

    "log_named_decimal_int(string,int256,uint256)"(
      key?: null,
      val?: null,
      decimals?: null
    ): log_named_decimal_intEventFilter;
    log_named_decimal_int(
      key?: null,
      val?: null,
      decimals?: null
    ): log_named_decimal_intEventFilter;

    "log_named_decimal_uint(string,uint256,uint256)"(
      key?: null,
      val?: null,
      decimals?: null
    ): log_named_decimal_uintEventFilter;
    log_named_decimal_uint(
      key?: null,
      val?: null,
      decimals?: null
    ): log_named_decimal_uintEventFilter;

    "log_named_int(string,int256)"(
      key?: null,
      val?: null
    ): log_named_intEventFilter;
    log_named_int(key?: null, val?: null): log_named_intEventFilter;

    "log_named_string(string,string)"(
      key?: null,
      val?: null
    ): log_named_stringEventFilter;
    log_named_string(key?: null, val?: null): log_named_stringEventFilter;

    "log_named_uint(string,uint256)"(
      key?: null,
      val?: null
    ): log_named_uintEventFilter;
    log_named_uint(key?: null, val?: null): log_named_uintEventFilter;

    "log_string(string)"(arg0?: null): log_stringEventFilter;
    log_string(arg0?: null): log_stringEventFilter;

    "log_uint(uint256)"(arg0?: null): log_uintEventFilter;
    log_uint(arg0?: null): log_uintEventFilter;

    "logs(bytes)"(arg0?: null): logsEventFilter;
    logs(arg0?: null): logsEventFilter;
  };

  estimateGas: {
    IS_TEST(overrides?: CallOverrides): Promise<BigNumber>;

    activeForks(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    activeForksList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buildTransceiverInstruction(
      relayer_off: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    chainInfosMainnet(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    chainInfosTestnet(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    circleAttesterSource(overrides?: CallOverrides): Promise<BigNumber>;

    circleAttesterTarget(overrides?: CallOverrides): Promise<BigNumber>;

    createAndAttestToken(
      homeChain: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    encodeTransceiverInstruction(
      relayer_off: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    excludeArtifacts(overrides?: CallOverrides): Promise<BigNumber>;

    excludeContracts(overrides?: CallOverrides): Promise<BigNumber>;

    excludeSenders(overrides?: CallOverrides): Promise<BigNumber>;

    failed(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    guardianSource(overrides?: CallOverrides): Promise<BigNumber>;

    guardianTarget(overrides?: CallOverrides): Promise<BigNumber>;

    logFork(overrides?: CallOverrides): Promise<BigNumber>;

    mintUSDC(
      chain: BigNumberish,
      addr: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    mockOffchainRelayer(overrides?: CallOverrides): Promise<BigNumber>;

    "performDelivery(bool)"(
      debugLogging: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "performDelivery()"(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "performDelivery((bytes32[],bytes,address)[],bool)"(
      logs: VmSafe.LogStruct[],
      debugLogging: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "performDelivery((bytes32[],bytes,address)[])"(
      logs: VmSafe.LogStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    relayerSource(overrides?: CallOverrides): Promise<BigNumber>;

    relayerTarget(overrides?: CallOverrides): Promise<BigNumber>;

    setActiveForks(
      chainInfos: ChainInfoStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setForkChains(
      testnet: boolean,
      _sourceChain: BigNumberish,
      _targetChain: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setMainnetForkChains(
      _sourceChain: BigNumberish,
      _targetChain: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setTestnetForkChains(
      _sourceChain: BigNumberish,
      _targetChain: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setUp(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    setUpFork(
      fork: ActiveForkStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setUpGeneral(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    setUpOther(
      fork: ActiveForkStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setUpSource(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    setUpTarget(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    sourceChain(overrides?: CallOverrides): Promise<BigNumber>;

    sourceChainInfo(overrides?: CallOverrides): Promise<BigNumber>;

    sourceFork(overrides?: CallOverrides): Promise<BigNumber>;

    targetArtifactSelectors(overrides?: CallOverrides): Promise<BigNumber>;

    targetArtifacts(overrides?: CallOverrides): Promise<BigNumber>;

    targetChain(overrides?: CallOverrides): Promise<BigNumber>;

    targetChainInfo(overrides?: CallOverrides): Promise<BigNumber>;

    targetContracts(overrides?: CallOverrides): Promise<BigNumber>;

    targetFork(overrides?: CallOverrides): Promise<BigNumber>;

    targetInterfaces(overrides?: CallOverrides): Promise<BigNumber>;

    targetSelectors(overrides?: CallOverrides): Promise<BigNumber>;

    targetSenders(overrides?: CallOverrides): Promise<BigNumber>;

    test_chainToChainBase(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    test_chainToChainReverts(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    tokenBridgeSource(overrides?: CallOverrides): Promise<BigNumber>;

    tokenBridgeTarget(overrides?: CallOverrides): Promise<BigNumber>;

    wormholeSource(overrides?: CallOverrides): Promise<BigNumber>;

    wormholeTarget(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    IS_TEST(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    activeForks(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    activeForksList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buildTransceiverInstruction(
      relayer_off: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    chainInfosMainnet(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    chainInfosTestnet(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    circleAttesterSource(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    circleAttesterTarget(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createAndAttestToken(
      homeChain: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    encodeTransceiverInstruction(
      relayer_off: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    excludeArtifacts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    excludeContracts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    excludeSenders(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    failed(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    guardianSource(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    guardianTarget(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    logFork(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintUSDC(
      chain: BigNumberish,
      addr: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    mockOffchainRelayer(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "performDelivery(bool)"(
      debugLogging: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "performDelivery()"(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "performDelivery((bytes32[],bytes,address)[],bool)"(
      logs: VmSafe.LogStruct[],
      debugLogging: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "performDelivery((bytes32[],bytes,address)[])"(
      logs: VmSafe.LogStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    relayerSource(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    relayerTarget(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setActiveForks(
      chainInfos: ChainInfoStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setForkChains(
      testnet: boolean,
      _sourceChain: BigNumberish,
      _targetChain: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setMainnetForkChains(
      _sourceChain: BigNumberish,
      _targetChain: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setTestnetForkChains(
      _sourceChain: BigNumberish,
      _targetChain: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setUp(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setUpFork(
      fork: ActiveForkStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setUpGeneral(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setUpOther(
      fork: ActiveForkStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setUpSource(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setUpTarget(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    sourceChain(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sourceChainInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sourceFork(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    targetArtifactSelectors(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    targetArtifacts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    targetChain(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    targetChainInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    targetContracts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    targetFork(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    targetInterfaces(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    targetSelectors(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    targetSenders(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    test_chainToChainBase(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    test_chainToChainReverts(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    tokenBridgeSource(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenBridgeTarget(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wormholeSource(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wormholeTarget(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
