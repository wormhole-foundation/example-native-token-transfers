/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace IWormhole {
  export type GuardianSetStruct = {
    keys: string[];
    expirationTime: BigNumberish;
  };

  export type GuardianSetStructOutput = [string[], number] & {
    keys: string[];
    expirationTime: number;
  };

  export type SignatureStruct = {
    r: BytesLike;
    s: BytesLike;
    v: BigNumberish;
    guardianIndex: BigNumberish;
  };

  export type SignatureStructOutput = [string, string, number, number] & {
    r: string;
    s: string;
    v: number;
    guardianIndex: number;
  };

  export type VMStruct = {
    version: BigNumberish;
    timestamp: BigNumberish;
    nonce: BigNumberish;
    emitterChainId: BigNumberish;
    emitterAddress: BytesLike;
    sequence: BigNumberish;
    consistencyLevel: BigNumberish;
    payload: BytesLike;
    guardianSetIndex: BigNumberish;
    signatures: IWormhole.SignatureStruct[];
    hash: BytesLike;
  };

  export type VMStructOutput = [
    number,
    number,
    number,
    number,
    string,
    BigNumber,
    number,
    string,
    number,
    IWormhole.SignatureStructOutput[],
    string
  ] & {
    version: number;
    timestamp: number;
    nonce: number;
    emitterChainId: number;
    emitterAddress: string;
    sequence: BigNumber;
    consistencyLevel: number;
    payload: string;
    guardianSetIndex: number;
    signatures: IWormhole.SignatureStructOutput[];
    hash: string;
  };

  export type ContractUpgradeStruct = {
    module: BytesLike;
    action: BigNumberish;
    chain: BigNumberish;
    newContract: string;
  };

  export type ContractUpgradeStructOutput = [string, number, number, string] & {
    module: string;
    action: number;
    chain: number;
    newContract: string;
  };

  export type GuardianSetUpgradeStruct = {
    module: BytesLike;
    action: BigNumberish;
    chain: BigNumberish;
    newGuardianSet: IWormhole.GuardianSetStruct;
    newGuardianSetIndex: BigNumberish;
  };

  export type GuardianSetUpgradeStructOutput = [
    string,
    number,
    number,
    IWormhole.GuardianSetStructOutput,
    number
  ] & {
    module: string;
    action: number;
    chain: number;
    newGuardianSet: IWormhole.GuardianSetStructOutput;
    newGuardianSetIndex: number;
  };

  export type RecoverChainIdStruct = {
    module: BytesLike;
    action: BigNumberish;
    evmChainId: BigNumberish;
    newChainId: BigNumberish;
  };

  export type RecoverChainIdStructOutput = [
    string,
    number,
    BigNumber,
    number
  ] & {
    module: string;
    action: number;
    evmChainId: BigNumber;
    newChainId: number;
  };

  export type SetMessageFeeStruct = {
    module: BytesLike;
    action: BigNumberish;
    chain: BigNumberish;
    messageFee: BigNumberish;
  };

  export type SetMessageFeeStructOutput = [
    string,
    number,
    number,
    BigNumber
  ] & { module: string; action: number; chain: number; messageFee: BigNumber };

  export type TransferFeesStruct = {
    module: BytesLike;
    action: BigNumberish;
    chain: BigNumberish;
    amount: BigNumberish;
    recipient: BytesLike;
  };

  export type TransferFeesStructOutput = [
    string,
    number,
    number,
    BigNumber,
    string
  ] & {
    module: string;
    action: number;
    chain: number;
    amount: BigNumber;
    recipient: string;
  };
}

export interface IWormholeInterface extends utils.Interface {
  functions: {
    "chainId()": FunctionFragment;
    "evmChainId()": FunctionFragment;
    "getCurrentGuardianSetIndex()": FunctionFragment;
    "getGuardianSet(uint32)": FunctionFragment;
    "getGuardianSetExpiry()": FunctionFragment;
    "governanceActionIsConsumed(bytes32)": FunctionFragment;
    "governanceChainId()": FunctionFragment;
    "governanceContract()": FunctionFragment;
    "initialize()": FunctionFragment;
    "isFork()": FunctionFragment;
    "isInitialized(address)": FunctionFragment;
    "messageFee()": FunctionFragment;
    "nextSequence(address)": FunctionFragment;
    "parseAndVerifyVM(bytes)": FunctionFragment;
    "parseContractUpgrade(bytes)": FunctionFragment;
    "parseGuardianSetUpgrade(bytes)": FunctionFragment;
    "parseRecoverChainId(bytes)": FunctionFragment;
    "parseSetMessageFee(bytes)": FunctionFragment;
    "parseTransferFees(bytes)": FunctionFragment;
    "parseVM(bytes)": FunctionFragment;
    "publishMessage(uint32,bytes,uint8)": FunctionFragment;
    "quorum(uint256)": FunctionFragment;
    "submitContractUpgrade(bytes)": FunctionFragment;
    "submitNewGuardianSet(bytes)": FunctionFragment;
    "submitRecoverChainId(bytes)": FunctionFragment;
    "submitSetMessageFee(bytes)": FunctionFragment;
    "submitTransferFees(bytes)": FunctionFragment;
    "verifySignatures(bytes32,(bytes32,bytes32,uint8,uint8)[],(address[],uint32))": FunctionFragment;
    "verifyVM((uint8,uint32,uint32,uint16,bytes32,uint64,uint8,bytes,uint32,(bytes32,bytes32,uint8,uint8)[],bytes32))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "chainId"
      | "evmChainId"
      | "getCurrentGuardianSetIndex"
      | "getGuardianSet"
      | "getGuardianSetExpiry"
      | "governanceActionIsConsumed"
      | "governanceChainId"
      | "governanceContract"
      | "initialize"
      | "isFork"
      | "isInitialized"
      | "messageFee"
      | "nextSequence"
      | "parseAndVerifyVM"
      | "parseContractUpgrade"
      | "parseGuardianSetUpgrade"
      | "parseRecoverChainId"
      | "parseSetMessageFee"
      | "parseTransferFees"
      | "parseVM"
      | "publishMessage"
      | "quorum"
      | "submitContractUpgrade"
      | "submitNewGuardianSet"
      | "submitRecoverChainId"
      | "submitSetMessageFee"
      | "submitTransferFees"
      | "verifySignatures"
      | "verifyVM"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "chainId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "evmChainId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentGuardianSetIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGuardianSet",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getGuardianSetExpiry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "governanceActionIsConsumed",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "governanceChainId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "governanceContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isFork", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "messageFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextSequence",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "parseAndVerifyVM",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "parseContractUpgrade",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "parseGuardianSetUpgrade",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "parseRecoverChainId",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "parseSetMessageFee",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "parseTransferFees",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "parseVM", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "publishMessage",
    values: [BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "quorum",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submitContractUpgrade",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "submitNewGuardianSet",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "submitRecoverChainId",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "submitSetMessageFee",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "submitTransferFees",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifySignatures",
    values: [
      BytesLike,
      IWormhole.SignatureStruct[],
      IWormhole.GuardianSetStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyVM",
    values: [IWormhole.VMStruct]
  ): string;

  decodeFunctionResult(functionFragment: "chainId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "evmChainId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentGuardianSetIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGuardianSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGuardianSetExpiry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "governanceActionIsConsumed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "governanceChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "governanceContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isFork", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "messageFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextSequence",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parseAndVerifyVM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parseContractUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parseGuardianSetUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parseRecoverChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parseSetMessageFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parseTransferFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "parseVM", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "publishMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "quorum", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitContractUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitNewGuardianSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitRecoverChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitSetMessageFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitTransferFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifySignatures",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verifyVM", data: BytesLike): Result;

  events: {
    "ContractUpgraded(address,address)": EventFragment;
    "GuardianSetAdded(uint32)": EventFragment;
    "LogMessagePublished(address,uint64,uint32,bytes,uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ContractUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GuardianSetAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogMessagePublished"): EventFragment;
}

export interface ContractUpgradedEventObject {
  oldContract: string;
  newContract: string;
}
export type ContractUpgradedEvent = TypedEvent<
  [string, string],
  ContractUpgradedEventObject
>;

export type ContractUpgradedEventFilter =
  TypedEventFilter<ContractUpgradedEvent>;

export interface GuardianSetAddedEventObject {
  index: number;
}
export type GuardianSetAddedEvent = TypedEvent<
  [number],
  GuardianSetAddedEventObject
>;

export type GuardianSetAddedEventFilter =
  TypedEventFilter<GuardianSetAddedEvent>;

export interface LogMessagePublishedEventObject {
  sender: string;
  sequence: BigNumber;
  nonce: number;
  payload: string;
  consistencyLevel: number;
}
export type LogMessagePublishedEvent = TypedEvent<
  [string, BigNumber, number, string, number],
  LogMessagePublishedEventObject
>;

export type LogMessagePublishedEventFilter =
  TypedEventFilter<LogMessagePublishedEvent>;

export interface IWormhole extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IWormholeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    chainId(overrides?: CallOverrides): Promise<[number]>;

    evmChainId(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCurrentGuardianSetIndex(overrides?: CallOverrides): Promise<[number]>;

    getGuardianSet(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[IWormhole.GuardianSetStructOutput]>;

    getGuardianSetExpiry(overrides?: CallOverrides): Promise<[number]>;

    governanceActionIsConsumed(
      hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    governanceChainId(overrides?: CallOverrides): Promise<[number]>;

    governanceContract(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    isFork(overrides?: CallOverrides): Promise<[boolean]>;

    isInitialized(impl: string, overrides?: CallOverrides): Promise<[boolean]>;

    messageFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    nextSequence(
      emitter: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    parseAndVerifyVM(
      encodedVM: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [IWormhole.VMStructOutput, boolean, string] & {
        vm: IWormhole.VMStructOutput;
        valid: boolean;
        reason: string;
      }
    >;

    parseContractUpgrade(
      encodedUpgrade: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [IWormhole.ContractUpgradeStructOutput] & {
        cu: IWormhole.ContractUpgradeStructOutput;
      }
    >;

    parseGuardianSetUpgrade(
      encodedUpgrade: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [IWormhole.GuardianSetUpgradeStructOutput] & {
        gsu: IWormhole.GuardianSetUpgradeStructOutput;
      }
    >;

    parseRecoverChainId(
      encodedRecoverChainId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [IWormhole.RecoverChainIdStructOutput] & {
        rci: IWormhole.RecoverChainIdStructOutput;
      }
    >;

    parseSetMessageFee(
      encodedSetMessageFee: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [IWormhole.SetMessageFeeStructOutput] & {
        smf: IWormhole.SetMessageFeeStructOutput;
      }
    >;

    parseTransferFees(
      encodedTransferFees: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [IWormhole.TransferFeesStructOutput] & {
        tf: IWormhole.TransferFeesStructOutput;
      }
    >;

    parseVM(
      encodedVM: BytesLike,
      overrides?: CallOverrides
    ): Promise<[IWormhole.VMStructOutput] & { vm: IWormhole.VMStructOutput }>;

    publishMessage(
      nonce: BigNumberish,
      payload: BytesLike,
      consistencyLevel: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    quorum(
      numGuardians: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { numSignaturesRequiredForQuorum: BigNumber }>;

    submitContractUpgrade(
      _vm: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    submitNewGuardianSet(
      _vm: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    submitRecoverChainId(
      _vm: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    submitSetMessageFee(
      _vm: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    submitTransferFees(
      _vm: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    verifySignatures(
      hash: BytesLike,
      signatures: IWormhole.SignatureStruct[],
      guardianSet: IWormhole.GuardianSetStruct,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { valid: boolean; reason: string }>;

    verifyVM(
      vm: IWormhole.VMStruct,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { valid: boolean; reason: string }>;
  };

  chainId(overrides?: CallOverrides): Promise<number>;

  evmChainId(overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentGuardianSetIndex(overrides?: CallOverrides): Promise<number>;

  getGuardianSet(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<IWormhole.GuardianSetStructOutput>;

  getGuardianSetExpiry(overrides?: CallOverrides): Promise<number>;

  governanceActionIsConsumed(
    hash: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  governanceChainId(overrides?: CallOverrides): Promise<number>;

  governanceContract(overrides?: CallOverrides): Promise<string>;

  initialize(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  isFork(overrides?: CallOverrides): Promise<boolean>;

  isInitialized(impl: string, overrides?: CallOverrides): Promise<boolean>;

  messageFee(overrides?: CallOverrides): Promise<BigNumber>;

  nextSequence(emitter: string, overrides?: CallOverrides): Promise<BigNumber>;

  parseAndVerifyVM(
    encodedVM: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [IWormhole.VMStructOutput, boolean, string] & {
      vm: IWormhole.VMStructOutput;
      valid: boolean;
      reason: string;
    }
  >;

  parseContractUpgrade(
    encodedUpgrade: BytesLike,
    overrides?: CallOverrides
  ): Promise<IWormhole.ContractUpgradeStructOutput>;

  parseGuardianSetUpgrade(
    encodedUpgrade: BytesLike,
    overrides?: CallOverrides
  ): Promise<IWormhole.GuardianSetUpgradeStructOutput>;

  parseRecoverChainId(
    encodedRecoverChainId: BytesLike,
    overrides?: CallOverrides
  ): Promise<IWormhole.RecoverChainIdStructOutput>;

  parseSetMessageFee(
    encodedSetMessageFee: BytesLike,
    overrides?: CallOverrides
  ): Promise<IWormhole.SetMessageFeeStructOutput>;

  parseTransferFees(
    encodedTransferFees: BytesLike,
    overrides?: CallOverrides
  ): Promise<IWormhole.TransferFeesStructOutput>;

  parseVM(
    encodedVM: BytesLike,
    overrides?: CallOverrides
  ): Promise<IWormhole.VMStructOutput>;

  publishMessage(
    nonce: BigNumberish,
    payload: BytesLike,
    consistencyLevel: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  quorum(
    numGuardians: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  submitContractUpgrade(
    _vm: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  submitNewGuardianSet(
    _vm: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  submitRecoverChainId(
    _vm: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  submitSetMessageFee(
    _vm: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  submitTransferFees(
    _vm: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  verifySignatures(
    hash: BytesLike,
    signatures: IWormhole.SignatureStruct[],
    guardianSet: IWormhole.GuardianSetStruct,
    overrides?: CallOverrides
  ): Promise<[boolean, string] & { valid: boolean; reason: string }>;

  verifyVM(
    vm: IWormhole.VMStruct,
    overrides?: CallOverrides
  ): Promise<[boolean, string] & { valid: boolean; reason: string }>;

  callStatic: {
    chainId(overrides?: CallOverrides): Promise<number>;

    evmChainId(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentGuardianSetIndex(overrides?: CallOverrides): Promise<number>;

    getGuardianSet(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<IWormhole.GuardianSetStructOutput>;

    getGuardianSetExpiry(overrides?: CallOverrides): Promise<number>;

    governanceActionIsConsumed(
      hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    governanceChainId(overrides?: CallOverrides): Promise<number>;

    governanceContract(overrides?: CallOverrides): Promise<string>;

    initialize(overrides?: CallOverrides): Promise<void>;

    isFork(overrides?: CallOverrides): Promise<boolean>;

    isInitialized(impl: string, overrides?: CallOverrides): Promise<boolean>;

    messageFee(overrides?: CallOverrides): Promise<BigNumber>;

    nextSequence(
      emitter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    parseAndVerifyVM(
      encodedVM: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [IWormhole.VMStructOutput, boolean, string] & {
        vm: IWormhole.VMStructOutput;
        valid: boolean;
        reason: string;
      }
    >;

    parseContractUpgrade(
      encodedUpgrade: BytesLike,
      overrides?: CallOverrides
    ): Promise<IWormhole.ContractUpgradeStructOutput>;

    parseGuardianSetUpgrade(
      encodedUpgrade: BytesLike,
      overrides?: CallOverrides
    ): Promise<IWormhole.GuardianSetUpgradeStructOutput>;

    parseRecoverChainId(
      encodedRecoverChainId: BytesLike,
      overrides?: CallOverrides
    ): Promise<IWormhole.RecoverChainIdStructOutput>;

    parseSetMessageFee(
      encodedSetMessageFee: BytesLike,
      overrides?: CallOverrides
    ): Promise<IWormhole.SetMessageFeeStructOutput>;

    parseTransferFees(
      encodedTransferFees: BytesLike,
      overrides?: CallOverrides
    ): Promise<IWormhole.TransferFeesStructOutput>;

    parseVM(
      encodedVM: BytesLike,
      overrides?: CallOverrides
    ): Promise<IWormhole.VMStructOutput>;

    publishMessage(
      nonce: BigNumberish,
      payload: BytesLike,
      consistencyLevel: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quorum(
      numGuardians: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    submitContractUpgrade(
      _vm: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    submitNewGuardianSet(
      _vm: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    submitRecoverChainId(
      _vm: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    submitSetMessageFee(
      _vm: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    submitTransferFees(
      _vm: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    verifySignatures(
      hash: BytesLike,
      signatures: IWormhole.SignatureStruct[],
      guardianSet: IWormhole.GuardianSetStruct,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { valid: boolean; reason: string }>;

    verifyVM(
      vm: IWormhole.VMStruct,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { valid: boolean; reason: string }>;
  };

  filters: {
    "ContractUpgraded(address,address)"(
      oldContract?: string | null,
      newContract?: string | null
    ): ContractUpgradedEventFilter;
    ContractUpgraded(
      oldContract?: string | null,
      newContract?: string | null
    ): ContractUpgradedEventFilter;

    "GuardianSetAdded(uint32)"(
      index?: BigNumberish | null
    ): GuardianSetAddedEventFilter;
    GuardianSetAdded(index?: BigNumberish | null): GuardianSetAddedEventFilter;

    "LogMessagePublished(address,uint64,uint32,bytes,uint8)"(
      sender?: string | null,
      sequence?: null,
      nonce?: null,
      payload?: null,
      consistencyLevel?: null
    ): LogMessagePublishedEventFilter;
    LogMessagePublished(
      sender?: string | null,
      sequence?: null,
      nonce?: null,
      payload?: null,
      consistencyLevel?: null
    ): LogMessagePublishedEventFilter;
  };

  estimateGas: {
    chainId(overrides?: CallOverrides): Promise<BigNumber>;

    evmChainId(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentGuardianSetIndex(overrides?: CallOverrides): Promise<BigNumber>;

    getGuardianSet(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGuardianSetExpiry(overrides?: CallOverrides): Promise<BigNumber>;

    governanceActionIsConsumed(
      hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governanceChainId(overrides?: CallOverrides): Promise<BigNumber>;

    governanceContract(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    isFork(overrides?: CallOverrides): Promise<BigNumber>;

    isInitialized(impl: string, overrides?: CallOverrides): Promise<BigNumber>;

    messageFee(overrides?: CallOverrides): Promise<BigNumber>;

    nextSequence(
      emitter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    parseAndVerifyVM(
      encodedVM: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    parseContractUpgrade(
      encodedUpgrade: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    parseGuardianSetUpgrade(
      encodedUpgrade: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    parseRecoverChainId(
      encodedRecoverChainId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    parseSetMessageFee(
      encodedSetMessageFee: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    parseTransferFees(
      encodedTransferFees: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    parseVM(
      encodedVM: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    publishMessage(
      nonce: BigNumberish,
      payload: BytesLike,
      consistencyLevel: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    quorum(
      numGuardians: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    submitContractUpgrade(
      _vm: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    submitNewGuardianSet(
      _vm: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    submitRecoverChainId(
      _vm: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    submitSetMessageFee(
      _vm: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    submitTransferFees(
      _vm: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    verifySignatures(
      hash: BytesLike,
      signatures: IWormhole.SignatureStruct[],
      guardianSet: IWormhole.GuardianSetStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyVM(
      vm: IWormhole.VMStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    chainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    evmChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentGuardianSetIndex(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGuardianSet(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGuardianSetExpiry(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governanceActionIsConsumed(
      hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governanceChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governanceContract(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    isFork(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isInitialized(
      impl: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    messageFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextSequence(
      emitter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    parseAndVerifyVM(
      encodedVM: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    parseContractUpgrade(
      encodedUpgrade: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    parseGuardianSetUpgrade(
      encodedUpgrade: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    parseRecoverChainId(
      encodedRecoverChainId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    parseSetMessageFee(
      encodedSetMessageFee: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    parseTransferFees(
      encodedTransferFees: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    parseVM(
      encodedVM: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    publishMessage(
      nonce: BigNumberish,
      payload: BytesLike,
      consistencyLevel: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    quorum(
      numGuardians: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    submitContractUpgrade(
      _vm: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    submitNewGuardianSet(
      _vm: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    submitRecoverChainId(
      _vm: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    submitSetMessageFee(
      _vm: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    submitTransferFees(
      _vm: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    verifySignatures(
      hash: BytesLike,
      signatures: IWormhole.SignatureStruct[],
      guardianSet: IWormhole.GuardianSetStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyVM(
      vm: IWormhole.VMStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
