/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export declare namespace VmSafe {
  export type LogStruct = {
    topics: BytesLike[];
    data: BytesLike;
    emitter: string;
  };

  export type LogStructOutput = [string[], string, string] & {
    topics: string[];
    data: string;
    emitter: string;
  };
}

export declare namespace CCTPMessageLib {
  export type CCTPMessageStruct = { message: BytesLike; signature: BytesLike };

  export type CCTPMessageStructOutput = [string, string] & {
    message: string;
    signature: string;
  };
}

export interface CircleMessageTransmitterSimulatorInterface
  extends utils.Interface {
  functions: {
    "fetchMessageTransmitterLogsFromLogs((bytes32[],bytes,address)[])": FunctionFragment;
    "fetchSignedMessageFromLog((bytes32[],bytes,address))": FunctionFragment;
    "messageTransmitter()": FunctionFragment;
    "signMessage(bytes)": FunctionFragment;
    "valid()": FunctionFragment;
    "vm()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "fetchMessageTransmitterLogsFromLogs"
      | "fetchSignedMessageFromLog"
      | "messageTransmitter"
      | "signMessage"
      | "valid"
      | "vm"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "fetchMessageTransmitterLogsFromLogs",
    values: [VmSafe.LogStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "fetchSignedMessageFromLog",
    values: [VmSafe.LogStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "messageTransmitter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "signMessage",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "valid", values?: undefined): string;
  encodeFunctionData(functionFragment: "vm", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "fetchMessageTransmitterLogsFromLogs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchSignedMessageFromLog",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "messageTransmitter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "valid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vm", data: BytesLike): Result;

  events: {};
}

export interface CircleMessageTransmitterSimulator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CircleMessageTransmitterSimulatorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    fetchMessageTransmitterLogsFromLogs(
      logs: VmSafe.LogStruct[],
      overrides?: CallOverrides
    ): Promise<[VmSafe.LogStructOutput[]]>;

    fetchSignedMessageFromLog(
      log: VmSafe.LogStruct,
      overrides?: CallOverrides
    ): Promise<[CCTPMessageLib.CCTPMessageStructOutput]>;

    messageTransmitter(overrides?: CallOverrides): Promise<[string]>;

    signMessage(
      message: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { signedMessage: string }>;

    valid(overrides?: CallOverrides): Promise<[boolean]>;

    vm(overrides?: CallOverrides): Promise<[string]>;
  };

  fetchMessageTransmitterLogsFromLogs(
    logs: VmSafe.LogStruct[],
    overrides?: CallOverrides
  ): Promise<VmSafe.LogStructOutput[]>;

  fetchSignedMessageFromLog(
    log: VmSafe.LogStruct,
    overrides?: CallOverrides
  ): Promise<CCTPMessageLib.CCTPMessageStructOutput>;

  messageTransmitter(overrides?: CallOverrides): Promise<string>;

  signMessage(message: BytesLike, overrides?: CallOverrides): Promise<string>;

  valid(overrides?: CallOverrides): Promise<boolean>;

  vm(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    fetchMessageTransmitterLogsFromLogs(
      logs: VmSafe.LogStruct[],
      overrides?: CallOverrides
    ): Promise<VmSafe.LogStructOutput[]>;

    fetchSignedMessageFromLog(
      log: VmSafe.LogStruct,
      overrides?: CallOverrides
    ): Promise<CCTPMessageLib.CCTPMessageStructOutput>;

    messageTransmitter(overrides?: CallOverrides): Promise<string>;

    signMessage(message: BytesLike, overrides?: CallOverrides): Promise<string>;

    valid(overrides?: CallOverrides): Promise<boolean>;

    vm(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    fetchMessageTransmitterLogsFromLogs(
      logs: VmSafe.LogStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fetchSignedMessageFromLog(
      log: VmSafe.LogStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    messageTransmitter(overrides?: CallOverrides): Promise<BigNumber>;

    signMessage(
      message: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    valid(overrides?: CallOverrides): Promise<BigNumber>;

    vm(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    fetchMessageTransmitterLogsFromLogs(
      logs: VmSafe.LogStruct[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fetchSignedMessageFromLog(
      log: VmSafe.LogStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    messageTransmitter(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    signMessage(
      message: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    valid(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vm(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
