/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace VmSafe {
  export type LogStruct = {
    topics: BytesLike[];
    data: BytesLike;
    emitter: string;
  };

  export type LogStructOutput = [string[], string, string] & {
    topics: string[];
    data: string;
    emitter: string;
  };
}

export interface MockOffchainRelayerInterface extends utils.Interface {
  functions: {
    "getPastDeliveryVAA(uint16,uint64)": FunctionFragment;
    "getPastEncodedSignedVaas(uint16,uint64)": FunctionFragment;
    "registerChain(uint16,address,uint256)": FunctionFragment;
    "relay((bytes32[],bytes,address)[])": FunctionFragment;
    "relay((bytes32[],bytes,address)[],bool)": FunctionFragment;
    "relay(bytes)": FunctionFragment;
    "relay((bytes32[],bytes,address)[],bytes,bool)": FunctionFragment;
    "relay()": FunctionFragment;
    "vm()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getPastDeliveryVAA"
      | "getPastEncodedSignedVaas"
      | "registerChain"
      | "relay((bytes32[],bytes,address)[])"
      | "relay((bytes32[],bytes,address)[],bool)"
      | "relay(bytes)"
      | "relay((bytes32[],bytes,address)[],bytes,bool)"
      | "relay()"
      | "vm"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getPastDeliveryVAA",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPastEncodedSignedVaas",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerChain",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "relay((bytes32[],bytes,address)[])",
    values: [VmSafe.LogStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "relay((bytes32[],bytes,address)[],bool)",
    values: [VmSafe.LogStruct[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "relay(bytes)",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "relay((bytes32[],bytes,address)[],bytes,bool)",
    values: [VmSafe.LogStruct[], BytesLike, boolean]
  ): string;
  encodeFunctionData(functionFragment: "relay()", values?: undefined): string;
  encodeFunctionData(functionFragment: "vm", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "getPastDeliveryVAA",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPastEncodedSignedVaas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "relay((bytes32[],bytes,address)[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "relay((bytes32[],bytes,address)[],bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "relay(bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "relay((bytes32[],bytes,address)[],bytes,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "relay()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vm", data: BytesLike): Result;

  events: {};
}

export interface MockOffchainRelayer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MockOffchainRelayerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getPastDeliveryVAA(
      chainId: BigNumberish,
      deliveryVAASequence: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getPastEncodedSignedVaas(
      chainId: BigNumberish,
      deliveryVAASequence: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    registerChain(
      chainId: BigNumberish,
      wormholeRelayerContractAddress: string,
      fork: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "relay((bytes32[],bytes,address)[])"(
      logs: VmSafe.LogStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "relay((bytes32[],bytes,address)[],bool)"(
      logs: VmSafe.LogStruct[],
      debugLogging: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "relay(bytes)"(
      deliveryOverrides: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "relay((bytes32[],bytes,address)[],bytes,bool)"(
      logs: VmSafe.LogStruct[],
      deliveryOverrides: BytesLike,
      debugLogging: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "relay()"(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    vm(overrides?: CallOverrides): Promise<[string]>;
  };

  getPastDeliveryVAA(
    chainId: BigNumberish,
    deliveryVAASequence: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getPastEncodedSignedVaas(
    chainId: BigNumberish,
    deliveryVAASequence: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  registerChain(
    chainId: BigNumberish,
    wormholeRelayerContractAddress: string,
    fork: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "relay((bytes32[],bytes,address)[])"(
    logs: VmSafe.LogStruct[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "relay((bytes32[],bytes,address)[],bool)"(
    logs: VmSafe.LogStruct[],
    debugLogging: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "relay(bytes)"(
    deliveryOverrides: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "relay((bytes32[],bytes,address)[],bytes,bool)"(
    logs: VmSafe.LogStruct[],
    deliveryOverrides: BytesLike,
    debugLogging: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "relay()"(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  vm(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    getPastDeliveryVAA(
      chainId: BigNumberish,
      deliveryVAASequence: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getPastEncodedSignedVaas(
      chainId: BigNumberish,
      deliveryVAASequence: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    registerChain(
      chainId: BigNumberish,
      wormholeRelayerContractAddress: string,
      fork: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "relay((bytes32[],bytes,address)[])"(
      logs: VmSafe.LogStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    "relay((bytes32[],bytes,address)[],bool)"(
      logs: VmSafe.LogStruct[],
      debugLogging: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "relay(bytes)"(
      deliveryOverrides: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "relay((bytes32[],bytes,address)[],bytes,bool)"(
      logs: VmSafe.LogStruct[],
      deliveryOverrides: BytesLike,
      debugLogging: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "relay()"(overrides?: CallOverrides): Promise<void>;

    vm(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    getPastDeliveryVAA(
      chainId: BigNumberish,
      deliveryVAASequence: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPastEncodedSignedVaas(
      chainId: BigNumberish,
      deliveryVAASequence: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerChain(
      chainId: BigNumberish,
      wormholeRelayerContractAddress: string,
      fork: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "relay((bytes32[],bytes,address)[])"(
      logs: VmSafe.LogStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "relay((bytes32[],bytes,address)[],bool)"(
      logs: VmSafe.LogStruct[],
      debugLogging: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "relay(bytes)"(
      deliveryOverrides: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "relay((bytes32[],bytes,address)[],bytes,bool)"(
      logs: VmSafe.LogStruct[],
      deliveryOverrides: BytesLike,
      debugLogging: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "relay()"(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    vm(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getPastDeliveryVAA(
      chainId: BigNumberish,
      deliveryVAASequence: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPastEncodedSignedVaas(
      chainId: BigNumberish,
      deliveryVAASequence: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerChain(
      chainId: BigNumberish,
      wormholeRelayerContractAddress: string,
      fork: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "relay((bytes32[],bytes,address)[])"(
      logs: VmSafe.LogStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "relay((bytes32[],bytes,address)[],bool)"(
      logs: VmSafe.LogStruct[],
      debugLogging: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "relay(bytes)"(
      deliveryOverrides: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "relay((bytes32[],bytes,address)[],bytes,bool)"(
      logs: VmSafe.LogStruct[],
      deliveryOverrides: BytesLike,
      debugLogging: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "relay()"(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    vm(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
