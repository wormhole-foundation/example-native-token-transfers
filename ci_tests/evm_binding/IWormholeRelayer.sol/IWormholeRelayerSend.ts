/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export type VaaKeyStruct = {
  chainId: BigNumberish;
  emitterAddress: BytesLike;
  sequence: BigNumberish;
};

export type VaaKeyStructOutput = [number, string, BigNumber] & {
  chainId: number;
  emitterAddress: string;
  sequence: BigNumber;
};

export type MessageKeyStruct = { keyType: BigNumberish; encodedKey: BytesLike };

export type MessageKeyStructOutput = [number, string] & {
  keyType: number;
  encodedKey: string;
};

export interface IWormholeRelayerSendInterface extends utils.Interface {
  functions: {
    "deliveryAttempted(bytes32)": FunctionFragment;
    "deliveryFailureBlock(bytes32)": FunctionFragment;
    "deliverySuccessBlock(bytes32)": FunctionFragment;
    "getDefaultDeliveryProvider()": FunctionFragment;
    "getRegisteredWormholeRelayerContract(uint16)": FunctionFragment;
    "quoteDeliveryPrice(uint16,uint256,bytes,address)": FunctionFragment;
    "quoteEVMDeliveryPrice(uint16,uint256,uint256,address)": FunctionFragment;
    "quoteEVMDeliveryPrice(uint16,uint256,uint256)": FunctionFragment;
    "quoteNativeForChain(uint16,uint256,address)": FunctionFragment;
    "resend((uint16,bytes32,uint64),uint16,uint256,bytes,address)": FunctionFragment;
    "resendToEvm((uint16,bytes32,uint64),uint16,uint256,uint256,address)": FunctionFragment;
    "send(uint16,bytes32,bytes,uint256,uint256,bytes,uint16,bytes32,address,(uint16,bytes32,uint64)[],uint8)": FunctionFragment;
    "send(uint16,bytes32,bytes,uint256,uint256,bytes,uint16,bytes32,address,(uint8,bytes)[],uint8)": FunctionFragment;
    "sendPayloadToEvm(uint16,address,bytes,uint256,uint256,uint16,address)": FunctionFragment;
    "sendPayloadToEvm(uint16,address,bytes,uint256,uint256)": FunctionFragment;
    "sendToEvm(uint16,address,bytes,uint256,uint256,uint256,uint16,address,address,(uint16,bytes32,uint64)[],uint8)": FunctionFragment;
    "sendToEvm(uint16,address,bytes,uint256,uint256,uint256,uint16,address,address,(uint8,bytes)[],uint8)": FunctionFragment;
    "sendVaasToEvm(uint16,address,bytes,uint256,uint256,(uint16,bytes32,uint64)[])": FunctionFragment;
    "sendVaasToEvm(uint16,address,bytes,uint256,uint256,(uint16,bytes32,uint64)[],uint16,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "deliveryAttempted"
      | "deliveryFailureBlock"
      | "deliverySuccessBlock"
      | "getDefaultDeliveryProvider"
      | "getRegisteredWormholeRelayerContract"
      | "quoteDeliveryPrice"
      | "quoteEVMDeliveryPrice(uint16,uint256,uint256,address)"
      | "quoteEVMDeliveryPrice(uint16,uint256,uint256)"
      | "quoteNativeForChain"
      | "resend"
      | "resendToEvm"
      | "send(uint16,bytes32,bytes,uint256,uint256,bytes,uint16,bytes32,address,(uint16,bytes32,uint64)[],uint8)"
      | "send(uint16,bytes32,bytes,uint256,uint256,bytes,uint16,bytes32,address,(uint8,bytes)[],uint8)"
      | "sendPayloadToEvm(uint16,address,bytes,uint256,uint256,uint16,address)"
      | "sendPayloadToEvm(uint16,address,bytes,uint256,uint256)"
      | "sendToEvm(uint16,address,bytes,uint256,uint256,uint256,uint16,address,address,(uint16,bytes32,uint64)[],uint8)"
      | "sendToEvm(uint16,address,bytes,uint256,uint256,uint256,uint16,address,address,(uint8,bytes)[],uint8)"
      | "sendVaasToEvm(uint16,address,bytes,uint256,uint256,(uint16,bytes32,uint64)[])"
      | "sendVaasToEvm(uint16,address,bytes,uint256,uint256,(uint16,bytes32,uint64)[],uint16,address)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "deliveryAttempted",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deliveryFailureBlock",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deliverySuccessBlock",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDefaultDeliveryProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRegisteredWormholeRelayerContract",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteDeliveryPrice",
    values: [BigNumberish, BigNumberish, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteEVMDeliveryPrice(uint16,uint256,uint256,address)",
    values: [BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteEVMDeliveryPrice(uint16,uint256,uint256)",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteNativeForChain",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "resend",
    values: [VaaKeyStruct, BigNumberish, BigNumberish, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "resendToEvm",
    values: [VaaKeyStruct, BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "send(uint16,bytes32,bytes,uint256,uint256,bytes,uint16,bytes32,address,(uint16,bytes32,uint64)[],uint8)",
    values: [
      BigNumberish,
      BytesLike,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BytesLike,
      string,
      VaaKeyStruct[],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "send(uint16,bytes32,bytes,uint256,uint256,bytes,uint16,bytes32,address,(uint8,bytes)[],uint8)",
    values: [
      BigNumberish,
      BytesLike,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BytesLike,
      string,
      MessageKeyStruct[],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "sendPayloadToEvm(uint16,address,bytes,uint256,uint256,uint16,address)",
    values: [
      BigNumberish,
      string,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "sendPayloadToEvm(uint16,address,bytes,uint256,uint256)",
    values: [BigNumberish, string, BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sendToEvm(uint16,address,bytes,uint256,uint256,uint256,uint16,address,address,(uint16,bytes32,uint64)[],uint8)",
    values: [
      BigNumberish,
      string,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      string,
      VaaKeyStruct[],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "sendToEvm(uint16,address,bytes,uint256,uint256,uint256,uint16,address,address,(uint8,bytes)[],uint8)",
    values: [
      BigNumberish,
      string,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      string,
      MessageKeyStruct[],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "sendVaasToEvm(uint16,address,bytes,uint256,uint256,(uint16,bytes32,uint64)[])",
    values: [
      BigNumberish,
      string,
      BytesLike,
      BigNumberish,
      BigNumberish,
      VaaKeyStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "sendVaasToEvm(uint16,address,bytes,uint256,uint256,(uint16,bytes32,uint64)[],uint16,address)",
    values: [
      BigNumberish,
      string,
      BytesLike,
      BigNumberish,
      BigNumberish,
      VaaKeyStruct[],
      BigNumberish,
      string
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "deliveryAttempted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deliveryFailureBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deliverySuccessBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDefaultDeliveryProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRegisteredWormholeRelayerContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quoteDeliveryPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quoteEVMDeliveryPrice(uint16,uint256,uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quoteEVMDeliveryPrice(uint16,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quoteNativeForChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "resend", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "resendToEvm",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "send(uint16,bytes32,bytes,uint256,uint256,bytes,uint16,bytes32,address,(uint16,bytes32,uint64)[],uint8)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "send(uint16,bytes32,bytes,uint256,uint256,bytes,uint16,bytes32,address,(uint8,bytes)[],uint8)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendPayloadToEvm(uint16,address,bytes,uint256,uint256,uint16,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendPayloadToEvm(uint16,address,bytes,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendToEvm(uint16,address,bytes,uint256,uint256,uint256,uint16,address,address,(uint16,bytes32,uint64)[],uint8)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendToEvm(uint16,address,bytes,uint256,uint256,uint256,uint16,address,address,(uint8,bytes)[],uint8)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendVaasToEvm(uint16,address,bytes,uint256,uint256,(uint16,bytes32,uint64)[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendVaasToEvm(uint16,address,bytes,uint256,uint256,(uint16,bytes32,uint64)[],uint16,address)",
    data: BytesLike
  ): Result;

  events: {
    "SendEvent(uint64,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SendEvent"): EventFragment;
}

export interface SendEventEventObject {
  sequence: BigNumber;
  deliveryQuote: BigNumber;
  paymentForExtraReceiverValue: BigNumber;
}
export type SendEventEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  SendEventEventObject
>;

export type SendEventEventFilter = TypedEventFilter<SendEventEvent>;

export interface IWormholeRelayerSend extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IWormholeRelayerSendInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    deliveryAttempted(
      deliveryHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean] & { attempted: boolean }>;

    deliveryFailureBlock(
      deliveryHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { blockNumber: BigNumber }>;

    deliverySuccessBlock(
      deliveryHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { blockNumber: BigNumber }>;

    getDefaultDeliveryProvider(
      overrides?: CallOverrides
    ): Promise<[string] & { deliveryProvider: string }>;

    getRegisteredWormholeRelayerContract(
      chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    quoteDeliveryPrice(
      targetChain: BigNumberish,
      receiverValue: BigNumberish,
      encodedExecutionParameters: BytesLike,
      deliveryProviderAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string] & {
        nativePriceQuote: BigNumber;
        encodedExecutionInfo: string;
      }
    >;

    "quoteEVMDeliveryPrice(uint16,uint256,uint256,address)"(
      targetChain: BigNumberish,
      receiverValue: BigNumberish,
      gasLimit: BigNumberish,
      deliveryProviderAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        nativePriceQuote: BigNumber;
        targetChainRefundPerGasUnused: BigNumber;
      }
    >;

    "quoteEVMDeliveryPrice(uint16,uint256,uint256)"(
      targetChain: BigNumberish,
      receiverValue: BigNumberish,
      gasLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        nativePriceQuote: BigNumber;
        targetChainRefundPerGasUnused: BigNumber;
      }
    >;

    quoteNativeForChain(
      targetChain: BigNumberish,
      currentChainAmount: BigNumberish,
      deliveryProviderAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { targetChainAmount: BigNumber }>;

    resend(
      deliveryVaaKey: VaaKeyStruct,
      targetChain: BigNumberish,
      newReceiverValue: BigNumberish,
      newEncodedExecutionParameters: BytesLike,
      newDeliveryProviderAddress: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    resendToEvm(
      deliveryVaaKey: VaaKeyStruct,
      targetChain: BigNumberish,
      newReceiverValue: BigNumberish,
      newGasLimit: BigNumberish,
      newDeliveryProviderAddress: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    "send(uint16,bytes32,bytes,uint256,uint256,bytes,uint16,bytes32,address,(uint16,bytes32,uint64)[],uint8)"(
      targetChain: BigNumberish,
      targetAddress: BytesLike,
      payload: BytesLike,
      receiverValue: BigNumberish,
      paymentForExtraReceiverValue: BigNumberish,
      encodedExecutionParameters: BytesLike,
      refundChain: BigNumberish,
      refundAddress: BytesLike,
      deliveryProviderAddress: string,
      vaaKeys: VaaKeyStruct[],
      consistencyLevel: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    "send(uint16,bytes32,bytes,uint256,uint256,bytes,uint16,bytes32,address,(uint8,bytes)[],uint8)"(
      targetChain: BigNumberish,
      targetAddress: BytesLike,
      payload: BytesLike,
      receiverValue: BigNumberish,
      paymentForExtraReceiverValue: BigNumberish,
      encodedExecutionParameters: BytesLike,
      refundChain: BigNumberish,
      refundAddress: BytesLike,
      deliveryProviderAddress: string,
      messageKeys: MessageKeyStruct[],
      consistencyLevel: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    "sendPayloadToEvm(uint16,address,bytes,uint256,uint256,uint16,address)"(
      targetChain: BigNumberish,
      targetAddress: string,
      payload: BytesLike,
      receiverValue: BigNumberish,
      gasLimit: BigNumberish,
      refundChain: BigNumberish,
      refundAddress: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    "sendPayloadToEvm(uint16,address,bytes,uint256,uint256)"(
      targetChain: BigNumberish,
      targetAddress: string,
      payload: BytesLike,
      receiverValue: BigNumberish,
      gasLimit: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    "sendToEvm(uint16,address,bytes,uint256,uint256,uint256,uint16,address,address,(uint16,bytes32,uint64)[],uint8)"(
      targetChain: BigNumberish,
      targetAddress: string,
      payload: BytesLike,
      receiverValue: BigNumberish,
      paymentForExtraReceiverValue: BigNumberish,
      gasLimit: BigNumberish,
      refundChain: BigNumberish,
      refundAddress: string,
      deliveryProviderAddress: string,
      vaaKeys: VaaKeyStruct[],
      consistencyLevel: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    "sendToEvm(uint16,address,bytes,uint256,uint256,uint256,uint16,address,address,(uint8,bytes)[],uint8)"(
      targetChain: BigNumberish,
      targetAddress: string,
      payload: BytesLike,
      receiverValue: BigNumberish,
      paymentForExtraReceiverValue: BigNumberish,
      gasLimit: BigNumberish,
      refundChain: BigNumberish,
      refundAddress: string,
      deliveryProviderAddress: string,
      messageKeys: MessageKeyStruct[],
      consistencyLevel: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    "sendVaasToEvm(uint16,address,bytes,uint256,uint256,(uint16,bytes32,uint64)[])"(
      targetChain: BigNumberish,
      targetAddress: string,
      payload: BytesLike,
      receiverValue: BigNumberish,
      gasLimit: BigNumberish,
      vaaKeys: VaaKeyStruct[],
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    "sendVaasToEvm(uint16,address,bytes,uint256,uint256,(uint16,bytes32,uint64)[],uint16,address)"(
      targetChain: BigNumberish,
      targetAddress: string,
      payload: BytesLike,
      receiverValue: BigNumberish,
      gasLimit: BigNumberish,
      vaaKeys: VaaKeyStruct[],
      refundChain: BigNumberish,
      refundAddress: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  deliveryAttempted(
    deliveryHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  deliveryFailureBlock(
    deliveryHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  deliverySuccessBlock(
    deliveryHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDefaultDeliveryProvider(overrides?: CallOverrides): Promise<string>;

  getRegisteredWormholeRelayerContract(
    chainId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  quoteDeliveryPrice(
    targetChain: BigNumberish,
    receiverValue: BigNumberish,
    encodedExecutionParameters: BytesLike,
    deliveryProviderAddress: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string] & {
      nativePriceQuote: BigNumber;
      encodedExecutionInfo: string;
    }
  >;

  "quoteEVMDeliveryPrice(uint16,uint256,uint256,address)"(
    targetChain: BigNumberish,
    receiverValue: BigNumberish,
    gasLimit: BigNumberish,
    deliveryProviderAddress: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      nativePriceQuote: BigNumber;
      targetChainRefundPerGasUnused: BigNumber;
    }
  >;

  "quoteEVMDeliveryPrice(uint16,uint256,uint256)"(
    targetChain: BigNumberish,
    receiverValue: BigNumberish,
    gasLimit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      nativePriceQuote: BigNumber;
      targetChainRefundPerGasUnused: BigNumber;
    }
  >;

  quoteNativeForChain(
    targetChain: BigNumberish,
    currentChainAmount: BigNumberish,
    deliveryProviderAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  resend(
    deliveryVaaKey: VaaKeyStruct,
    targetChain: BigNumberish,
    newReceiverValue: BigNumberish,
    newEncodedExecutionParameters: BytesLike,
    newDeliveryProviderAddress: string,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  resendToEvm(
    deliveryVaaKey: VaaKeyStruct,
    targetChain: BigNumberish,
    newReceiverValue: BigNumberish,
    newGasLimit: BigNumberish,
    newDeliveryProviderAddress: string,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  "send(uint16,bytes32,bytes,uint256,uint256,bytes,uint16,bytes32,address,(uint16,bytes32,uint64)[],uint8)"(
    targetChain: BigNumberish,
    targetAddress: BytesLike,
    payload: BytesLike,
    receiverValue: BigNumberish,
    paymentForExtraReceiverValue: BigNumberish,
    encodedExecutionParameters: BytesLike,
    refundChain: BigNumberish,
    refundAddress: BytesLike,
    deliveryProviderAddress: string,
    vaaKeys: VaaKeyStruct[],
    consistencyLevel: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  "send(uint16,bytes32,bytes,uint256,uint256,bytes,uint16,bytes32,address,(uint8,bytes)[],uint8)"(
    targetChain: BigNumberish,
    targetAddress: BytesLike,
    payload: BytesLike,
    receiverValue: BigNumberish,
    paymentForExtraReceiverValue: BigNumberish,
    encodedExecutionParameters: BytesLike,
    refundChain: BigNumberish,
    refundAddress: BytesLike,
    deliveryProviderAddress: string,
    messageKeys: MessageKeyStruct[],
    consistencyLevel: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  "sendPayloadToEvm(uint16,address,bytes,uint256,uint256,uint16,address)"(
    targetChain: BigNumberish,
    targetAddress: string,
    payload: BytesLike,
    receiverValue: BigNumberish,
    gasLimit: BigNumberish,
    refundChain: BigNumberish,
    refundAddress: string,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  "sendPayloadToEvm(uint16,address,bytes,uint256,uint256)"(
    targetChain: BigNumberish,
    targetAddress: string,
    payload: BytesLike,
    receiverValue: BigNumberish,
    gasLimit: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  "sendToEvm(uint16,address,bytes,uint256,uint256,uint256,uint16,address,address,(uint16,bytes32,uint64)[],uint8)"(
    targetChain: BigNumberish,
    targetAddress: string,
    payload: BytesLike,
    receiverValue: BigNumberish,
    paymentForExtraReceiverValue: BigNumberish,
    gasLimit: BigNumberish,
    refundChain: BigNumberish,
    refundAddress: string,
    deliveryProviderAddress: string,
    vaaKeys: VaaKeyStruct[],
    consistencyLevel: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  "sendToEvm(uint16,address,bytes,uint256,uint256,uint256,uint16,address,address,(uint8,bytes)[],uint8)"(
    targetChain: BigNumberish,
    targetAddress: string,
    payload: BytesLike,
    receiverValue: BigNumberish,
    paymentForExtraReceiverValue: BigNumberish,
    gasLimit: BigNumberish,
    refundChain: BigNumberish,
    refundAddress: string,
    deliveryProviderAddress: string,
    messageKeys: MessageKeyStruct[],
    consistencyLevel: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  "sendVaasToEvm(uint16,address,bytes,uint256,uint256,(uint16,bytes32,uint64)[])"(
    targetChain: BigNumberish,
    targetAddress: string,
    payload: BytesLike,
    receiverValue: BigNumberish,
    gasLimit: BigNumberish,
    vaaKeys: VaaKeyStruct[],
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  "sendVaasToEvm(uint16,address,bytes,uint256,uint256,(uint16,bytes32,uint64)[],uint16,address)"(
    targetChain: BigNumberish,
    targetAddress: string,
    payload: BytesLike,
    receiverValue: BigNumberish,
    gasLimit: BigNumberish,
    vaaKeys: VaaKeyStruct[],
    refundChain: BigNumberish,
    refundAddress: string,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    deliveryAttempted(
      deliveryHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    deliveryFailureBlock(
      deliveryHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deliverySuccessBlock(
      deliveryHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDefaultDeliveryProvider(overrides?: CallOverrides): Promise<string>;

    getRegisteredWormholeRelayerContract(
      chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    quoteDeliveryPrice(
      targetChain: BigNumberish,
      receiverValue: BigNumberish,
      encodedExecutionParameters: BytesLike,
      deliveryProviderAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string] & {
        nativePriceQuote: BigNumber;
        encodedExecutionInfo: string;
      }
    >;

    "quoteEVMDeliveryPrice(uint16,uint256,uint256,address)"(
      targetChain: BigNumberish,
      receiverValue: BigNumberish,
      gasLimit: BigNumberish,
      deliveryProviderAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        nativePriceQuote: BigNumber;
        targetChainRefundPerGasUnused: BigNumber;
      }
    >;

    "quoteEVMDeliveryPrice(uint16,uint256,uint256)"(
      targetChain: BigNumberish,
      receiverValue: BigNumberish,
      gasLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        nativePriceQuote: BigNumber;
        targetChainRefundPerGasUnused: BigNumber;
      }
    >;

    quoteNativeForChain(
      targetChain: BigNumberish,
      currentChainAmount: BigNumberish,
      deliveryProviderAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    resend(
      deliveryVaaKey: VaaKeyStruct,
      targetChain: BigNumberish,
      newReceiverValue: BigNumberish,
      newEncodedExecutionParameters: BytesLike,
      newDeliveryProviderAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    resendToEvm(
      deliveryVaaKey: VaaKeyStruct,
      targetChain: BigNumberish,
      newReceiverValue: BigNumberish,
      newGasLimit: BigNumberish,
      newDeliveryProviderAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "send(uint16,bytes32,bytes,uint256,uint256,bytes,uint16,bytes32,address,(uint16,bytes32,uint64)[],uint8)"(
      targetChain: BigNumberish,
      targetAddress: BytesLike,
      payload: BytesLike,
      receiverValue: BigNumberish,
      paymentForExtraReceiverValue: BigNumberish,
      encodedExecutionParameters: BytesLike,
      refundChain: BigNumberish,
      refundAddress: BytesLike,
      deliveryProviderAddress: string,
      vaaKeys: VaaKeyStruct[],
      consistencyLevel: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "send(uint16,bytes32,bytes,uint256,uint256,bytes,uint16,bytes32,address,(uint8,bytes)[],uint8)"(
      targetChain: BigNumberish,
      targetAddress: BytesLike,
      payload: BytesLike,
      receiverValue: BigNumberish,
      paymentForExtraReceiverValue: BigNumberish,
      encodedExecutionParameters: BytesLike,
      refundChain: BigNumberish,
      refundAddress: BytesLike,
      deliveryProviderAddress: string,
      messageKeys: MessageKeyStruct[],
      consistencyLevel: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "sendPayloadToEvm(uint16,address,bytes,uint256,uint256,uint16,address)"(
      targetChain: BigNumberish,
      targetAddress: string,
      payload: BytesLike,
      receiverValue: BigNumberish,
      gasLimit: BigNumberish,
      refundChain: BigNumberish,
      refundAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "sendPayloadToEvm(uint16,address,bytes,uint256,uint256)"(
      targetChain: BigNumberish,
      targetAddress: string,
      payload: BytesLike,
      receiverValue: BigNumberish,
      gasLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "sendToEvm(uint16,address,bytes,uint256,uint256,uint256,uint16,address,address,(uint16,bytes32,uint64)[],uint8)"(
      targetChain: BigNumberish,
      targetAddress: string,
      payload: BytesLike,
      receiverValue: BigNumberish,
      paymentForExtraReceiverValue: BigNumberish,
      gasLimit: BigNumberish,
      refundChain: BigNumberish,
      refundAddress: string,
      deliveryProviderAddress: string,
      vaaKeys: VaaKeyStruct[],
      consistencyLevel: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "sendToEvm(uint16,address,bytes,uint256,uint256,uint256,uint16,address,address,(uint8,bytes)[],uint8)"(
      targetChain: BigNumberish,
      targetAddress: string,
      payload: BytesLike,
      receiverValue: BigNumberish,
      paymentForExtraReceiverValue: BigNumberish,
      gasLimit: BigNumberish,
      refundChain: BigNumberish,
      refundAddress: string,
      deliveryProviderAddress: string,
      messageKeys: MessageKeyStruct[],
      consistencyLevel: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "sendVaasToEvm(uint16,address,bytes,uint256,uint256,(uint16,bytes32,uint64)[])"(
      targetChain: BigNumberish,
      targetAddress: string,
      payload: BytesLike,
      receiverValue: BigNumberish,
      gasLimit: BigNumberish,
      vaaKeys: VaaKeyStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "sendVaasToEvm(uint16,address,bytes,uint256,uint256,(uint16,bytes32,uint64)[],uint16,address)"(
      targetChain: BigNumberish,
      targetAddress: string,
      payload: BytesLike,
      receiverValue: BigNumberish,
      gasLimit: BigNumberish,
      vaaKeys: VaaKeyStruct[],
      refundChain: BigNumberish,
      refundAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "SendEvent(uint64,uint256,uint256)"(
      sequence?: BigNumberish | null,
      deliveryQuote?: null,
      paymentForExtraReceiverValue?: null
    ): SendEventEventFilter;
    SendEvent(
      sequence?: BigNumberish | null,
      deliveryQuote?: null,
      paymentForExtraReceiverValue?: null
    ): SendEventEventFilter;
  };

  estimateGas: {
    deliveryAttempted(
      deliveryHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deliveryFailureBlock(
      deliveryHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deliverySuccessBlock(
      deliveryHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDefaultDeliveryProvider(overrides?: CallOverrides): Promise<BigNumber>;

    getRegisteredWormholeRelayerContract(
      chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quoteDeliveryPrice(
      targetChain: BigNumberish,
      receiverValue: BigNumberish,
      encodedExecutionParameters: BytesLike,
      deliveryProviderAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "quoteEVMDeliveryPrice(uint16,uint256,uint256,address)"(
      targetChain: BigNumberish,
      receiverValue: BigNumberish,
      gasLimit: BigNumberish,
      deliveryProviderAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "quoteEVMDeliveryPrice(uint16,uint256,uint256)"(
      targetChain: BigNumberish,
      receiverValue: BigNumberish,
      gasLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quoteNativeForChain(
      targetChain: BigNumberish,
      currentChainAmount: BigNumberish,
      deliveryProviderAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    resend(
      deliveryVaaKey: VaaKeyStruct,
      targetChain: BigNumberish,
      newReceiverValue: BigNumberish,
      newEncodedExecutionParameters: BytesLike,
      newDeliveryProviderAddress: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    resendToEvm(
      deliveryVaaKey: VaaKeyStruct,
      targetChain: BigNumberish,
      newReceiverValue: BigNumberish,
      newGasLimit: BigNumberish,
      newDeliveryProviderAddress: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    "send(uint16,bytes32,bytes,uint256,uint256,bytes,uint16,bytes32,address,(uint16,bytes32,uint64)[],uint8)"(
      targetChain: BigNumberish,
      targetAddress: BytesLike,
      payload: BytesLike,
      receiverValue: BigNumberish,
      paymentForExtraReceiverValue: BigNumberish,
      encodedExecutionParameters: BytesLike,
      refundChain: BigNumberish,
      refundAddress: BytesLike,
      deliveryProviderAddress: string,
      vaaKeys: VaaKeyStruct[],
      consistencyLevel: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    "send(uint16,bytes32,bytes,uint256,uint256,bytes,uint16,bytes32,address,(uint8,bytes)[],uint8)"(
      targetChain: BigNumberish,
      targetAddress: BytesLike,
      payload: BytesLike,
      receiverValue: BigNumberish,
      paymentForExtraReceiverValue: BigNumberish,
      encodedExecutionParameters: BytesLike,
      refundChain: BigNumberish,
      refundAddress: BytesLike,
      deliveryProviderAddress: string,
      messageKeys: MessageKeyStruct[],
      consistencyLevel: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    "sendPayloadToEvm(uint16,address,bytes,uint256,uint256,uint16,address)"(
      targetChain: BigNumberish,
      targetAddress: string,
      payload: BytesLike,
      receiverValue: BigNumberish,
      gasLimit: BigNumberish,
      refundChain: BigNumberish,
      refundAddress: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    "sendPayloadToEvm(uint16,address,bytes,uint256,uint256)"(
      targetChain: BigNumberish,
      targetAddress: string,
      payload: BytesLike,
      receiverValue: BigNumberish,
      gasLimit: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    "sendToEvm(uint16,address,bytes,uint256,uint256,uint256,uint16,address,address,(uint16,bytes32,uint64)[],uint8)"(
      targetChain: BigNumberish,
      targetAddress: string,
      payload: BytesLike,
      receiverValue: BigNumberish,
      paymentForExtraReceiverValue: BigNumberish,
      gasLimit: BigNumberish,
      refundChain: BigNumberish,
      refundAddress: string,
      deliveryProviderAddress: string,
      vaaKeys: VaaKeyStruct[],
      consistencyLevel: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    "sendToEvm(uint16,address,bytes,uint256,uint256,uint256,uint16,address,address,(uint8,bytes)[],uint8)"(
      targetChain: BigNumberish,
      targetAddress: string,
      payload: BytesLike,
      receiverValue: BigNumberish,
      paymentForExtraReceiverValue: BigNumberish,
      gasLimit: BigNumberish,
      refundChain: BigNumberish,
      refundAddress: string,
      deliveryProviderAddress: string,
      messageKeys: MessageKeyStruct[],
      consistencyLevel: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    "sendVaasToEvm(uint16,address,bytes,uint256,uint256,(uint16,bytes32,uint64)[])"(
      targetChain: BigNumberish,
      targetAddress: string,
      payload: BytesLike,
      receiverValue: BigNumberish,
      gasLimit: BigNumberish,
      vaaKeys: VaaKeyStruct[],
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    "sendVaasToEvm(uint16,address,bytes,uint256,uint256,(uint16,bytes32,uint64)[],uint16,address)"(
      targetChain: BigNumberish,
      targetAddress: string,
      payload: BytesLike,
      receiverValue: BigNumberish,
      gasLimit: BigNumberish,
      vaaKeys: VaaKeyStruct[],
      refundChain: BigNumberish,
      refundAddress: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    deliveryAttempted(
      deliveryHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deliveryFailureBlock(
      deliveryHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deliverySuccessBlock(
      deliveryHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDefaultDeliveryProvider(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRegisteredWormholeRelayerContract(
      chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quoteDeliveryPrice(
      targetChain: BigNumberish,
      receiverValue: BigNumberish,
      encodedExecutionParameters: BytesLike,
      deliveryProviderAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "quoteEVMDeliveryPrice(uint16,uint256,uint256,address)"(
      targetChain: BigNumberish,
      receiverValue: BigNumberish,
      gasLimit: BigNumberish,
      deliveryProviderAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "quoteEVMDeliveryPrice(uint16,uint256,uint256)"(
      targetChain: BigNumberish,
      receiverValue: BigNumberish,
      gasLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quoteNativeForChain(
      targetChain: BigNumberish,
      currentChainAmount: BigNumberish,
      deliveryProviderAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    resend(
      deliveryVaaKey: VaaKeyStruct,
      targetChain: BigNumberish,
      newReceiverValue: BigNumberish,
      newEncodedExecutionParameters: BytesLike,
      newDeliveryProviderAddress: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    resendToEvm(
      deliveryVaaKey: VaaKeyStruct,
      targetChain: BigNumberish,
      newReceiverValue: BigNumberish,
      newGasLimit: BigNumberish,
      newDeliveryProviderAddress: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "send(uint16,bytes32,bytes,uint256,uint256,bytes,uint16,bytes32,address,(uint16,bytes32,uint64)[],uint8)"(
      targetChain: BigNumberish,
      targetAddress: BytesLike,
      payload: BytesLike,
      receiverValue: BigNumberish,
      paymentForExtraReceiverValue: BigNumberish,
      encodedExecutionParameters: BytesLike,
      refundChain: BigNumberish,
      refundAddress: BytesLike,
      deliveryProviderAddress: string,
      vaaKeys: VaaKeyStruct[],
      consistencyLevel: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "send(uint16,bytes32,bytes,uint256,uint256,bytes,uint16,bytes32,address,(uint8,bytes)[],uint8)"(
      targetChain: BigNumberish,
      targetAddress: BytesLike,
      payload: BytesLike,
      receiverValue: BigNumberish,
      paymentForExtraReceiverValue: BigNumberish,
      encodedExecutionParameters: BytesLike,
      refundChain: BigNumberish,
      refundAddress: BytesLike,
      deliveryProviderAddress: string,
      messageKeys: MessageKeyStruct[],
      consistencyLevel: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "sendPayloadToEvm(uint16,address,bytes,uint256,uint256,uint16,address)"(
      targetChain: BigNumberish,
      targetAddress: string,
      payload: BytesLike,
      receiverValue: BigNumberish,
      gasLimit: BigNumberish,
      refundChain: BigNumberish,
      refundAddress: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "sendPayloadToEvm(uint16,address,bytes,uint256,uint256)"(
      targetChain: BigNumberish,
      targetAddress: string,
      payload: BytesLike,
      receiverValue: BigNumberish,
      gasLimit: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "sendToEvm(uint16,address,bytes,uint256,uint256,uint256,uint16,address,address,(uint16,bytes32,uint64)[],uint8)"(
      targetChain: BigNumberish,
      targetAddress: string,
      payload: BytesLike,
      receiverValue: BigNumberish,
      paymentForExtraReceiverValue: BigNumberish,
      gasLimit: BigNumberish,
      refundChain: BigNumberish,
      refundAddress: string,
      deliveryProviderAddress: string,
      vaaKeys: VaaKeyStruct[],
      consistencyLevel: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "sendToEvm(uint16,address,bytes,uint256,uint256,uint256,uint16,address,address,(uint8,bytes)[],uint8)"(
      targetChain: BigNumberish,
      targetAddress: string,
      payload: BytesLike,
      receiverValue: BigNumberish,
      paymentForExtraReceiverValue: BigNumberish,
      gasLimit: BigNumberish,
      refundChain: BigNumberish,
      refundAddress: string,
      deliveryProviderAddress: string,
      messageKeys: MessageKeyStruct[],
      consistencyLevel: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "sendVaasToEvm(uint16,address,bytes,uint256,uint256,(uint16,bytes32,uint64)[])"(
      targetChain: BigNumberish,
      targetAddress: string,
      payload: BytesLike,
      receiverValue: BigNumberish,
      gasLimit: BigNumberish,
      vaaKeys: VaaKeyStruct[],
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "sendVaasToEvm(uint16,address,bytes,uint256,uint256,(uint16,bytes32,uint64)[],uint16,address)"(
      targetChain: BigNumberish,
      targetAddress: string,
      payload: BytesLike,
      receiverValue: BigNumberish,
      gasLimit: BigNumberish,
      vaaKeys: VaaKeyStruct[],
      refundChain: BigNumberish,
      refundAddress: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
