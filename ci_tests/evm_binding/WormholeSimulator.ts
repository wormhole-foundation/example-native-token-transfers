/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace IWormhole {
  export type SignatureStruct = {
    r: BytesLike;
    s: BytesLike;
    v: BigNumberish;
    guardianIndex: BigNumberish;
  };

  export type SignatureStructOutput = [string, string, number, number] & {
    r: string;
    s: string;
    v: number;
    guardianIndex: number;
  };

  export type VMStruct = {
    version: BigNumberish;
    timestamp: BigNumberish;
    nonce: BigNumberish;
    emitterChainId: BigNumberish;
    emitterAddress: BytesLike;
    sequence: BigNumberish;
    consistencyLevel: BigNumberish;
    payload: BytesLike;
    guardianSetIndex: BigNumberish;
    signatures: IWormhole.SignatureStruct[];
    hash: BytesLike;
  };

  export type VMStructOutput = [
    number,
    number,
    number,
    number,
    string,
    BigNumber,
    number,
    string,
    number,
    IWormhole.SignatureStructOutput[],
    string
  ] & {
    version: number;
    timestamp: number;
    nonce: number;
    emitterChainId: number;
    emitterAddress: string;
    sequence: BigNumber;
    consistencyLevel: number;
    payload: string;
    guardianSetIndex: number;
    signatures: IWormhole.SignatureStructOutput[];
    hash: string;
  };
}

export declare namespace VmSafe {
  export type LogStruct = {
    topics: BytesLike[];
    data: BytesLike;
    emitter: string;
  };

  export type LogStructOutput = [string[], string, string] & {
    topics: string[];
    data: string;
    emitter: string;
  };
}

export interface WormholeSimulatorInterface extends utils.Interface {
  functions: {
    "encodeAndSignMessage((uint8,uint32,uint32,uint16,bytes32,uint64,uint8,bytes,uint32,(bytes32,bytes32,uint8,uint8)[],bytes32))": FunctionFragment;
    "encodeObservation((uint8,uint32,uint32,uint16,bytes32,uint64,uint8,bytes,uint32,(bytes32,bytes32,uint8,uint8)[],bytes32))": FunctionFragment;
    "fetchSignedMessageFromLogs((bytes32[],bytes,address),uint16)": FunctionFragment;
    "fetchWormholeMessageFromLog((bytes32[],bytes,address)[])": FunctionFragment;
    "setMessageFee(uint256)": FunctionFragment;
    "vm()": FunctionFragment;
    "wormhole()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "encodeAndSignMessage"
      | "encodeObservation"
      | "fetchSignedMessageFromLogs"
      | "fetchWormholeMessageFromLog"
      | "setMessageFee"
      | "vm"
      | "wormhole"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "encodeAndSignMessage",
    values: [IWormhole.VMStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "encodeObservation",
    values: [IWormhole.VMStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "fetchSignedMessageFromLogs",
    values: [VmSafe.LogStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fetchWormholeMessageFromLog",
    values: [VmSafe.LogStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setMessageFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "vm", values?: undefined): string;
  encodeFunctionData(functionFragment: "wormhole", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "encodeAndSignMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encodeObservation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchSignedMessageFromLogs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchWormholeMessageFromLog",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMessageFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vm", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wormhole", data: BytesLike): Result;

  events: {};
}

export interface WormholeSimulator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: WormholeSimulatorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    encodeAndSignMessage(
      vm_: IWormhole.VMStruct,
      overrides?: CallOverrides
    ): Promise<[string] & { signedMessage: string }>;

    encodeObservation(
      vm_: IWormhole.VMStruct,
      overrides?: CallOverrides
    ): Promise<[string] & { encodedObservation: string }>;

    fetchSignedMessageFromLogs(
      log: VmSafe.LogStruct,
      emitterChainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { signedMessage: string }>;

    fetchWormholeMessageFromLog(
      logs: VmSafe.LogStruct[],
      overrides?: CallOverrides
    ): Promise<[VmSafe.LogStructOutput[]]>;

    setMessageFee(
      newFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    vm(overrides?: CallOverrides): Promise<[string]>;

    wormhole(overrides?: CallOverrides): Promise<[string]>;
  };

  encodeAndSignMessage(
    vm_: IWormhole.VMStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  encodeObservation(
    vm_: IWormhole.VMStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  fetchSignedMessageFromLogs(
    log: VmSafe.LogStruct,
    emitterChainId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  fetchWormholeMessageFromLog(
    logs: VmSafe.LogStruct[],
    overrides?: CallOverrides
  ): Promise<VmSafe.LogStructOutput[]>;

  setMessageFee(
    newFee: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  vm(overrides?: CallOverrides): Promise<string>;

  wormhole(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    encodeAndSignMessage(
      vm_: IWormhole.VMStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    encodeObservation(
      vm_: IWormhole.VMStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    fetchSignedMessageFromLogs(
      log: VmSafe.LogStruct,
      emitterChainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    fetchWormholeMessageFromLog(
      logs: VmSafe.LogStruct[],
      overrides?: CallOverrides
    ): Promise<VmSafe.LogStructOutput[]>;

    setMessageFee(
      newFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    vm(overrides?: CallOverrides): Promise<string>;

    wormhole(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    encodeAndSignMessage(
      vm_: IWormhole.VMStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    encodeObservation(
      vm_: IWormhole.VMStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fetchSignedMessageFromLogs(
      log: VmSafe.LogStruct,
      emitterChainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fetchWormholeMessageFromLog(
      logs: VmSafe.LogStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setMessageFee(
      newFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    vm(overrides?: CallOverrides): Promise<BigNumber>;

    wormhole(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    encodeAndSignMessage(
      vm_: IWormhole.VMStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    encodeObservation(
      vm_: IWormhole.VMStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fetchSignedMessageFromLogs(
      log: VmSafe.LogStruct,
      emitterChainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fetchWormholeMessageFromLog(
      logs: VmSafe.LogStruct[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setMessageFee(
      newFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    vm(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wormhole(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
