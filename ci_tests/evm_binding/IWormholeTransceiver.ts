/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace TransceiverStructs {
  export type TransceiverMessageStruct = {
    sourceNttManagerAddress: BytesLike;
    recipientNttManagerAddress: BytesLike;
    nttManagerPayload: BytesLike;
    transceiverPayload: BytesLike;
  };

  export type TransceiverMessageStructOutput = [
    string,
    string,
    string,
    string
  ] & {
    sourceNttManagerAddress: string;
    recipientNttManagerAddress: string;
    nttManagerPayload: string;
    transceiverPayload: string;
  };
}

export interface IWormholeTransceiverInterface extends utils.Interface {
  functions: {
    "getWormholePeer(uint16)": FunctionFragment;
    "isSpecialRelayingEnabled(uint16)": FunctionFragment;
    "isVAAConsumed(bytes32)": FunctionFragment;
    "isWormholeEvmChain(uint16)": FunctionFragment;
    "isWormholeRelayingEnabled(uint16)": FunctionFragment;
    "receiveMessage(bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getWormholePeer"
      | "isSpecialRelayingEnabled"
      | "isVAAConsumed"
      | "isWormholeEvmChain"
      | "isWormholeRelayingEnabled"
      | "receiveMessage"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getWormholePeer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isSpecialRelayingEnabled",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isVAAConsumed",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isWormholeEvmChain",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isWormholeRelayingEnabled",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "receiveMessage",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getWormholePeer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSpecialRelayingEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isVAAConsumed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWormholeEvmChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWormholeRelayingEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiveMessage",
    data: BytesLike
  ): Result;

  events: {
    "ReceivedMessage(bytes32,uint16,bytes32,uint64)": EventFragment;
    "ReceivedRelayedMessage(bytes32,uint16,bytes32)": EventFragment;
    "SendTransceiverMessage(uint16,(bytes32,bytes32,bytes,bytes))": EventFragment;
    "SetIsSpecialRelayingEnabled(uint16,bool)": EventFragment;
    "SetIsWormholeEvmChain(uint16)": EventFragment;
    "SetIsWormholeRelayingEnabled(uint16,bool)": EventFragment;
    "SetWormholePeer(uint16,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ReceivedMessage"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReceivedRelayedMessage"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SendTransceiverMessage"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SetIsSpecialRelayingEnabled"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetIsWormholeEvmChain"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SetIsWormholeRelayingEnabled"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetWormholePeer"): EventFragment;
}

export interface ReceivedMessageEventObject {
  digest: string;
  emitterChainId: number;
  emitterAddress: string;
  sequence: BigNumber;
}
export type ReceivedMessageEvent = TypedEvent<
  [string, number, string, BigNumber],
  ReceivedMessageEventObject
>;

export type ReceivedMessageEventFilter = TypedEventFilter<ReceivedMessageEvent>;

export interface ReceivedRelayedMessageEventObject {
  digest: string;
  emitterChainId: number;
  emitterAddress: string;
}
export type ReceivedRelayedMessageEvent = TypedEvent<
  [string, number, string],
  ReceivedRelayedMessageEventObject
>;

export type ReceivedRelayedMessageEventFilter =
  TypedEventFilter<ReceivedRelayedMessageEvent>;

export interface SendTransceiverMessageEventObject {
  recipientChain: number;
  message: TransceiverStructs.TransceiverMessageStructOutput;
}
export type SendTransceiverMessageEvent = TypedEvent<
  [number, TransceiverStructs.TransceiverMessageStructOutput],
  SendTransceiverMessageEventObject
>;

export type SendTransceiverMessageEventFilter =
  TypedEventFilter<SendTransceiverMessageEvent>;

export interface SetIsSpecialRelayingEnabledEventObject {
  chainId: number;
  isRelayingEnabled: boolean;
}
export type SetIsSpecialRelayingEnabledEvent = TypedEvent<
  [number, boolean],
  SetIsSpecialRelayingEnabledEventObject
>;

export type SetIsSpecialRelayingEnabledEventFilter =
  TypedEventFilter<SetIsSpecialRelayingEnabledEvent>;

export interface SetIsWormholeEvmChainEventObject {
  chainId: number;
}
export type SetIsWormholeEvmChainEvent = TypedEvent<
  [number],
  SetIsWormholeEvmChainEventObject
>;

export type SetIsWormholeEvmChainEventFilter =
  TypedEventFilter<SetIsWormholeEvmChainEvent>;

export interface SetIsWormholeRelayingEnabledEventObject {
  chainId: number;
  isRelayingEnabled: boolean;
}
export type SetIsWormholeRelayingEnabledEvent = TypedEvent<
  [number, boolean],
  SetIsWormholeRelayingEnabledEventObject
>;

export type SetIsWormholeRelayingEnabledEventFilter =
  TypedEventFilter<SetIsWormholeRelayingEnabledEvent>;

export interface SetWormholePeerEventObject {
  chainId: number;
  peerContract: string;
}
export type SetWormholePeerEvent = TypedEvent<
  [number, string],
  SetWormholePeerEventObject
>;

export type SetWormholePeerEventFilter = TypedEventFilter<SetWormholePeerEvent>;

export interface IWormholeTransceiver extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IWormholeTransceiverInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getWormholePeer(
      chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isSpecialRelayingEnabled(
      chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isVAAConsumed(
      hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isWormholeEvmChain(
      chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isWormholeRelayingEnabled(
      chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    receiveMessage(
      encodedMessage: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  getWormholePeer(
    chainId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  isSpecialRelayingEnabled(
    chainId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isVAAConsumed(hash: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  isWormholeEvmChain(
    chainId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isWormholeRelayingEnabled(
    chainId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  receiveMessage(
    encodedMessage: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    getWormholePeer(
      chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    isSpecialRelayingEnabled(
      chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isVAAConsumed(hash: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    isWormholeEvmChain(
      chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isWormholeRelayingEnabled(
      chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    receiveMessage(
      encodedMessage: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ReceivedMessage(bytes32,uint16,bytes32,uint64)"(
      digest?: null,
      emitterChainId?: null,
      emitterAddress?: null,
      sequence?: null
    ): ReceivedMessageEventFilter;
    ReceivedMessage(
      digest?: null,
      emitterChainId?: null,
      emitterAddress?: null,
      sequence?: null
    ): ReceivedMessageEventFilter;

    "ReceivedRelayedMessage(bytes32,uint16,bytes32)"(
      digest?: null,
      emitterChainId?: null,
      emitterAddress?: null
    ): ReceivedRelayedMessageEventFilter;
    ReceivedRelayedMessage(
      digest?: null,
      emitterChainId?: null,
      emitterAddress?: null
    ): ReceivedRelayedMessageEventFilter;

    "SendTransceiverMessage(uint16,(bytes32,bytes32,bytes,bytes))"(
      recipientChain?: null,
      message?: null
    ): SendTransceiverMessageEventFilter;
    SendTransceiverMessage(
      recipientChain?: null,
      message?: null
    ): SendTransceiverMessageEventFilter;

    "SetIsSpecialRelayingEnabled(uint16,bool)"(
      chainId?: null,
      isRelayingEnabled?: null
    ): SetIsSpecialRelayingEnabledEventFilter;
    SetIsSpecialRelayingEnabled(
      chainId?: null,
      isRelayingEnabled?: null
    ): SetIsSpecialRelayingEnabledEventFilter;

    "SetIsWormholeEvmChain(uint16)"(
      chainId?: null
    ): SetIsWormholeEvmChainEventFilter;
    SetIsWormholeEvmChain(chainId?: null): SetIsWormholeEvmChainEventFilter;

    "SetIsWormholeRelayingEnabled(uint16,bool)"(
      chainId?: null,
      isRelayingEnabled?: null
    ): SetIsWormholeRelayingEnabledEventFilter;
    SetIsWormholeRelayingEnabled(
      chainId?: null,
      isRelayingEnabled?: null
    ): SetIsWormholeRelayingEnabledEventFilter;

    "SetWormholePeer(uint16,bytes32)"(
      chainId?: null,
      peerContract?: null
    ): SetWormholePeerEventFilter;
    SetWormholePeer(
      chainId?: null,
      peerContract?: null
    ): SetWormholePeerEventFilter;
  };

  estimateGas: {
    getWormholePeer(
      chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isSpecialRelayingEnabled(
      chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isVAAConsumed(
      hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isWormholeEvmChain(
      chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isWormholeRelayingEnabled(
      chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    receiveMessage(
      encodedMessage: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getWormholePeer(
      chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSpecialRelayingEnabled(
      chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isVAAConsumed(
      hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isWormholeEvmChain(
      chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isWormholeRelayingEnabled(
      chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    receiveMessage(
      encodedMessage: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
