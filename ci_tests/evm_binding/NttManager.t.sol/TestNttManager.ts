/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export declare namespace StdInvariant {
  export type FuzzSelectorStruct = { addr: string; selectors: BytesLike[] };

  export type FuzzSelectorStructOutput = [string, string[]] & {
    addr: string;
    selectors: string[];
  };

  export type FuzzInterfaceStruct = { addr: string; artifacts: string[] };

  export type FuzzInterfaceStructOutput = [string, string[]] & {
    addr: string;
    artifacts: string[];
  };
}

export interface TestNttManagerInterface extends utils.Interface {
  functions: {
    "IS_TEST()": FunctionFragment;
    "excludeArtifacts()": FunctionFragment;
    "excludeContracts()": FunctionFragment;
    "excludeSenders()": FunctionFragment;
    "failed()": FunctionFragment;
    "setUp()": FunctionFragment;
    "targetArtifactSelectors()": FunctionFragment;
    "targetArtifacts()": FunctionFragment;
    "targetContracts()": FunctionFragment;
    "targetInterfaces()": FunctionFragment;
    "targetSelectors()": FunctionFragment;
    "targetSenders()": FunctionFragment;
    "test_attestDisabled()": FunctionFragment;
    "test_attestSimple()": FunctionFragment;
    "test_attestTwice()": FunctionFragment;
    "test_attestationQuorum()": FunctionFragment;
    "test_canSetThreshold()": FunctionFragment;
    "test_cantEnableTransceiverTwice()": FunctionFragment;
    "test_cantSetThresholdToZero()": FunctionFragment;
    "test_cantSetThresholdTooHigh()": FunctionFragment;
    "test_constructor()": FunctionFragment;
    "test_countSetBits()": FunctionFragment;
    "test_disableReenableTransceiver()": FunctionFragment;
    "test_dustReverts()": FunctionFragment;
    "test_multipleTransceivers()": FunctionFragment;
    "test_noAutomaticSlot()": FunctionFragment;
    "test_notTransceiver()": FunctionFragment;
    "test_onlyEnabledTransceiversCanAttest()": FunctionFragment;
    "test_onlyOwnerCanModifyTransceivers()": FunctionFragment;
    "test_onlyOwnerCanSetThreshold()": FunctionFragment;
    "test_onlyOwnerCanTransferOwnership()": FunctionFragment;
    "test_onlyPeerNttManagerCanAttest()": FunctionFragment;
    "test_owner()": FunctionFragment;
    "test_registerTransceiver()": FunctionFragment;
    "test_transceiverIncompatibleNttManager()": FunctionFragment;
    "test_transceiverWrongNttManager()": FunctionFragment;
    "test_transferOwnership()": FunctionFragment;
    "test_transfer_sequences()": FunctionFragment;
    "test_upgradeNttManager()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "IS_TEST"
      | "excludeArtifacts"
      | "excludeContracts"
      | "excludeSenders"
      | "failed"
      | "setUp"
      | "targetArtifactSelectors"
      | "targetArtifacts"
      | "targetContracts"
      | "targetInterfaces"
      | "targetSelectors"
      | "targetSenders"
      | "test_attestDisabled"
      | "test_attestSimple"
      | "test_attestTwice"
      | "test_attestationQuorum"
      | "test_canSetThreshold"
      | "test_cantEnableTransceiverTwice"
      | "test_cantSetThresholdToZero"
      | "test_cantSetThresholdTooHigh"
      | "test_constructor"
      | "test_countSetBits"
      | "test_disableReenableTransceiver"
      | "test_dustReverts"
      | "test_multipleTransceivers"
      | "test_noAutomaticSlot"
      | "test_notTransceiver"
      | "test_onlyEnabledTransceiversCanAttest"
      | "test_onlyOwnerCanModifyTransceivers"
      | "test_onlyOwnerCanSetThreshold"
      | "test_onlyOwnerCanTransferOwnership"
      | "test_onlyPeerNttManagerCanAttest"
      | "test_owner"
      | "test_registerTransceiver"
      | "test_transceiverIncompatibleNttManager"
      | "test_transceiverWrongNttManager"
      | "test_transferOwnership"
      | "test_transfer_sequences"
      | "test_upgradeNttManager"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "IS_TEST", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "excludeArtifacts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "excludeContracts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "excludeSenders",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "failed", values?: undefined): string;
  encodeFunctionData(functionFragment: "setUp", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "targetArtifactSelectors",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "targetArtifacts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "targetContracts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "targetInterfaces",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "targetSelectors",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "targetSenders",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_attestDisabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_attestSimple",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_attestTwice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_attestationQuorum",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_canSetThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_cantEnableTransceiverTwice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_cantSetThresholdToZero",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_cantSetThresholdTooHigh",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_constructor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_countSetBits",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_disableReenableTransceiver",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_dustReverts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_multipleTransceivers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_noAutomaticSlot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_notTransceiver",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_onlyEnabledTransceiversCanAttest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_onlyOwnerCanModifyTransceivers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_onlyOwnerCanSetThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_onlyOwnerCanTransferOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_onlyPeerNttManagerCanAttest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_owner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_registerTransceiver",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_transceiverIncompatibleNttManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_transceiverWrongNttManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_transferOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_transfer_sequences",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test_upgradeNttManager",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "IS_TEST", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "excludeArtifacts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludeContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludeSenders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "failed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setUp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "targetArtifactSelectors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetArtifacts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetInterfaces",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetSelectors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetSenders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_attestDisabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_attestSimple",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_attestTwice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_attestationQuorum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_canSetThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_cantEnableTransceiverTwice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_cantSetThresholdToZero",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_cantSetThresholdTooHigh",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_constructor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_countSetBits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_disableReenableTransceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_dustReverts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_multipleTransceivers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_noAutomaticSlot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_notTransceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_onlyEnabledTransceiversCanAttest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_onlyOwnerCanModifyTransceivers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_onlyOwnerCanSetThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_onlyOwnerCanTransferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_onlyPeerNttManagerCanAttest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "test_owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "test_registerTransceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_transceiverIncompatibleNttManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_transceiverWrongNttManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_transfer_sequences",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_upgradeNttManager",
    data: BytesLike
  ): Result;

  events: {
    "InboundTransferQueued(bytes32)": EventFragment;
    "MessageAlreadyExecuted(bytes32,bytes32)": EventFragment;
    "MessageAttestedTo(bytes32,address,uint8)": EventFragment;
    "OutboundTransferQueued(uint64)": EventFragment;
    "OutboundTransferRateLimited(address,uint64,uint256,uint256)": EventFragment;
    "PeerUpdated(uint16,bytes32,bytes32)": EventFragment;
    "ThresholdChanged(uint8,uint8)": EventFragment;
    "TransceiverAdded(address,uint256,uint8)": EventFragment;
    "TransceiverRemoved(address,uint8)": EventFragment;
    "TransferRedeemed(bytes32)": EventFragment;
    "TransferSent(bytes32,uint256,uint16,uint64)": EventFragment;
    "log(string)": EventFragment;
    "log_address(address)": EventFragment;
    "log_array(uint256[])": EventFragment;
    "log_array(int256[])": EventFragment;
    "log_array(address[])": EventFragment;
    "log_bytes(bytes)": EventFragment;
    "log_bytes32(bytes32)": EventFragment;
    "log_int(int256)": EventFragment;
    "log_named_address(string,address)": EventFragment;
    "log_named_array(string,uint256[])": EventFragment;
    "log_named_array(string,int256[])": EventFragment;
    "log_named_array(string,address[])": EventFragment;
    "log_named_bytes(string,bytes)": EventFragment;
    "log_named_bytes32(string,bytes32)": EventFragment;
    "log_named_decimal_int(string,int256,uint256)": EventFragment;
    "log_named_decimal_uint(string,uint256,uint256)": EventFragment;
    "log_named_int(string,int256)": EventFragment;
    "log_named_string(string,string)": EventFragment;
    "log_named_uint(string,uint256)": EventFragment;
    "log_string(string)": EventFragment;
    "log_uint(uint256)": EventFragment;
    "logs(bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "InboundTransferQueued"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MessageAlreadyExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MessageAttestedTo"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OutboundTransferQueued"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "OutboundTransferRateLimited"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PeerUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ThresholdChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransceiverAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransceiverRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferRedeemed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferSent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_address"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_array(uint256[])"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_array(int256[])"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_array(address[])"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_bytes"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_bytes32"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_int"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_address"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "log_named_array(string,uint256[])"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "log_named_array(string,int256[])"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "log_named_array(string,address[])"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_bytes"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_bytes32"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_decimal_int"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_decimal_uint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_int"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_string"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_uint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_string"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_uint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "logs"): EventFragment;
}

export interface InboundTransferQueuedEventObject {
  digest: string;
}
export type InboundTransferQueuedEvent = TypedEvent<
  [string],
  InboundTransferQueuedEventObject
>;

export type InboundTransferQueuedEventFilter =
  TypedEventFilter<InboundTransferQueuedEvent>;

export interface MessageAlreadyExecutedEventObject {
  sourceNttManager: string;
  msgHash: string;
}
export type MessageAlreadyExecutedEvent = TypedEvent<
  [string, string],
  MessageAlreadyExecutedEventObject
>;

export type MessageAlreadyExecutedEventFilter =
  TypedEventFilter<MessageAlreadyExecutedEvent>;

export interface MessageAttestedToEventObject {
  digest: string;
  transceiver: string;
  index: number;
}
export type MessageAttestedToEvent = TypedEvent<
  [string, string, number],
  MessageAttestedToEventObject
>;

export type MessageAttestedToEventFilter =
  TypedEventFilter<MessageAttestedToEvent>;

export interface OutboundTransferQueuedEventObject {
  queueSequence: BigNumber;
}
export type OutboundTransferQueuedEvent = TypedEvent<
  [BigNumber],
  OutboundTransferQueuedEventObject
>;

export type OutboundTransferQueuedEventFilter =
  TypedEventFilter<OutboundTransferQueuedEvent>;

export interface OutboundTransferRateLimitedEventObject {
  sender: string;
  sequence: BigNumber;
  amount: BigNumber;
  currentCapacity: BigNumber;
}
export type OutboundTransferRateLimitedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  OutboundTransferRateLimitedEventObject
>;

export type OutboundTransferRateLimitedEventFilter =
  TypedEventFilter<OutboundTransferRateLimitedEvent>;

export interface PeerUpdatedEventObject {
  chainId_: number;
  oldPeerContract: string;
  peerContract: string;
}
export type PeerUpdatedEvent = TypedEvent<
  [number, string, string],
  PeerUpdatedEventObject
>;

export type PeerUpdatedEventFilter = TypedEventFilter<PeerUpdatedEvent>;

export interface ThresholdChangedEventObject {
  oldThreshold: number;
  threshold: number;
}
export type ThresholdChangedEvent = TypedEvent<
  [number, number],
  ThresholdChangedEventObject
>;

export type ThresholdChangedEventFilter =
  TypedEventFilter<ThresholdChangedEvent>;

export interface TransceiverAddedEventObject {
  transceiver: string;
  transceiversNum: BigNumber;
  threshold: number;
}
export type TransceiverAddedEvent = TypedEvent<
  [string, BigNumber, number],
  TransceiverAddedEventObject
>;

export type TransceiverAddedEventFilter =
  TypedEventFilter<TransceiverAddedEvent>;

export interface TransceiverRemovedEventObject {
  transceiver: string;
  threshold: number;
}
export type TransceiverRemovedEvent = TypedEvent<
  [string, number],
  TransceiverRemovedEventObject
>;

export type TransceiverRemovedEventFilter =
  TypedEventFilter<TransceiverRemovedEvent>;

export interface TransferRedeemedEventObject {
  digest: string;
}
export type TransferRedeemedEvent = TypedEvent<
  [string],
  TransferRedeemedEventObject
>;

export type TransferRedeemedEventFilter =
  TypedEventFilter<TransferRedeemedEvent>;

export interface TransferSentEventObject {
  recipient: string;
  amount: BigNumber;
  recipientChain: number;
  msgSequence: BigNumber;
}
export type TransferSentEvent = TypedEvent<
  [string, BigNumber, number, BigNumber],
  TransferSentEventObject
>;

export type TransferSentEventFilter = TypedEventFilter<TransferSentEvent>;

export interface logEventObject {
  arg0: string;
}
export type logEvent = TypedEvent<[string], logEventObject>;

export type logEventFilter = TypedEventFilter<logEvent>;

export interface log_addressEventObject {
  arg0: string;
}
export type log_addressEvent = TypedEvent<[string], log_addressEventObject>;

export type log_addressEventFilter = TypedEventFilter<log_addressEvent>;

export interface log_array_uint256_array_EventObject {
  val: BigNumber[];
}
export type log_array_uint256_array_Event = TypedEvent<
  [BigNumber[]],
  log_array_uint256_array_EventObject
>;

export type log_array_uint256_array_EventFilter =
  TypedEventFilter<log_array_uint256_array_Event>;

export interface log_array_int256_array_EventObject {
  val: BigNumber[];
}
export type log_array_int256_array_Event = TypedEvent<
  [BigNumber[]],
  log_array_int256_array_EventObject
>;

export type log_array_int256_array_EventFilter =
  TypedEventFilter<log_array_int256_array_Event>;

export interface log_array_address_array_EventObject {
  val: string[];
}
export type log_array_address_array_Event = TypedEvent<
  [string[]],
  log_array_address_array_EventObject
>;

export type log_array_address_array_EventFilter =
  TypedEventFilter<log_array_address_array_Event>;

export interface log_bytesEventObject {
  arg0: string;
}
export type log_bytesEvent = TypedEvent<[string], log_bytesEventObject>;

export type log_bytesEventFilter = TypedEventFilter<log_bytesEvent>;

export interface log_bytes32EventObject {
  arg0: string;
}
export type log_bytes32Event = TypedEvent<[string], log_bytes32EventObject>;

export type log_bytes32EventFilter = TypedEventFilter<log_bytes32Event>;

export interface log_intEventObject {
  arg0: BigNumber;
}
export type log_intEvent = TypedEvent<[BigNumber], log_intEventObject>;

export type log_intEventFilter = TypedEventFilter<log_intEvent>;

export interface log_named_addressEventObject {
  key: string;
  val: string;
}
export type log_named_addressEvent = TypedEvent<
  [string, string],
  log_named_addressEventObject
>;

export type log_named_addressEventFilter =
  TypedEventFilter<log_named_addressEvent>;

export interface log_named_array_string_uint256_array_EventObject {
  key: string;
  val: BigNumber[];
}
export type log_named_array_string_uint256_array_Event = TypedEvent<
  [string, BigNumber[]],
  log_named_array_string_uint256_array_EventObject
>;

export type log_named_array_string_uint256_array_EventFilter =
  TypedEventFilter<log_named_array_string_uint256_array_Event>;

export interface log_named_array_string_int256_array_EventObject {
  key: string;
  val: BigNumber[];
}
export type log_named_array_string_int256_array_Event = TypedEvent<
  [string, BigNumber[]],
  log_named_array_string_int256_array_EventObject
>;

export type log_named_array_string_int256_array_EventFilter =
  TypedEventFilter<log_named_array_string_int256_array_Event>;

export interface log_named_array_string_address_array_EventObject {
  key: string;
  val: string[];
}
export type log_named_array_string_address_array_Event = TypedEvent<
  [string, string[]],
  log_named_array_string_address_array_EventObject
>;

export type log_named_array_string_address_array_EventFilter =
  TypedEventFilter<log_named_array_string_address_array_Event>;

export interface log_named_bytesEventObject {
  key: string;
  val: string;
}
export type log_named_bytesEvent = TypedEvent<
  [string, string],
  log_named_bytesEventObject
>;

export type log_named_bytesEventFilter = TypedEventFilter<log_named_bytesEvent>;

export interface log_named_bytes32EventObject {
  key: string;
  val: string;
}
export type log_named_bytes32Event = TypedEvent<
  [string, string],
  log_named_bytes32EventObject
>;

export type log_named_bytes32EventFilter =
  TypedEventFilter<log_named_bytes32Event>;

export interface log_named_decimal_intEventObject {
  key: string;
  val: BigNumber;
  decimals: BigNumber;
}
export type log_named_decimal_intEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  log_named_decimal_intEventObject
>;

export type log_named_decimal_intEventFilter =
  TypedEventFilter<log_named_decimal_intEvent>;

export interface log_named_decimal_uintEventObject {
  key: string;
  val: BigNumber;
  decimals: BigNumber;
}
export type log_named_decimal_uintEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  log_named_decimal_uintEventObject
>;

export type log_named_decimal_uintEventFilter =
  TypedEventFilter<log_named_decimal_uintEvent>;

export interface log_named_intEventObject {
  key: string;
  val: BigNumber;
}
export type log_named_intEvent = TypedEvent<
  [string, BigNumber],
  log_named_intEventObject
>;

export type log_named_intEventFilter = TypedEventFilter<log_named_intEvent>;

export interface log_named_stringEventObject {
  key: string;
  val: string;
}
export type log_named_stringEvent = TypedEvent<
  [string, string],
  log_named_stringEventObject
>;

export type log_named_stringEventFilter =
  TypedEventFilter<log_named_stringEvent>;

export interface log_named_uintEventObject {
  key: string;
  val: BigNumber;
}
export type log_named_uintEvent = TypedEvent<
  [string, BigNumber],
  log_named_uintEventObject
>;

export type log_named_uintEventFilter = TypedEventFilter<log_named_uintEvent>;

export interface log_stringEventObject {
  arg0: string;
}
export type log_stringEvent = TypedEvent<[string], log_stringEventObject>;

export type log_stringEventFilter = TypedEventFilter<log_stringEvent>;

export interface log_uintEventObject {
  arg0: BigNumber;
}
export type log_uintEvent = TypedEvent<[BigNumber], log_uintEventObject>;

export type log_uintEventFilter = TypedEventFilter<log_uintEvent>;

export interface logsEventObject {
  arg0: string;
}
export type logsEvent = TypedEvent<[string], logsEventObject>;

export type logsEventFilter = TypedEventFilter<logsEvent>;

export interface TestNttManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TestNttManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    IS_TEST(overrides?: CallOverrides): Promise<[boolean]>;

    excludeArtifacts(
      overrides?: CallOverrides
    ): Promise<[string[]] & { excludedArtifacts_: string[] }>;

    excludeContracts(
      overrides?: CallOverrides
    ): Promise<[string[]] & { excludedContracts_: string[] }>;

    excludeSenders(
      overrides?: CallOverrides
    ): Promise<[string[]] & { excludedSenders_: string[] }>;

    failed(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setUp(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    targetArtifactSelectors(
      overrides?: CallOverrides
    ): Promise<
      [StdInvariant.FuzzSelectorStructOutput[]] & {
        targetedArtifactSelectors_: StdInvariant.FuzzSelectorStructOutput[];
      }
    >;

    targetArtifacts(
      overrides?: CallOverrides
    ): Promise<[string[]] & { targetedArtifacts_: string[] }>;

    targetContracts(
      overrides?: CallOverrides
    ): Promise<[string[]] & { targetedContracts_: string[] }>;

    targetInterfaces(
      overrides?: CallOverrides
    ): Promise<
      [StdInvariant.FuzzInterfaceStructOutput[]] & {
        targetedInterfaces_: StdInvariant.FuzzInterfaceStructOutput[];
      }
    >;

    targetSelectors(
      overrides?: CallOverrides
    ): Promise<
      [StdInvariant.FuzzSelectorStructOutput[]] & {
        targetedSelectors_: StdInvariant.FuzzSelectorStructOutput[];
      }
    >;

    targetSenders(
      overrides?: CallOverrides
    ): Promise<[string[]] & { targetedSenders_: string[] }>;

    test_attestDisabled(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    test_attestSimple(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    test_attestTwice(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    test_attestationQuorum(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    test_canSetThreshold(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    test_cantEnableTransceiverTwice(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    test_cantSetThresholdToZero(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    test_cantSetThresholdTooHigh(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    test_constructor(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    test_countSetBits(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    test_disableReenableTransceiver(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    test_dustReverts(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    test_multipleTransceivers(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    test_noAutomaticSlot(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    test_notTransceiver(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    test_onlyEnabledTransceiversCanAttest(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    test_onlyOwnerCanModifyTransceivers(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    test_onlyOwnerCanSetThreshold(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    test_onlyOwnerCanTransferOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    test_onlyPeerNttManagerCanAttest(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    test_owner(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    test_registerTransceiver(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    test_transceiverIncompatibleNttManager(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    test_transceiverWrongNttManager(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    test_transferOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    test_transfer_sequences(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    test_upgradeNttManager(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  IS_TEST(overrides?: CallOverrides): Promise<boolean>;

  excludeArtifacts(overrides?: CallOverrides): Promise<string[]>;

  excludeContracts(overrides?: CallOverrides): Promise<string[]>;

  excludeSenders(overrides?: CallOverrides): Promise<string[]>;

  failed(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setUp(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  targetArtifactSelectors(
    overrides?: CallOverrides
  ): Promise<StdInvariant.FuzzSelectorStructOutput[]>;

  targetArtifacts(overrides?: CallOverrides): Promise<string[]>;

  targetContracts(overrides?: CallOverrides): Promise<string[]>;

  targetInterfaces(
    overrides?: CallOverrides
  ): Promise<StdInvariant.FuzzInterfaceStructOutput[]>;

  targetSelectors(
    overrides?: CallOverrides
  ): Promise<StdInvariant.FuzzSelectorStructOutput[]>;

  targetSenders(overrides?: CallOverrides): Promise<string[]>;

  test_attestDisabled(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  test_attestSimple(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  test_attestTwice(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  test_attestationQuorum(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  test_canSetThreshold(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  test_cantEnableTransceiverTwice(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  test_cantSetThresholdToZero(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  test_cantSetThresholdTooHigh(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  test_constructor(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  test_countSetBits(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  test_disableReenableTransceiver(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  test_dustReverts(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  test_multipleTransceivers(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  test_noAutomaticSlot(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  test_notTransceiver(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  test_onlyEnabledTransceiversCanAttest(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  test_onlyOwnerCanModifyTransceivers(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  test_onlyOwnerCanSetThreshold(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  test_onlyOwnerCanTransferOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  test_onlyPeerNttManagerCanAttest(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  test_owner(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  test_registerTransceiver(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  test_transceiverIncompatibleNttManager(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  test_transceiverWrongNttManager(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  test_transferOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  test_transfer_sequences(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  test_upgradeNttManager(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    IS_TEST(overrides?: CallOverrides): Promise<boolean>;

    excludeArtifacts(overrides?: CallOverrides): Promise<string[]>;

    excludeContracts(overrides?: CallOverrides): Promise<string[]>;

    excludeSenders(overrides?: CallOverrides): Promise<string[]>;

    failed(overrides?: CallOverrides): Promise<boolean>;

    setUp(overrides?: CallOverrides): Promise<void>;

    targetArtifactSelectors(
      overrides?: CallOverrides
    ): Promise<StdInvariant.FuzzSelectorStructOutput[]>;

    targetArtifacts(overrides?: CallOverrides): Promise<string[]>;

    targetContracts(overrides?: CallOverrides): Promise<string[]>;

    targetInterfaces(
      overrides?: CallOverrides
    ): Promise<StdInvariant.FuzzInterfaceStructOutput[]>;

    targetSelectors(
      overrides?: CallOverrides
    ): Promise<StdInvariant.FuzzSelectorStructOutput[]>;

    targetSenders(overrides?: CallOverrides): Promise<string[]>;

    test_attestDisabled(overrides?: CallOverrides): Promise<void>;

    test_attestSimple(overrides?: CallOverrides): Promise<void>;

    test_attestTwice(overrides?: CallOverrides): Promise<void>;

    test_attestationQuorum(overrides?: CallOverrides): Promise<void>;

    test_canSetThreshold(overrides?: CallOverrides): Promise<void>;

    test_cantEnableTransceiverTwice(overrides?: CallOverrides): Promise<void>;

    test_cantSetThresholdToZero(overrides?: CallOverrides): Promise<void>;

    test_cantSetThresholdTooHigh(overrides?: CallOverrides): Promise<void>;

    test_constructor(overrides?: CallOverrides): Promise<void>;

    test_countSetBits(overrides?: CallOverrides): Promise<void>;

    test_disableReenableTransceiver(overrides?: CallOverrides): Promise<void>;

    test_dustReverts(overrides?: CallOverrides): Promise<void>;

    test_multipleTransceivers(overrides?: CallOverrides): Promise<void>;

    test_noAutomaticSlot(overrides?: CallOverrides): Promise<void>;

    test_notTransceiver(overrides?: CallOverrides): Promise<void>;

    test_onlyEnabledTransceiversCanAttest(
      overrides?: CallOverrides
    ): Promise<void>;

    test_onlyOwnerCanModifyTransceivers(
      overrides?: CallOverrides
    ): Promise<void>;

    test_onlyOwnerCanSetThreshold(overrides?: CallOverrides): Promise<void>;

    test_onlyOwnerCanTransferOwnership(
      overrides?: CallOverrides
    ): Promise<void>;

    test_onlyPeerNttManagerCanAttest(overrides?: CallOverrides): Promise<void>;

    test_owner(overrides?: CallOverrides): Promise<void>;

    test_registerTransceiver(overrides?: CallOverrides): Promise<void>;

    test_transceiverIncompatibleNttManager(
      overrides?: CallOverrides
    ): Promise<void>;

    test_transceiverWrongNttManager(overrides?: CallOverrides): Promise<void>;

    test_transferOwnership(overrides?: CallOverrides): Promise<void>;

    test_transfer_sequences(overrides?: CallOverrides): Promise<void>;

    test_upgradeNttManager(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "InboundTransferQueued(bytes32)"(
      digest?: null
    ): InboundTransferQueuedEventFilter;
    InboundTransferQueued(digest?: null): InboundTransferQueuedEventFilter;

    "MessageAlreadyExecuted(bytes32,bytes32)"(
      sourceNttManager?: BytesLike | null,
      msgHash?: BytesLike | null
    ): MessageAlreadyExecutedEventFilter;
    MessageAlreadyExecuted(
      sourceNttManager?: BytesLike | null,
      msgHash?: BytesLike | null
    ): MessageAlreadyExecutedEventFilter;

    "MessageAttestedTo(bytes32,address,uint8)"(
      digest?: null,
      transceiver?: null,
      index?: null
    ): MessageAttestedToEventFilter;
    MessageAttestedTo(
      digest?: null,
      transceiver?: null,
      index?: null
    ): MessageAttestedToEventFilter;

    "OutboundTransferQueued(uint64)"(
      queueSequence?: null
    ): OutboundTransferQueuedEventFilter;
    OutboundTransferQueued(
      queueSequence?: null
    ): OutboundTransferQueuedEventFilter;

    "OutboundTransferRateLimited(address,uint64,uint256,uint256)"(
      sender?: string | null,
      sequence?: null,
      amount?: null,
      currentCapacity?: null
    ): OutboundTransferRateLimitedEventFilter;
    OutboundTransferRateLimited(
      sender?: string | null,
      sequence?: null,
      amount?: null,
      currentCapacity?: null
    ): OutboundTransferRateLimitedEventFilter;

    "PeerUpdated(uint16,bytes32,bytes32)"(
      chainId_?: BigNumberish | null,
      oldPeerContract?: null,
      peerContract?: null
    ): PeerUpdatedEventFilter;
    PeerUpdated(
      chainId_?: BigNumberish | null,
      oldPeerContract?: null,
      peerContract?: null
    ): PeerUpdatedEventFilter;

    "ThresholdChanged(uint8,uint8)"(
      oldThreshold?: null,
      threshold?: null
    ): ThresholdChangedEventFilter;
    ThresholdChanged(
      oldThreshold?: null,
      threshold?: null
    ): ThresholdChangedEventFilter;

    "TransceiverAdded(address,uint256,uint8)"(
      transceiver?: null,
      transceiversNum?: null,
      threshold?: null
    ): TransceiverAddedEventFilter;
    TransceiverAdded(
      transceiver?: null,
      transceiversNum?: null,
      threshold?: null
    ): TransceiverAddedEventFilter;

    "TransceiverRemoved(address,uint8)"(
      transceiver?: null,
      threshold?: null
    ): TransceiverRemovedEventFilter;
    TransceiverRemoved(
      transceiver?: null,
      threshold?: null
    ): TransceiverRemovedEventFilter;

    "TransferRedeemed(bytes32)"(digest?: null): TransferRedeemedEventFilter;
    TransferRedeemed(digest?: null): TransferRedeemedEventFilter;

    "TransferSent(bytes32,uint256,uint16,uint64)"(
      recipient?: null,
      amount?: null,
      recipientChain?: null,
      msgSequence?: null
    ): TransferSentEventFilter;
    TransferSent(
      recipient?: null,
      amount?: null,
      recipientChain?: null,
      msgSequence?: null
    ): TransferSentEventFilter;

    "log(string)"(arg0?: null): logEventFilter;
    log(arg0?: null): logEventFilter;

    "log_address(address)"(arg0?: null): log_addressEventFilter;
    log_address(arg0?: null): log_addressEventFilter;

    "log_array(uint256[])"(val?: null): log_array_uint256_array_EventFilter;
    "log_array(int256[])"(val?: null): log_array_int256_array_EventFilter;
    "log_array(address[])"(val?: null): log_array_address_array_EventFilter;

    "log_bytes(bytes)"(arg0?: null): log_bytesEventFilter;
    log_bytes(arg0?: null): log_bytesEventFilter;

    "log_bytes32(bytes32)"(arg0?: null): log_bytes32EventFilter;
    log_bytes32(arg0?: null): log_bytes32EventFilter;

    "log_int(int256)"(arg0?: null): log_intEventFilter;
    log_int(arg0?: null): log_intEventFilter;

    "log_named_address(string,address)"(
      key?: null,
      val?: null
    ): log_named_addressEventFilter;
    log_named_address(key?: null, val?: null): log_named_addressEventFilter;

    "log_named_array(string,uint256[])"(
      key?: null,
      val?: null
    ): log_named_array_string_uint256_array_EventFilter;
    "log_named_array(string,int256[])"(
      key?: null,
      val?: null
    ): log_named_array_string_int256_array_EventFilter;
    "log_named_array(string,address[])"(
      key?: null,
      val?: null
    ): log_named_array_string_address_array_EventFilter;

    "log_named_bytes(string,bytes)"(
      key?: null,
      val?: null
    ): log_named_bytesEventFilter;
    log_named_bytes(key?: null, val?: null): log_named_bytesEventFilter;

    "log_named_bytes32(string,bytes32)"(
      key?: null,
      val?: null
    ): log_named_bytes32EventFilter;
    log_named_bytes32(key?: null, val?: null): log_named_bytes32EventFilter;

    "log_named_decimal_int(string,int256,uint256)"(
      key?: null,
      val?: null,
      decimals?: null
    ): log_named_decimal_intEventFilter;
    log_named_decimal_int(
      key?: null,
      val?: null,
      decimals?: null
    ): log_named_decimal_intEventFilter;

    "log_named_decimal_uint(string,uint256,uint256)"(
      key?: null,
      val?: null,
      decimals?: null
    ): log_named_decimal_uintEventFilter;
    log_named_decimal_uint(
      key?: null,
      val?: null,
      decimals?: null
    ): log_named_decimal_uintEventFilter;

    "log_named_int(string,int256)"(
      key?: null,
      val?: null
    ): log_named_intEventFilter;
    log_named_int(key?: null, val?: null): log_named_intEventFilter;

    "log_named_string(string,string)"(
      key?: null,
      val?: null
    ): log_named_stringEventFilter;
    log_named_string(key?: null, val?: null): log_named_stringEventFilter;

    "log_named_uint(string,uint256)"(
      key?: null,
      val?: null
    ): log_named_uintEventFilter;
    log_named_uint(key?: null, val?: null): log_named_uintEventFilter;

    "log_string(string)"(arg0?: null): log_stringEventFilter;
    log_string(arg0?: null): log_stringEventFilter;

    "log_uint(uint256)"(arg0?: null): log_uintEventFilter;
    log_uint(arg0?: null): log_uintEventFilter;

    "logs(bytes)"(arg0?: null): logsEventFilter;
    logs(arg0?: null): logsEventFilter;
  };

  estimateGas: {
    IS_TEST(overrides?: CallOverrides): Promise<BigNumber>;

    excludeArtifacts(overrides?: CallOverrides): Promise<BigNumber>;

    excludeContracts(overrides?: CallOverrides): Promise<BigNumber>;

    excludeSenders(overrides?: CallOverrides): Promise<BigNumber>;

    failed(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    setUp(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    targetArtifactSelectors(overrides?: CallOverrides): Promise<BigNumber>;

    targetArtifacts(overrides?: CallOverrides): Promise<BigNumber>;

    targetContracts(overrides?: CallOverrides): Promise<BigNumber>;

    targetInterfaces(overrides?: CallOverrides): Promise<BigNumber>;

    targetSelectors(overrides?: CallOverrides): Promise<BigNumber>;

    targetSenders(overrides?: CallOverrides): Promise<BigNumber>;

    test_attestDisabled(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    test_attestSimple(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    test_attestTwice(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    test_attestationQuorum(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    test_canSetThreshold(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    test_cantEnableTransceiverTwice(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    test_cantSetThresholdToZero(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    test_cantSetThresholdTooHigh(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    test_constructor(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    test_countSetBits(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    test_disableReenableTransceiver(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    test_dustReverts(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    test_multipleTransceivers(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    test_noAutomaticSlot(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    test_notTransceiver(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    test_onlyEnabledTransceiversCanAttest(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    test_onlyOwnerCanModifyTransceivers(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    test_onlyOwnerCanSetThreshold(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    test_onlyOwnerCanTransferOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    test_onlyPeerNttManagerCanAttest(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    test_owner(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    test_registerTransceiver(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    test_transceiverIncompatibleNttManager(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    test_transceiverWrongNttManager(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    test_transferOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    test_transfer_sequences(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    test_upgradeNttManager(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    IS_TEST(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    excludeArtifacts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    excludeContracts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    excludeSenders(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    failed(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setUp(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    targetArtifactSelectors(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    targetArtifacts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    targetContracts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    targetInterfaces(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    targetSelectors(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    targetSenders(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    test_attestDisabled(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    test_attestSimple(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    test_attestTwice(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    test_attestationQuorum(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    test_canSetThreshold(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    test_cantEnableTransceiverTwice(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    test_cantSetThresholdToZero(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    test_cantSetThresholdTooHigh(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    test_constructor(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    test_countSetBits(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    test_disableReenableTransceiver(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    test_dustReverts(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    test_multipleTransceivers(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    test_noAutomaticSlot(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    test_notTransceiver(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    test_onlyEnabledTransceiversCanAttest(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    test_onlyOwnerCanModifyTransceivers(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    test_onlyOwnerCanSetThreshold(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    test_onlyOwnerCanTransferOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    test_onlyPeerNttManagerCanAttest(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    test_owner(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    test_registerTransceiver(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    test_transceiverIncompatibleNttManager(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    test_transceiverWrongNttManager(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    test_transferOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    test_transfer_sequences(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    test_upgradeNttManager(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
