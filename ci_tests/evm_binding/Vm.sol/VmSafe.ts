/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export declare namespace VmSafe {
  export type WalletStruct = {
    addr: string;
    publicKeyX: BigNumberish;
    publicKeyY: BigNumberish;
    privateKey: BigNumberish;
  };

  export type WalletStructOutput = [string, BigNumber, BigNumber, BigNumber] & {
    addr: string;
    publicKeyX: BigNumber;
    publicKeyY: BigNumber;
    privateKey: BigNumber;
  };

  export type EthGetLogsStruct = {
    emitter: string;
    topics: BytesLike[];
    data: BytesLike;
    blockHash: BytesLike;
    blockNumber: BigNumberish;
    transactionHash: BytesLike;
    transactionIndex: BigNumberish;
    logIndex: BigNumberish;
    removed: boolean;
  };

  export type EthGetLogsStructOutput = [
    string,
    string[],
    string,
    string,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    boolean
  ] & {
    emitter: string;
    topics: string[];
    data: string;
    blockHash: string;
    blockNumber: BigNumber;
    transactionHash: string;
    transactionIndex: BigNumber;
    logIndex: BigNumber;
    removed: boolean;
  };

  export type FsMetadataStruct = {
    isDir: boolean;
    isSymlink: boolean;
    length: BigNumberish;
    readOnly: boolean;
    modified: BigNumberish;
    accessed: BigNumberish;
    created: BigNumberish;
  };

  export type FsMetadataStructOutput = [
    boolean,
    boolean,
    BigNumber,
    boolean,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    isDir: boolean;
    isSymlink: boolean;
    length: BigNumber;
    readOnly: boolean;
    modified: BigNumber;
    accessed: BigNumber;
    created: BigNumber;
  };

  export type LogStruct = {
    topics: BytesLike[];
    data: BytesLike;
    emitter: string;
  };

  export type LogStructOutput = [string[], string, string] & {
    topics: string[];
    data: string;
    emitter: string;
  };

  export type DirEntryStruct = {
    errorMessage: string;
    path: string;
    depth: BigNumberish;
    isDir: boolean;
    isSymlink: boolean;
  };

  export type DirEntryStructOutput = [
    string,
    string,
    BigNumber,
    boolean,
    boolean
  ] & {
    errorMessage: string;
    path: string;
    depth: BigNumber;
    isDir: boolean;
    isSymlink: boolean;
  };

  export type RpcStruct = { key: string; url: string };

  export type RpcStructOutput = [string, string] & { key: string; url: string };

  export type ChainInfoStruct = { forkId: BigNumberish; chainId: BigNumberish };

  export type ChainInfoStructOutput = [BigNumber, BigNumber] & {
    forkId: BigNumber;
    chainId: BigNumber;
  };

  export type StorageAccessStruct = {
    account: string;
    slot: BytesLike;
    isWrite: boolean;
    previousValue: BytesLike;
    newValue: BytesLike;
    reverted: boolean;
  };

  export type StorageAccessStructOutput = [
    string,
    string,
    boolean,
    string,
    string,
    boolean
  ] & {
    account: string;
    slot: string;
    isWrite: boolean;
    previousValue: string;
    newValue: string;
    reverted: boolean;
  };

  export type AccountAccessStruct = {
    chainInfo: VmSafe.ChainInfoStruct;
    kind: BigNumberish;
    account: string;
    accessor: string;
    initialized: boolean;
    oldBalance: BigNumberish;
    newBalance: BigNumberish;
    deployedCode: BytesLike;
    value: BigNumberish;
    data: BytesLike;
    reverted: boolean;
    storageAccesses: VmSafe.StorageAccessStruct[];
  };

  export type AccountAccessStructOutput = [
    VmSafe.ChainInfoStructOutput,
    number,
    string,
    string,
    boolean,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    string,
    boolean,
    VmSafe.StorageAccessStructOutput[]
  ] & {
    chainInfo: VmSafe.ChainInfoStructOutput;
    kind: number;
    account: string;
    accessor: string;
    initialized: boolean;
    oldBalance: BigNumber;
    newBalance: BigNumber;
    deployedCode: string;
    value: BigNumber;
    data: string;
    reverted: boolean;
    storageAccesses: VmSafe.StorageAccessStructOutput[];
  };

  export type FfiResultStruct = {
    exitCode: BigNumberish;
    stdout: BytesLike;
    stderr: BytesLike;
  };

  export type FfiResultStructOutput = [number, string, string] & {
    exitCode: number;
    stdout: string;
    stderr: string;
  };
}

export interface VmSafeInterface extends utils.Interface {
  functions: {
    "accesses(address)": FunctionFragment;
    "addr(uint256)": FunctionFragment;
    "assume(bool)": FunctionFragment;
    "breakpoint(string)": FunctionFragment;
    "breakpoint(string,bool)": FunctionFragment;
    "broadcast()": FunctionFragment;
    "broadcast(address)": FunctionFragment;
    "broadcast(uint256)": FunctionFragment;
    "closeFile(string)": FunctionFragment;
    "computeCreate2Address(bytes32,bytes32)": FunctionFragment;
    "computeCreate2Address(bytes32,bytes32,address)": FunctionFragment;
    "computeCreateAddress(address,uint256)": FunctionFragment;
    "copyFile(string,string)": FunctionFragment;
    "createDir(string,bool)": FunctionFragment;
    "createWallet(string)": FunctionFragment;
    "createWallet(uint256)": FunctionFragment;
    "createWallet(uint256,string)": FunctionFragment;
    "deriveKey(string,string,uint32,string)": FunctionFragment;
    "deriveKey(string,uint32,string)": FunctionFragment;
    "deriveKey(string,uint32)": FunctionFragment;
    "deriveKey(string,string,uint32)": FunctionFragment;
    "envAddress(string)": FunctionFragment;
    "envAddress(string,string)": FunctionFragment;
    "envBool(string)": FunctionFragment;
    "envBool(string,string)": FunctionFragment;
    "envBytes(string)": FunctionFragment;
    "envBytes(string,string)": FunctionFragment;
    "envBytes32(string,string)": FunctionFragment;
    "envBytes32(string)": FunctionFragment;
    "envInt(string,string)": FunctionFragment;
    "envInt(string)": FunctionFragment;
    "envOr(string,string,bytes32[])": FunctionFragment;
    "envOr(string,string,int256[])": FunctionFragment;
    "envOr(string,bool)": FunctionFragment;
    "envOr(string,address)": FunctionFragment;
    "envOr(string,uint256)": FunctionFragment;
    "envOr(string,string,bytes[])": FunctionFragment;
    "envOr(string,string,uint256[])": FunctionFragment;
    "envOr(string,string,string[])": FunctionFragment;
    "envOr(string,bytes)": FunctionFragment;
    "envOr(string,bytes32)": FunctionFragment;
    "envOr(string,int256)": FunctionFragment;
    "envOr(string,string,address[])": FunctionFragment;
    "envOr(string,string)": FunctionFragment;
    "envOr(string,string,bool[])": FunctionFragment;
    "envString(string,string)": FunctionFragment;
    "envString(string)": FunctionFragment;
    "envUint(string)": FunctionFragment;
    "envUint(string,string)": FunctionFragment;
    "eth_getLogs(uint256,uint256,address,bytes32[])": FunctionFragment;
    "exists(string)": FunctionFragment;
    "ffi(string[])": FunctionFragment;
    "fsMetadata(string)": FunctionFragment;
    "getBlockNumber()": FunctionFragment;
    "getBlockTimestamp()": FunctionFragment;
    "getCode(string)": FunctionFragment;
    "getDeployedCode(string)": FunctionFragment;
    "getLabel(address)": FunctionFragment;
    "getMappingKeyAndParentOf(address,bytes32)": FunctionFragment;
    "getMappingLength(address,bytes32)": FunctionFragment;
    "getMappingSlotAt(address,bytes32,uint256)": FunctionFragment;
    "getNonce(address)": FunctionFragment;
    "getNonce((address,uint256,uint256,uint256))": FunctionFragment;
    "getRecordedLogs()": FunctionFragment;
    "isDir(string)": FunctionFragment;
    "isFile(string)": FunctionFragment;
    "keyExists(string,string)": FunctionFragment;
    "label(address,string)": FunctionFragment;
    "load(address,bytes32)": FunctionFragment;
    "parseAddress(string)": FunctionFragment;
    "parseBool(string)": FunctionFragment;
    "parseBytes(string)": FunctionFragment;
    "parseBytes32(string)": FunctionFragment;
    "parseInt(string)": FunctionFragment;
    "parseJson(string)": FunctionFragment;
    "parseJson(string,string)": FunctionFragment;
    "parseJsonAddress(string,string)": FunctionFragment;
    "parseJsonAddressArray(string,string)": FunctionFragment;
    "parseJsonBool(string,string)": FunctionFragment;
    "parseJsonBoolArray(string,string)": FunctionFragment;
    "parseJsonBytes(string,string)": FunctionFragment;
    "parseJsonBytes32(string,string)": FunctionFragment;
    "parseJsonBytes32Array(string,string)": FunctionFragment;
    "parseJsonBytesArray(string,string)": FunctionFragment;
    "parseJsonInt(string,string)": FunctionFragment;
    "parseJsonIntArray(string,string)": FunctionFragment;
    "parseJsonKeys(string,string)": FunctionFragment;
    "parseJsonString(string,string)": FunctionFragment;
    "parseJsonStringArray(string,string)": FunctionFragment;
    "parseJsonUint(string,string)": FunctionFragment;
    "parseJsonUintArray(string,string)": FunctionFragment;
    "parseUint(string)": FunctionFragment;
    "pauseGasMetering()": FunctionFragment;
    "projectRoot()": FunctionFragment;
    "readDir(string,uint64)": FunctionFragment;
    "readDir(string,uint64,bool)": FunctionFragment;
    "readDir(string)": FunctionFragment;
    "readFile(string)": FunctionFragment;
    "readFileBinary(string)": FunctionFragment;
    "readLine(string)": FunctionFragment;
    "readLink(string)": FunctionFragment;
    "record()": FunctionFragment;
    "recordLogs()": FunctionFragment;
    "rememberKey(uint256)": FunctionFragment;
    "removeDir(string,bool)": FunctionFragment;
    "removeFile(string)": FunctionFragment;
    "resumeGasMetering()": FunctionFragment;
    "rpc(string,string)": FunctionFragment;
    "rpcUrl(string)": FunctionFragment;
    "rpcUrlStructs()": FunctionFragment;
    "rpcUrls()": FunctionFragment;
    "serializeAddress(string,string,address[])": FunctionFragment;
    "serializeAddress(string,string,address)": FunctionFragment;
    "serializeBool(string,string,bool[])": FunctionFragment;
    "serializeBool(string,string,bool)": FunctionFragment;
    "serializeBytes(string,string,bytes[])": FunctionFragment;
    "serializeBytes(string,string,bytes)": FunctionFragment;
    "serializeBytes32(string,string,bytes32[])": FunctionFragment;
    "serializeBytes32(string,string,bytes32)": FunctionFragment;
    "serializeInt(string,string,int256)": FunctionFragment;
    "serializeInt(string,string,int256[])": FunctionFragment;
    "serializeJson(string,string)": FunctionFragment;
    "serializeString(string,string,string[])": FunctionFragment;
    "serializeString(string,string,string)": FunctionFragment;
    "serializeUint(string,string,uint256)": FunctionFragment;
    "serializeUint(string,string,uint256[])": FunctionFragment;
    "setEnv(string,string)": FunctionFragment;
    "sign((address,uint256,uint256,uint256),bytes32)": FunctionFragment;
    "sign(uint256,bytes32)": FunctionFragment;
    "sleep(uint256)": FunctionFragment;
    "startBroadcast()": FunctionFragment;
    "startBroadcast(address)": FunctionFragment;
    "startBroadcast(uint256)": FunctionFragment;
    "startMappingRecording()": FunctionFragment;
    "startStateDiffRecording()": FunctionFragment;
    "stopAndReturnStateDiff()": FunctionFragment;
    "stopBroadcast()": FunctionFragment;
    "stopMappingRecording()": FunctionFragment;
    "toString(address)": FunctionFragment;
    "toString(uint256)": FunctionFragment;
    "toString(bytes)": FunctionFragment;
    "toString(bool)": FunctionFragment;
    "toString(int256)": FunctionFragment;
    "toString(bytes32)": FunctionFragment;
    "tryFfi(string[])": FunctionFragment;
    "unixTime()": FunctionFragment;
    "writeFile(string,string)": FunctionFragment;
    "writeFileBinary(string,bytes)": FunctionFragment;
    "writeJson(string,string,string)": FunctionFragment;
    "writeJson(string,string)": FunctionFragment;
    "writeLine(string,string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "accesses"
      | "addr"
      | "assume"
      | "breakpoint(string)"
      | "breakpoint(string,bool)"
      | "broadcast()"
      | "broadcast(address)"
      | "broadcast(uint256)"
      | "closeFile"
      | "computeCreate2Address(bytes32,bytes32)"
      | "computeCreate2Address(bytes32,bytes32,address)"
      | "computeCreateAddress"
      | "copyFile"
      | "createDir"
      | "createWallet(string)"
      | "createWallet(uint256)"
      | "createWallet(uint256,string)"
      | "deriveKey(string,string,uint32,string)"
      | "deriveKey(string,uint32,string)"
      | "deriveKey(string,uint32)"
      | "deriveKey(string,string,uint32)"
      | "envAddress(string)"
      | "envAddress(string,string)"
      | "envBool(string)"
      | "envBool(string,string)"
      | "envBytes(string)"
      | "envBytes(string,string)"
      | "envBytes32(string,string)"
      | "envBytes32(string)"
      | "envInt(string,string)"
      | "envInt(string)"
      | "envOr(string,string,bytes32[])"
      | "envOr(string,string,int256[])"
      | "envOr(string,bool)"
      | "envOr(string,address)"
      | "envOr(string,uint256)"
      | "envOr(string,string,bytes[])"
      | "envOr(string,string,uint256[])"
      | "envOr(string,string,string[])"
      | "envOr(string,bytes)"
      | "envOr(string,bytes32)"
      | "envOr(string,int256)"
      | "envOr(string,string,address[])"
      | "envOr(string,string)"
      | "envOr(string,string,bool[])"
      | "envString(string,string)"
      | "envString(string)"
      | "envUint(string)"
      | "envUint(string,string)"
      | "eth_getLogs"
      | "exists"
      | "ffi"
      | "fsMetadata"
      | "getBlockNumber"
      | "getBlockTimestamp"
      | "getCode"
      | "getDeployedCode"
      | "getLabel"
      | "getMappingKeyAndParentOf"
      | "getMappingLength"
      | "getMappingSlotAt"
      | "getNonce(address)"
      | "getNonce((address,uint256,uint256,uint256))"
      | "getRecordedLogs"
      | "isDir"
      | "isFile"
      | "keyExists"
      | "label"
      | "load"
      | "parseAddress"
      | "parseBool"
      | "parseBytes"
      | "parseBytes32"
      | "parseInt"
      | "parseJson(string)"
      | "parseJson(string,string)"
      | "parseJsonAddress"
      | "parseJsonAddressArray"
      | "parseJsonBool"
      | "parseJsonBoolArray"
      | "parseJsonBytes"
      | "parseJsonBytes32"
      | "parseJsonBytes32Array"
      | "parseJsonBytesArray"
      | "parseJsonInt"
      | "parseJsonIntArray"
      | "parseJsonKeys"
      | "parseJsonString"
      | "parseJsonStringArray"
      | "parseJsonUint"
      | "parseJsonUintArray"
      | "parseUint"
      | "pauseGasMetering"
      | "projectRoot"
      | "readDir(string,uint64)"
      | "readDir(string,uint64,bool)"
      | "readDir(string)"
      | "readFile"
      | "readFileBinary"
      | "readLine"
      | "readLink"
      | "record"
      | "recordLogs"
      | "rememberKey"
      | "removeDir"
      | "removeFile"
      | "resumeGasMetering"
      | "rpc"
      | "rpcUrl"
      | "rpcUrlStructs"
      | "rpcUrls"
      | "serializeAddress(string,string,address[])"
      | "serializeAddress(string,string,address)"
      | "serializeBool(string,string,bool[])"
      | "serializeBool(string,string,bool)"
      | "serializeBytes(string,string,bytes[])"
      | "serializeBytes(string,string,bytes)"
      | "serializeBytes32(string,string,bytes32[])"
      | "serializeBytes32(string,string,bytes32)"
      | "serializeInt(string,string,int256)"
      | "serializeInt(string,string,int256[])"
      | "serializeJson"
      | "serializeString(string,string,string[])"
      | "serializeString(string,string,string)"
      | "serializeUint(string,string,uint256)"
      | "serializeUint(string,string,uint256[])"
      | "setEnv"
      | "sign((address,uint256,uint256,uint256),bytes32)"
      | "sign(uint256,bytes32)"
      | "sleep"
      | "startBroadcast()"
      | "startBroadcast(address)"
      | "startBroadcast(uint256)"
      | "startMappingRecording"
      | "startStateDiffRecording"
      | "stopAndReturnStateDiff"
      | "stopBroadcast"
      | "stopMappingRecording"
      | "toString(address)"
      | "toString(uint256)"
      | "toString(bytes)"
      | "toString(bool)"
      | "toString(int256)"
      | "toString(bytes32)"
      | "tryFfi"
      | "unixTime"
      | "writeFile"
      | "writeFileBinary"
      | "writeJson(string,string,string)"
      | "writeJson(string,string)"
      | "writeLine"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "accesses", values: [string]): string;
  encodeFunctionData(functionFragment: "addr", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "assume", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "breakpoint(string)",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "breakpoint(string,bool)",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "broadcast()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "broadcast(address)",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "broadcast(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "closeFile", values: [string]): string;
  encodeFunctionData(
    functionFragment: "computeCreate2Address(bytes32,bytes32)",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "computeCreate2Address(bytes32,bytes32,address)",
    values: [BytesLike, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "computeCreateAddress",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "copyFile",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createDir",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "createWallet(string)",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "createWallet(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createWallet(uint256,string)",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "deriveKey(string,string,uint32,string)",
    values: [string, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "deriveKey(string,uint32,string)",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "deriveKey(string,uint32)",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deriveKey(string,string,uint32)",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "envAddress(string)",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "envAddress(string,string)",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "envBool(string)",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "envBool(string,string)",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "envBytes(string)",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "envBytes(string,string)",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "envBytes32(string,string)",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "envBytes32(string)",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "envInt(string,string)",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "envInt(string)",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "envOr(string,string,bytes32[])",
    values: [string, string, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "envOr(string,string,int256[])",
    values: [string, string, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "envOr(string,bool)",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "envOr(string,address)",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "envOr(string,uint256)",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "envOr(string,string,bytes[])",
    values: [string, string, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "envOr(string,string,uint256[])",
    values: [string, string, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "envOr(string,string,string[])",
    values: [string, string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "envOr(string,bytes)",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "envOr(string,bytes32)",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "envOr(string,int256)",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "envOr(string,string,address[])",
    values: [string, string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "envOr(string,string)",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "envOr(string,string,bool[])",
    values: [string, string, boolean[]]
  ): string;
  encodeFunctionData(
    functionFragment: "envString(string,string)",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "envString(string)",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "envUint(string)",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "envUint(string,string)",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "eth_getLogs",
    values: [BigNumberish, BigNumberish, string, BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "exists", values: [string]): string;
  encodeFunctionData(functionFragment: "ffi", values: [string[]]): string;
  encodeFunctionData(functionFragment: "fsMetadata", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getBlockNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBlockTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getCode", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getDeployedCode",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getLabel", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getMappingKeyAndParentOf",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMappingLength",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMappingSlotAt",
    values: [string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNonce(address)",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getNonce((address,uint256,uint256,uint256))",
    values: [VmSafe.WalletStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getRecordedLogs",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isDir", values: [string]): string;
  encodeFunctionData(functionFragment: "isFile", values: [string]): string;
  encodeFunctionData(
    functionFragment: "keyExists",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "label",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "load",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "parseAddress",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "parseBool", values: [string]): string;
  encodeFunctionData(functionFragment: "parseBytes", values: [string]): string;
  encodeFunctionData(
    functionFragment: "parseBytes32",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "parseInt", values: [string]): string;
  encodeFunctionData(
    functionFragment: "parseJson(string)",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "parseJson(string,string)",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "parseJsonAddress",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "parseJsonAddressArray",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "parseJsonBool",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "parseJsonBoolArray",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "parseJsonBytes",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "parseJsonBytes32",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "parseJsonBytes32Array",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "parseJsonBytesArray",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "parseJsonInt",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "parseJsonIntArray",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "parseJsonKeys",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "parseJsonString",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "parseJsonStringArray",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "parseJsonUint",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "parseJsonUintArray",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "parseUint", values: [string]): string;
  encodeFunctionData(
    functionFragment: "pauseGasMetering",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "projectRoot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "readDir(string,uint64)",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "readDir(string,uint64,bool)",
    values: [string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "readDir(string)",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "readFile", values: [string]): string;
  encodeFunctionData(
    functionFragment: "readFileBinary",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "readLine", values: [string]): string;
  encodeFunctionData(functionFragment: "readLink", values: [string]): string;
  encodeFunctionData(functionFragment: "record", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "recordLogs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rememberKey",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeDir",
    values: [string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "removeFile", values: [string]): string;
  encodeFunctionData(
    functionFragment: "resumeGasMetering",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rpc", values: [string, string]): string;
  encodeFunctionData(functionFragment: "rpcUrl", values: [string]): string;
  encodeFunctionData(
    functionFragment: "rpcUrlStructs",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rpcUrls", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "serializeAddress(string,string,address[])",
    values: [string, string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "serializeAddress(string,string,address)",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "serializeBool(string,string,bool[])",
    values: [string, string, boolean[]]
  ): string;
  encodeFunctionData(
    functionFragment: "serializeBool(string,string,bool)",
    values: [string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "serializeBytes(string,string,bytes[])",
    values: [string, string, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "serializeBytes(string,string,bytes)",
    values: [string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "serializeBytes32(string,string,bytes32[])",
    values: [string, string, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "serializeBytes32(string,string,bytes32)",
    values: [string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "serializeInt(string,string,int256)",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "serializeInt(string,string,int256[])",
    values: [string, string, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "serializeJson",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "serializeString(string,string,string[])",
    values: [string, string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "serializeString(string,string,string)",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "serializeUint(string,string,uint256)",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "serializeUint(string,string,uint256[])",
    values: [string, string, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setEnv",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "sign((address,uint256,uint256,uint256),bytes32)",
    values: [VmSafe.WalletStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sign(uint256,bytes32)",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "sleep", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "startBroadcast()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "startBroadcast(address)",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "startBroadcast(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "startMappingRecording",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "startStateDiffRecording",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stopAndReturnStateDiff",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stopBroadcast",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stopMappingRecording",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "toString(address)",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "toString(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toString(bytes)",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "toString(bool)",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "toString(int256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toString(bytes32)",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "tryFfi", values: [string[]]): string;
  encodeFunctionData(functionFragment: "unixTime", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "writeFile",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "writeFileBinary",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "writeJson(string,string,string)",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "writeJson(string,string)",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "writeLine",
    values: [string, string]
  ): string;

  decodeFunctionResult(functionFragment: "accesses", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addr", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "assume", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "breakpoint(string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "breakpoint(string,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "broadcast()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "broadcast(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "broadcast(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "closeFile", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "computeCreate2Address(bytes32,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeCreate2Address(bytes32,bytes32,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeCreateAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "copyFile", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createDir", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createWallet(string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createWallet(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createWallet(uint256,string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deriveKey(string,string,uint32,string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deriveKey(string,uint32,string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deriveKey(string,uint32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deriveKey(string,string,uint32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "envAddress(string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "envAddress(string,string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "envBool(string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "envBool(string,string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "envBytes(string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "envBytes(string,string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "envBytes32(string,string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "envBytes32(string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "envInt(string,string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "envInt(string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "envOr(string,string,bytes32[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "envOr(string,string,int256[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "envOr(string,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "envOr(string,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "envOr(string,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "envOr(string,string,bytes[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "envOr(string,string,uint256[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "envOr(string,string,string[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "envOr(string,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "envOr(string,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "envOr(string,int256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "envOr(string,string,address[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "envOr(string,string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "envOr(string,string,bool[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "envString(string,string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "envString(string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "envUint(string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "envUint(string,string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eth_getLogs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exists", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ffi", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fsMetadata", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlockTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getCode", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDeployedCode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getLabel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMappingKeyAndParentOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMappingLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMappingSlotAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNonce(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNonce((address,uint256,uint256,uint256))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRecordedLogs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isDir", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isFile", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "keyExists", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "label", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "load", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "parseAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "parseBool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "parseBytes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "parseBytes32",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "parseInt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "parseJson(string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parseJson(string,string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parseJsonAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parseJsonAddressArray",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parseJsonBool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parseJsonBoolArray",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parseJsonBytes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parseJsonBytes32",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parseJsonBytes32Array",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parseJsonBytesArray",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parseJsonInt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parseJsonIntArray",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parseJsonKeys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parseJsonString",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parseJsonStringArray",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parseJsonUint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parseJsonUintArray",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "parseUint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pauseGasMetering",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "projectRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "readDir(string,uint64)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "readDir(string,uint64,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "readDir(string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "readFile", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "readFileBinary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "readLine", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "readLink", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "record", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "recordLogs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rememberKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "removeDir", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "removeFile", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "resumeGasMetering",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rpc", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rpcUrl", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rpcUrlStructs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rpcUrls", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "serializeAddress(string,string,address[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "serializeAddress(string,string,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "serializeBool(string,string,bool[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "serializeBool(string,string,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "serializeBytes(string,string,bytes[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "serializeBytes(string,string,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "serializeBytes32(string,string,bytes32[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "serializeBytes32(string,string,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "serializeInt(string,string,int256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "serializeInt(string,string,int256[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "serializeJson",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "serializeString(string,string,string[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "serializeString(string,string,string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "serializeUint(string,string,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "serializeUint(string,string,uint256[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setEnv", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sign((address,uint256,uint256,uint256),bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sign(uint256,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sleep", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "startBroadcast()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startBroadcast(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startBroadcast(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startMappingRecording",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startStateDiffRecording",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stopAndReturnStateDiff",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stopBroadcast",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stopMappingRecording",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toString(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toString(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toString(bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toString(bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toString(int256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toString(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tryFfi", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unixTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "writeFile", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "writeFileBinary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "writeJson(string,string,string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "writeJson(string,string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "writeLine", data: BytesLike): Result;

  events: {};
}

export interface VmSafe extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VmSafeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    accesses(
      target: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    addr(
      privateKey: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { keyAddr: string }>;

    assume(condition: boolean, overrides?: CallOverrides): Promise<[void]>;

    "breakpoint(string)"(
      char: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "breakpoint(string,bool)"(
      char: string,
      value: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "broadcast()"(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "broadcast(address)"(
      signer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "broadcast(uint256)"(
      privateKey: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    closeFile(
      path: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "computeCreate2Address(bytes32,bytes32)"(
      salt: BytesLike,
      initCodeHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "computeCreate2Address(bytes32,bytes32,address)"(
      salt: BytesLike,
      initCodeHash: BytesLike,
      deployer: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    computeCreateAddress(
      deployer: string,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    copyFile(
      from: string,
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    createDir(
      path: string,
      recursive: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "createWallet(string)"(
      walletLabel: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "createWallet(uint256)"(
      privateKey: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "createWallet(uint256,string)"(
      privateKey: BigNumberish,
      walletLabel: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "deriveKey(string,string,uint32,string)"(
      mnemonic: string,
      derivationPath: string,
      index: BigNumberish,
      language: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { privateKey: BigNumber }>;

    "deriveKey(string,uint32,string)"(
      mnemonic: string,
      index: BigNumberish,
      language: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { privateKey: BigNumber }>;

    "deriveKey(string,uint32)"(
      mnemonic: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { privateKey: BigNumber }>;

    "deriveKey(string,string,uint32)"(
      mnemonic: string,
      derivationPath: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { privateKey: BigNumber }>;

    "envAddress(string)"(
      name: string,
      overrides?: CallOverrides
    ): Promise<[string] & { value: string }>;

    "envAddress(string,string)"(
      name: string,
      delim: string,
      overrides?: CallOverrides
    ): Promise<[string[]] & { value: string[] }>;

    "envBool(string)"(
      name: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { value: boolean }>;

    "envBool(string,string)"(
      name: string,
      delim: string,
      overrides?: CallOverrides
    ): Promise<[boolean[]] & { value: boolean[] }>;

    "envBytes(string)"(
      name: string,
      overrides?: CallOverrides
    ): Promise<[string] & { value: string }>;

    "envBytes(string,string)"(
      name: string,
      delim: string,
      overrides?: CallOverrides
    ): Promise<[string[]] & { value: string[] }>;

    "envBytes32(string,string)"(
      name: string,
      delim: string,
      overrides?: CallOverrides
    ): Promise<[string[]] & { value: string[] }>;

    "envBytes32(string)"(
      name: string,
      overrides?: CallOverrides
    ): Promise<[string] & { value: string }>;

    "envInt(string,string)"(
      name: string,
      delim: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { value: BigNumber[] }>;

    "envInt(string)"(
      name: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { value: BigNumber }>;

    "envOr(string,string,bytes32[])"(
      name: string,
      delim: string,
      defaultValue: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[string[]] & { value: string[] }>;

    "envOr(string,string,int256[])"(
      name: string,
      delim: string,
      defaultValue: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { value: BigNumber[] }>;

    "envOr(string,bool)"(
      name: string,
      defaultValue: boolean,
      overrides?: CallOverrides
    ): Promise<[boolean] & { value: boolean }>;

    "envOr(string,address)"(
      name: string,
      defaultValue: string,
      overrides?: CallOverrides
    ): Promise<[string] & { value: string }>;

    "envOr(string,uint256)"(
      name: string,
      defaultValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { value: BigNumber }>;

    "envOr(string,string,bytes[])"(
      name: string,
      delim: string,
      defaultValue: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[string[]] & { value: string[] }>;

    "envOr(string,string,uint256[])"(
      name: string,
      delim: string,
      defaultValue: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { value: BigNumber[] }>;

    "envOr(string,string,string[])"(
      name: string,
      delim: string,
      defaultValue: string[],
      overrides?: CallOverrides
    ): Promise<[string[]] & { value: string[] }>;

    "envOr(string,bytes)"(
      name: string,
      defaultValue: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { value: string }>;

    "envOr(string,bytes32)"(
      name: string,
      defaultValue: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { value: string }>;

    "envOr(string,int256)"(
      name: string,
      defaultValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { value: BigNumber }>;

    "envOr(string,string,address[])"(
      name: string,
      delim: string,
      defaultValue: string[],
      overrides?: CallOverrides
    ): Promise<[string[]] & { value: string[] }>;

    "envOr(string,string)"(
      name: string,
      defaultValue: string,
      overrides?: CallOverrides
    ): Promise<[string] & { value: string }>;

    "envOr(string,string,bool[])"(
      name: string,
      delim: string,
      defaultValue: boolean[],
      overrides?: CallOverrides
    ): Promise<[boolean[]] & { value: boolean[] }>;

    "envString(string,string)"(
      name: string,
      delim: string,
      overrides?: CallOverrides
    ): Promise<[string[]] & { value: string[] }>;

    "envString(string)"(
      name: string,
      overrides?: CallOverrides
    ): Promise<[string] & { value: string }>;

    "envUint(string)"(
      name: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { value: BigNumber }>;

    "envUint(string,string)"(
      name: string,
      delim: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { value: BigNumber[] }>;

    eth_getLogs(
      fromBlock: BigNumberish,
      toBlock: BigNumberish,
      target: string,
      topics: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    exists(
      path: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ffi(
      commandInput: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    fsMetadata(
      path: string,
      overrides?: CallOverrides
    ): Promise<
      [VmSafe.FsMetadataStructOutput] & {
        metadata: VmSafe.FsMetadataStructOutput;
      }
    >;

    getBlockNumber(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { height: BigNumber }>;

    getBlockTimestamp(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { timestamp: BigNumber }>;

    getCode(
      artifactPath: string,
      overrides?: CallOverrides
    ): Promise<[string] & { creationBytecode: string }>;

    getDeployedCode(
      artifactPath: string,
      overrides?: CallOverrides
    ): Promise<[string] & { runtimeBytecode: string }>;

    getLabel(
      account: string,
      overrides?: CallOverrides
    ): Promise<[string] & { currentLabel: string }>;

    getMappingKeyAndParentOf(
      target: string,
      elementSlot: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getMappingLength(
      target: string,
      mappingSlot: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getMappingSlotAt(
      target: string,
      mappingSlot: BytesLike,
      idx: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "getNonce(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { nonce: BigNumber }>;

    "getNonce((address,uint256,uint256,uint256))"(
      wallet: VmSafe.WalletStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getRecordedLogs(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    isDir(
      path: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    isFile(
      path: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    keyExists(
      json: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    label(
      account: string,
      newLabel: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    load(
      target: string,
      slot: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { data: string }>;

    parseAddress(
      stringifiedValue: string,
      overrides?: CallOverrides
    ): Promise<[string] & { parsedValue: string }>;

    parseBool(
      stringifiedValue: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { parsedValue: boolean }>;

    parseBytes(
      stringifiedValue: string,
      overrides?: CallOverrides
    ): Promise<[string] & { parsedValue: string }>;

    parseBytes32(
      stringifiedValue: string,
      overrides?: CallOverrides
    ): Promise<[string] & { parsedValue: string }>;

    parseInt(
      stringifiedValue: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { parsedValue: BigNumber }>;

    "parseJson(string)"(
      json: string,
      overrides?: CallOverrides
    ): Promise<[string] & { abiEncodedData: string }>;

    "parseJson(string,string)"(
      json: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<[string] & { abiEncodedData: string }>;

    parseJsonAddress(
      json: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    parseJsonAddressArray(
      json: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    parseJsonBool(
      json: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    parseJsonBoolArray(
      json: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<[boolean[]]>;

    parseJsonBytes(
      json: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    parseJsonBytes32(
      json: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    parseJsonBytes32Array(
      json: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    parseJsonBytesArray(
      json: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    parseJsonInt(
      json: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    parseJsonIntArray(
      json: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    parseJsonKeys(
      json: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<[string[]] & { keys: string[] }>;

    parseJsonString(
      json: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    parseJsonStringArray(
      json: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    parseJsonUint(
      json: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    parseJsonUintArray(
      json: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    parseUint(
      stringifiedValue: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { parsedValue: BigNumber }>;

    pauseGasMetering(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    projectRoot(
      overrides?: CallOverrides
    ): Promise<[string] & { path: string }>;

    "readDir(string,uint64)"(
      path: string,
      maxDepth: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [VmSafe.DirEntryStructOutput[]] & {
        entries: VmSafe.DirEntryStructOutput[];
      }
    >;

    "readDir(string,uint64,bool)"(
      path: string,
      maxDepth: BigNumberish,
      followLinks: boolean,
      overrides?: CallOverrides
    ): Promise<
      [VmSafe.DirEntryStructOutput[]] & {
        entries: VmSafe.DirEntryStructOutput[];
      }
    >;

    "readDir(string)"(
      path: string,
      overrides?: CallOverrides
    ): Promise<
      [VmSafe.DirEntryStructOutput[]] & {
        entries: VmSafe.DirEntryStructOutput[];
      }
    >;

    readFile(
      path: string,
      overrides?: CallOverrides
    ): Promise<[string] & { data: string }>;

    readFileBinary(
      path: string,
      overrides?: CallOverrides
    ): Promise<[string] & { data: string }>;

    readLine(
      path: string,
      overrides?: CallOverrides
    ): Promise<[string] & { line: string }>;

    readLink(
      linkPath: string,
      overrides?: CallOverrides
    ): Promise<[string] & { targetPath: string }>;

    record(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    recordLogs(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    rememberKey(
      privateKey: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    removeDir(
      path: string,
      recursive: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    removeFile(
      path: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    resumeGasMetering(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    rpc(
      method: string,
      params: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    rpcUrl(
      rpcAlias: string,
      overrides?: CallOverrides
    ): Promise<[string] & { json: string }>;

    rpcUrlStructs(
      overrides?: CallOverrides
    ): Promise<[VmSafe.RpcStructOutput[]] & { urls: VmSafe.RpcStructOutput[] }>;

    rpcUrls(
      overrides?: CallOverrides
    ): Promise<[[string, string][]] & { urls: [string, string][] }>;

    "serializeAddress(string,string,address[])"(
      objectKey: string,
      valueKey: string,
      values: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "serializeAddress(string,string,address)"(
      objectKey: string,
      valueKey: string,
      value: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "serializeBool(string,string,bool[])"(
      objectKey: string,
      valueKey: string,
      values: boolean[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "serializeBool(string,string,bool)"(
      objectKey: string,
      valueKey: string,
      value: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "serializeBytes(string,string,bytes[])"(
      objectKey: string,
      valueKey: string,
      values: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "serializeBytes(string,string,bytes)"(
      objectKey: string,
      valueKey: string,
      value: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "serializeBytes32(string,string,bytes32[])"(
      objectKey: string,
      valueKey: string,
      values: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "serializeBytes32(string,string,bytes32)"(
      objectKey: string,
      valueKey: string,
      value: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "serializeInt(string,string,int256)"(
      objectKey: string,
      valueKey: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "serializeInt(string,string,int256[])"(
      objectKey: string,
      valueKey: string,
      values: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    serializeJson(
      objectKey: string,
      value: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "serializeString(string,string,string[])"(
      objectKey: string,
      valueKey: string,
      values: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "serializeString(string,string,string)"(
      objectKey: string,
      valueKey: string,
      value: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "serializeUint(string,string,uint256)"(
      objectKey: string,
      valueKey: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "serializeUint(string,string,uint256[])"(
      objectKey: string,
      valueKey: string,
      values: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setEnv(
      name: string,
      value: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "sign((address,uint256,uint256,uint256),bytes32)"(
      wallet: VmSafe.WalletStruct,
      digest: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "sign(uint256,bytes32)"(
      privateKey: BigNumberish,
      digest: BytesLike,
      overrides?: CallOverrides
    ): Promise<[number, string, string] & { v: number; r: string; s: string }>;

    sleep(
      duration: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "startBroadcast()"(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "startBroadcast(address)"(
      signer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "startBroadcast(uint256)"(
      privateKey: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    startMappingRecording(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    startStateDiffRecording(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    stopAndReturnStateDiff(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    stopBroadcast(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    stopMappingRecording(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "toString(address)"(
      value: string,
      overrides?: CallOverrides
    ): Promise<[string] & { stringifiedValue: string }>;

    "toString(uint256)"(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { stringifiedValue: string }>;

    "toString(bytes)"(
      value: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { stringifiedValue: string }>;

    "toString(bool)"(
      value: boolean,
      overrides?: CallOverrides
    ): Promise<[string] & { stringifiedValue: string }>;

    "toString(int256)"(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { stringifiedValue: string }>;

    "toString(bytes32)"(
      value: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { stringifiedValue: string }>;

    tryFfi(
      commandInput: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    unixTime(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    writeFile(
      path: string,
      data: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    writeFileBinary(
      path: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "writeJson(string,string,string)"(
      json: string,
      path: string,
      valueKey: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "writeJson(string,string)"(
      json: string,
      path: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    writeLine(
      path: string,
      data: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  accesses(
    target: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  addr(privateKey: BigNumberish, overrides?: CallOverrides): Promise<string>;

  assume(condition: boolean, overrides?: CallOverrides): Promise<void>;

  "breakpoint(string)"(
    char: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "breakpoint(string,bool)"(
    char: string,
    value: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "broadcast()"(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "broadcast(address)"(
    signer: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "broadcast(uint256)"(
    privateKey: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  closeFile(
    path: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "computeCreate2Address(bytes32,bytes32)"(
    salt: BytesLike,
    initCodeHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "computeCreate2Address(bytes32,bytes32,address)"(
    salt: BytesLike,
    initCodeHash: BytesLike,
    deployer: string,
    overrides?: CallOverrides
  ): Promise<string>;

  computeCreateAddress(
    deployer: string,
    nonce: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  copyFile(
    from: string,
    to: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  createDir(
    path: string,
    recursive: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "createWallet(string)"(
    walletLabel: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "createWallet(uint256)"(
    privateKey: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "createWallet(uint256,string)"(
    privateKey: BigNumberish,
    walletLabel: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "deriveKey(string,string,uint32,string)"(
    mnemonic: string,
    derivationPath: string,
    index: BigNumberish,
    language: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "deriveKey(string,uint32,string)"(
    mnemonic: string,
    index: BigNumberish,
    language: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "deriveKey(string,uint32)"(
    mnemonic: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "deriveKey(string,string,uint32)"(
    mnemonic: string,
    derivationPath: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "envAddress(string)"(
    name: string,
    overrides?: CallOverrides
  ): Promise<string>;

  "envAddress(string,string)"(
    name: string,
    delim: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "envBool(string)"(name: string, overrides?: CallOverrides): Promise<boolean>;

  "envBool(string,string)"(
    name: string,
    delim: string,
    overrides?: CallOverrides
  ): Promise<boolean[]>;

  "envBytes(string)"(name: string, overrides?: CallOverrides): Promise<string>;

  "envBytes(string,string)"(
    name: string,
    delim: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "envBytes32(string,string)"(
    name: string,
    delim: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "envBytes32(string)"(
    name: string,
    overrides?: CallOverrides
  ): Promise<string>;

  "envInt(string,string)"(
    name: string,
    delim: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "envInt(string)"(name: string, overrides?: CallOverrides): Promise<BigNumber>;

  "envOr(string,string,bytes32[])"(
    name: string,
    delim: string,
    defaultValue: BytesLike[],
    overrides?: CallOverrides
  ): Promise<string[]>;

  "envOr(string,string,int256[])"(
    name: string,
    delim: string,
    defaultValue: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "envOr(string,bool)"(
    name: string,
    defaultValue: boolean,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "envOr(string,address)"(
    name: string,
    defaultValue: string,
    overrides?: CallOverrides
  ): Promise<string>;

  "envOr(string,uint256)"(
    name: string,
    defaultValue: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "envOr(string,string,bytes[])"(
    name: string,
    delim: string,
    defaultValue: BytesLike[],
    overrides?: CallOverrides
  ): Promise<string[]>;

  "envOr(string,string,uint256[])"(
    name: string,
    delim: string,
    defaultValue: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "envOr(string,string,string[])"(
    name: string,
    delim: string,
    defaultValue: string[],
    overrides?: CallOverrides
  ): Promise<string[]>;

  "envOr(string,bytes)"(
    name: string,
    defaultValue: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "envOr(string,bytes32)"(
    name: string,
    defaultValue: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "envOr(string,int256)"(
    name: string,
    defaultValue: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "envOr(string,string,address[])"(
    name: string,
    delim: string,
    defaultValue: string[],
    overrides?: CallOverrides
  ): Promise<string[]>;

  "envOr(string,string)"(
    name: string,
    defaultValue: string,
    overrides?: CallOverrides
  ): Promise<string>;

  "envOr(string,string,bool[])"(
    name: string,
    delim: string,
    defaultValue: boolean[],
    overrides?: CallOverrides
  ): Promise<boolean[]>;

  "envString(string,string)"(
    name: string,
    delim: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "envString(string)"(name: string, overrides?: CallOverrides): Promise<string>;

  "envUint(string)"(
    name: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "envUint(string,string)"(
    name: string,
    delim: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  eth_getLogs(
    fromBlock: BigNumberish,
    toBlock: BigNumberish,
    target: string,
    topics: BytesLike[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  exists(
    path: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ffi(
    commandInput: string[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  fsMetadata(
    path: string,
    overrides?: CallOverrides
  ): Promise<VmSafe.FsMetadataStructOutput>;

  getBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

  getBlockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  getCode(artifactPath: string, overrides?: CallOverrides): Promise<string>;

  getDeployedCode(
    artifactPath: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getLabel(account: string, overrides?: CallOverrides): Promise<string>;

  getMappingKeyAndParentOf(
    target: string,
    elementSlot: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getMappingLength(
    target: string,
    mappingSlot: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getMappingSlotAt(
    target: string,
    mappingSlot: BytesLike,
    idx: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "getNonce(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getNonce((address,uint256,uint256,uint256))"(
    wallet: VmSafe.WalletStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getRecordedLogs(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  isDir(
    path: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  isFile(
    path: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  keyExists(
    json: string,
    key: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  label(
    account: string,
    newLabel: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  load(
    target: string,
    slot: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  parseAddress(
    stringifiedValue: string,
    overrides?: CallOverrides
  ): Promise<string>;

  parseBool(
    stringifiedValue: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  parseBytes(
    stringifiedValue: string,
    overrides?: CallOverrides
  ): Promise<string>;

  parseBytes32(
    stringifiedValue: string,
    overrides?: CallOverrides
  ): Promise<string>;

  parseInt(
    stringifiedValue: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "parseJson(string)"(json: string, overrides?: CallOverrides): Promise<string>;

  "parseJson(string,string)"(
    json: string,
    key: string,
    overrides?: CallOverrides
  ): Promise<string>;

  parseJsonAddress(
    json: string,
    key: string,
    overrides?: CallOverrides
  ): Promise<string>;

  parseJsonAddressArray(
    json: string,
    key: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  parseJsonBool(
    json: string,
    key: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  parseJsonBoolArray(
    json: string,
    key: string,
    overrides?: CallOverrides
  ): Promise<boolean[]>;

  parseJsonBytes(
    json: string,
    key: string,
    overrides?: CallOverrides
  ): Promise<string>;

  parseJsonBytes32(
    json: string,
    key: string,
    overrides?: CallOverrides
  ): Promise<string>;

  parseJsonBytes32Array(
    json: string,
    key: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  parseJsonBytesArray(
    json: string,
    key: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  parseJsonInt(
    json: string,
    key: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  parseJsonIntArray(
    json: string,
    key: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  parseJsonKeys(
    json: string,
    key: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  parseJsonString(
    json: string,
    key: string,
    overrides?: CallOverrides
  ): Promise<string>;

  parseJsonStringArray(
    json: string,
    key: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  parseJsonUint(
    json: string,
    key: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  parseJsonUintArray(
    json: string,
    key: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  parseUint(
    stringifiedValue: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pauseGasMetering(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  projectRoot(overrides?: CallOverrides): Promise<string>;

  "readDir(string,uint64)"(
    path: string,
    maxDepth: BigNumberish,
    overrides?: CallOverrides
  ): Promise<VmSafe.DirEntryStructOutput[]>;

  "readDir(string,uint64,bool)"(
    path: string,
    maxDepth: BigNumberish,
    followLinks: boolean,
    overrides?: CallOverrides
  ): Promise<VmSafe.DirEntryStructOutput[]>;

  "readDir(string)"(
    path: string,
    overrides?: CallOverrides
  ): Promise<VmSafe.DirEntryStructOutput[]>;

  readFile(path: string, overrides?: CallOverrides): Promise<string>;

  readFileBinary(path: string, overrides?: CallOverrides): Promise<string>;

  readLine(path: string, overrides?: CallOverrides): Promise<string>;

  readLink(linkPath: string, overrides?: CallOverrides): Promise<string>;

  record(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  recordLogs(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  rememberKey(
    privateKey: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  removeDir(
    path: string,
    recursive: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  removeFile(
    path: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  resumeGasMetering(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  rpc(
    method: string,
    params: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  rpcUrl(rpcAlias: string, overrides?: CallOverrides): Promise<string>;

  rpcUrlStructs(overrides?: CallOverrides): Promise<VmSafe.RpcStructOutput[]>;

  rpcUrls(overrides?: CallOverrides): Promise<[string, string][]>;

  "serializeAddress(string,string,address[])"(
    objectKey: string,
    valueKey: string,
    values: string[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "serializeAddress(string,string,address)"(
    objectKey: string,
    valueKey: string,
    value: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "serializeBool(string,string,bool[])"(
    objectKey: string,
    valueKey: string,
    values: boolean[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "serializeBool(string,string,bool)"(
    objectKey: string,
    valueKey: string,
    value: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "serializeBytes(string,string,bytes[])"(
    objectKey: string,
    valueKey: string,
    values: BytesLike[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "serializeBytes(string,string,bytes)"(
    objectKey: string,
    valueKey: string,
    value: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "serializeBytes32(string,string,bytes32[])"(
    objectKey: string,
    valueKey: string,
    values: BytesLike[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "serializeBytes32(string,string,bytes32)"(
    objectKey: string,
    valueKey: string,
    value: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "serializeInt(string,string,int256)"(
    objectKey: string,
    valueKey: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "serializeInt(string,string,int256[])"(
    objectKey: string,
    valueKey: string,
    values: BigNumberish[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  serializeJson(
    objectKey: string,
    value: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "serializeString(string,string,string[])"(
    objectKey: string,
    valueKey: string,
    values: string[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "serializeString(string,string,string)"(
    objectKey: string,
    valueKey: string,
    value: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "serializeUint(string,string,uint256)"(
    objectKey: string,
    valueKey: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "serializeUint(string,string,uint256[])"(
    objectKey: string,
    valueKey: string,
    values: BigNumberish[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setEnv(
    name: string,
    value: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "sign((address,uint256,uint256,uint256),bytes32)"(
    wallet: VmSafe.WalletStruct,
    digest: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "sign(uint256,bytes32)"(
    privateKey: BigNumberish,
    digest: BytesLike,
    overrides?: CallOverrides
  ): Promise<[number, string, string] & { v: number; r: string; s: string }>;

  sleep(
    duration: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "startBroadcast()"(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "startBroadcast(address)"(
    signer: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "startBroadcast(uint256)"(
    privateKey: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  startMappingRecording(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  startStateDiffRecording(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  stopAndReturnStateDiff(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  stopBroadcast(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  stopMappingRecording(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "toString(address)"(
    value: string,
    overrides?: CallOverrides
  ): Promise<string>;

  "toString(uint256)"(
    value: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "toString(bytes)"(
    value: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "toString(bool)"(value: boolean, overrides?: CallOverrides): Promise<string>;

  "toString(int256)"(
    value: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "toString(bytes32)"(
    value: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  tryFfi(
    commandInput: string[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  unixTime(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  writeFile(
    path: string,
    data: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  writeFileBinary(
    path: string,
    data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "writeJson(string,string,string)"(
    json: string,
    path: string,
    valueKey: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "writeJson(string,string)"(
    json: string,
    path: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  writeLine(
    path: string,
    data: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    accesses(
      target: string,
      overrides?: CallOverrides
    ): Promise<
      [string[], string[]] & { readSlots: string[]; writeSlots: string[] }
    >;

    addr(privateKey: BigNumberish, overrides?: CallOverrides): Promise<string>;

    assume(condition: boolean, overrides?: CallOverrides): Promise<void>;

    "breakpoint(string)"(
      char: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "breakpoint(string,bool)"(
      char: string,
      value: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "broadcast()"(overrides?: CallOverrides): Promise<void>;

    "broadcast(address)"(
      signer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "broadcast(uint256)"(
      privateKey: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    closeFile(path: string, overrides?: CallOverrides): Promise<void>;

    "computeCreate2Address(bytes32,bytes32)"(
      salt: BytesLike,
      initCodeHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "computeCreate2Address(bytes32,bytes32,address)"(
      salt: BytesLike,
      initCodeHash: BytesLike,
      deployer: string,
      overrides?: CallOverrides
    ): Promise<string>;

    computeCreateAddress(
      deployer: string,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    copyFile(
      from: string,
      to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createDir(
      path: string,
      recursive: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "createWallet(string)"(
      walletLabel: string,
      overrides?: CallOverrides
    ): Promise<VmSafe.WalletStructOutput>;

    "createWallet(uint256)"(
      privateKey: BigNumberish,
      overrides?: CallOverrides
    ): Promise<VmSafe.WalletStructOutput>;

    "createWallet(uint256,string)"(
      privateKey: BigNumberish,
      walletLabel: string,
      overrides?: CallOverrides
    ): Promise<VmSafe.WalletStructOutput>;

    "deriveKey(string,string,uint32,string)"(
      mnemonic: string,
      derivationPath: string,
      index: BigNumberish,
      language: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "deriveKey(string,uint32,string)"(
      mnemonic: string,
      index: BigNumberish,
      language: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "deriveKey(string,uint32)"(
      mnemonic: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "deriveKey(string,string,uint32)"(
      mnemonic: string,
      derivationPath: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "envAddress(string)"(
      name: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "envAddress(string,string)"(
      name: string,
      delim: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "envBool(string)"(
      name: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "envBool(string,string)"(
      name: string,
      delim: string,
      overrides?: CallOverrides
    ): Promise<boolean[]>;

    "envBytes(string)"(
      name: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "envBytes(string,string)"(
      name: string,
      delim: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "envBytes32(string,string)"(
      name: string,
      delim: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "envBytes32(string)"(
      name: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "envInt(string,string)"(
      name: string,
      delim: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "envInt(string)"(
      name: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "envOr(string,string,bytes32[])"(
      name: string,
      delim: string,
      defaultValue: BytesLike[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    "envOr(string,string,int256[])"(
      name: string,
      delim: string,
      defaultValue: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "envOr(string,bool)"(
      name: string,
      defaultValue: boolean,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "envOr(string,address)"(
      name: string,
      defaultValue: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "envOr(string,uint256)"(
      name: string,
      defaultValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "envOr(string,string,bytes[])"(
      name: string,
      delim: string,
      defaultValue: BytesLike[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    "envOr(string,string,uint256[])"(
      name: string,
      delim: string,
      defaultValue: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "envOr(string,string,string[])"(
      name: string,
      delim: string,
      defaultValue: string[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    "envOr(string,bytes)"(
      name: string,
      defaultValue: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "envOr(string,bytes32)"(
      name: string,
      defaultValue: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "envOr(string,int256)"(
      name: string,
      defaultValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "envOr(string,string,address[])"(
      name: string,
      delim: string,
      defaultValue: string[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    "envOr(string,string)"(
      name: string,
      defaultValue: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "envOr(string,string,bool[])"(
      name: string,
      delim: string,
      defaultValue: boolean[],
      overrides?: CallOverrides
    ): Promise<boolean[]>;

    "envString(string,string)"(
      name: string,
      delim: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "envString(string)"(
      name: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "envUint(string)"(
      name: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "envUint(string,string)"(
      name: string,
      delim: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    eth_getLogs(
      fromBlock: BigNumberish,
      toBlock: BigNumberish,
      target: string,
      topics: BytesLike[],
      overrides?: CallOverrides
    ): Promise<VmSafe.EthGetLogsStructOutput[]>;

    exists(path: string, overrides?: CallOverrides): Promise<boolean>;

    ffi(commandInput: string[], overrides?: CallOverrides): Promise<string>;

    fsMetadata(
      path: string,
      overrides?: CallOverrides
    ): Promise<VmSafe.FsMetadataStructOutput>;

    getBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    getBlockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    getCode(artifactPath: string, overrides?: CallOverrides): Promise<string>;

    getDeployedCode(
      artifactPath: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getLabel(account: string, overrides?: CallOverrides): Promise<string>;

    getMappingKeyAndParentOf(
      target: string,
      elementSlot: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, string] & {
        found: boolean;
        key: string;
        parent: string;
      }
    >;

    getMappingLength(
      target: string,
      mappingSlot: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMappingSlotAt(
      target: string,
      mappingSlot: BytesLike,
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getNonce(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getNonce((address,uint256,uint256,uint256))"(
      wallet: VmSafe.WalletStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRecordedLogs(
      overrides?: CallOverrides
    ): Promise<VmSafe.LogStructOutput[]>;

    isDir(path: string, overrides?: CallOverrides): Promise<boolean>;

    isFile(path: string, overrides?: CallOverrides): Promise<boolean>;

    keyExists(
      json: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    label(
      account: string,
      newLabel: string,
      overrides?: CallOverrides
    ): Promise<void>;

    load(
      target: string,
      slot: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    parseAddress(
      stringifiedValue: string,
      overrides?: CallOverrides
    ): Promise<string>;

    parseBool(
      stringifiedValue: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    parseBytes(
      stringifiedValue: string,
      overrides?: CallOverrides
    ): Promise<string>;

    parseBytes32(
      stringifiedValue: string,
      overrides?: CallOverrides
    ): Promise<string>;

    parseInt(
      stringifiedValue: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "parseJson(string)"(
      json: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "parseJson(string,string)"(
      json: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<string>;

    parseJsonAddress(
      json: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<string>;

    parseJsonAddressArray(
      json: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    parseJsonBool(
      json: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    parseJsonBoolArray(
      json: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<boolean[]>;

    parseJsonBytes(
      json: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<string>;

    parseJsonBytes32(
      json: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<string>;

    parseJsonBytes32Array(
      json: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    parseJsonBytesArray(
      json: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    parseJsonInt(
      json: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    parseJsonIntArray(
      json: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    parseJsonKeys(
      json: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    parseJsonString(
      json: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<string>;

    parseJsonStringArray(
      json: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    parseJsonUint(
      json: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    parseJsonUintArray(
      json: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    parseUint(
      stringifiedValue: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pauseGasMetering(overrides?: CallOverrides): Promise<void>;

    projectRoot(overrides?: CallOverrides): Promise<string>;

    "readDir(string,uint64)"(
      path: string,
      maxDepth: BigNumberish,
      overrides?: CallOverrides
    ): Promise<VmSafe.DirEntryStructOutput[]>;

    "readDir(string,uint64,bool)"(
      path: string,
      maxDepth: BigNumberish,
      followLinks: boolean,
      overrides?: CallOverrides
    ): Promise<VmSafe.DirEntryStructOutput[]>;

    "readDir(string)"(
      path: string,
      overrides?: CallOverrides
    ): Promise<VmSafe.DirEntryStructOutput[]>;

    readFile(path: string, overrides?: CallOverrides): Promise<string>;

    readFileBinary(path: string, overrides?: CallOverrides): Promise<string>;

    readLine(path: string, overrides?: CallOverrides): Promise<string>;

    readLink(linkPath: string, overrides?: CallOverrides): Promise<string>;

    record(overrides?: CallOverrides): Promise<void>;

    recordLogs(overrides?: CallOverrides): Promise<void>;

    rememberKey(
      privateKey: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    removeDir(
      path: string,
      recursive: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    removeFile(path: string, overrides?: CallOverrides): Promise<void>;

    resumeGasMetering(overrides?: CallOverrides): Promise<void>;

    rpc(
      method: string,
      params: string,
      overrides?: CallOverrides
    ): Promise<string>;

    rpcUrl(rpcAlias: string, overrides?: CallOverrides): Promise<string>;

    rpcUrlStructs(overrides?: CallOverrides): Promise<VmSafe.RpcStructOutput[]>;

    rpcUrls(overrides?: CallOverrides): Promise<[string, string][]>;

    "serializeAddress(string,string,address[])"(
      objectKey: string,
      valueKey: string,
      values: string[],
      overrides?: CallOverrides
    ): Promise<string>;

    "serializeAddress(string,string,address)"(
      objectKey: string,
      valueKey: string,
      value: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "serializeBool(string,string,bool[])"(
      objectKey: string,
      valueKey: string,
      values: boolean[],
      overrides?: CallOverrides
    ): Promise<string>;

    "serializeBool(string,string,bool)"(
      objectKey: string,
      valueKey: string,
      value: boolean,
      overrides?: CallOverrides
    ): Promise<string>;

    "serializeBytes(string,string,bytes[])"(
      objectKey: string,
      valueKey: string,
      values: BytesLike[],
      overrides?: CallOverrides
    ): Promise<string>;

    "serializeBytes(string,string,bytes)"(
      objectKey: string,
      valueKey: string,
      value: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "serializeBytes32(string,string,bytes32[])"(
      objectKey: string,
      valueKey: string,
      values: BytesLike[],
      overrides?: CallOverrides
    ): Promise<string>;

    "serializeBytes32(string,string,bytes32)"(
      objectKey: string,
      valueKey: string,
      value: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "serializeInt(string,string,int256)"(
      objectKey: string,
      valueKey: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "serializeInt(string,string,int256[])"(
      objectKey: string,
      valueKey: string,
      values: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<string>;

    serializeJson(
      objectKey: string,
      value: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "serializeString(string,string,string[])"(
      objectKey: string,
      valueKey: string,
      values: string[],
      overrides?: CallOverrides
    ): Promise<string>;

    "serializeString(string,string,string)"(
      objectKey: string,
      valueKey: string,
      value: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "serializeUint(string,string,uint256)"(
      objectKey: string,
      valueKey: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "serializeUint(string,string,uint256[])"(
      objectKey: string,
      valueKey: string,
      values: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<string>;

    setEnv(
      name: string,
      value: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "sign((address,uint256,uint256,uint256),bytes32)"(
      wallet: VmSafe.WalletStruct,
      digest: BytesLike,
      overrides?: CallOverrides
    ): Promise<[number, string, string] & { v: number; r: string; s: string }>;

    "sign(uint256,bytes32)"(
      privateKey: BigNumberish,
      digest: BytesLike,
      overrides?: CallOverrides
    ): Promise<[number, string, string] & { v: number; r: string; s: string }>;

    sleep(duration: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "startBroadcast()"(overrides?: CallOverrides): Promise<void>;

    "startBroadcast(address)"(
      signer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "startBroadcast(uint256)"(
      privateKey: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    startMappingRecording(overrides?: CallOverrides): Promise<void>;

    startStateDiffRecording(overrides?: CallOverrides): Promise<void>;

    stopAndReturnStateDiff(
      overrides?: CallOverrides
    ): Promise<VmSafe.AccountAccessStructOutput[]>;

    stopBroadcast(overrides?: CallOverrides): Promise<void>;

    stopMappingRecording(overrides?: CallOverrides): Promise<void>;

    "toString(address)"(
      value: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "toString(uint256)"(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "toString(bytes)"(
      value: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "toString(bool)"(
      value: boolean,
      overrides?: CallOverrides
    ): Promise<string>;

    "toString(int256)"(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "toString(bytes32)"(
      value: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    tryFfi(
      commandInput: string[],
      overrides?: CallOverrides
    ): Promise<VmSafe.FfiResultStructOutput>;

    unixTime(overrides?: CallOverrides): Promise<BigNumber>;

    writeFile(
      path: string,
      data: string,
      overrides?: CallOverrides
    ): Promise<void>;

    writeFileBinary(
      path: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "writeJson(string,string,string)"(
      json: string,
      path: string,
      valueKey: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "writeJson(string,string)"(
      json: string,
      path: string,
      overrides?: CallOverrides
    ): Promise<void>;

    writeLine(
      path: string,
      data: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    accesses(
      target: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    addr(
      privateKey: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    assume(condition: boolean, overrides?: CallOverrides): Promise<BigNumber>;

    "breakpoint(string)"(
      char: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "breakpoint(string,bool)"(
      char: string,
      value: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "broadcast()"(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "broadcast(address)"(
      signer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "broadcast(uint256)"(
      privateKey: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    closeFile(
      path: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "computeCreate2Address(bytes32,bytes32)"(
      salt: BytesLike,
      initCodeHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "computeCreate2Address(bytes32,bytes32,address)"(
      salt: BytesLike,
      initCodeHash: BytesLike,
      deployer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeCreateAddress(
      deployer: string,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    copyFile(
      from: string,
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    createDir(
      path: string,
      recursive: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "createWallet(string)"(
      walletLabel: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "createWallet(uint256)"(
      privateKey: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "createWallet(uint256,string)"(
      privateKey: BigNumberish,
      walletLabel: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "deriveKey(string,string,uint32,string)"(
      mnemonic: string,
      derivationPath: string,
      index: BigNumberish,
      language: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "deriveKey(string,uint32,string)"(
      mnemonic: string,
      index: BigNumberish,
      language: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "deriveKey(string,uint32)"(
      mnemonic: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "deriveKey(string,string,uint32)"(
      mnemonic: string,
      derivationPath: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "envAddress(string)"(
      name: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "envAddress(string,string)"(
      name: string,
      delim: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "envBool(string)"(
      name: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "envBool(string,string)"(
      name: string,
      delim: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "envBytes(string)"(
      name: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "envBytes(string,string)"(
      name: string,
      delim: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "envBytes32(string,string)"(
      name: string,
      delim: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "envBytes32(string)"(
      name: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "envInt(string,string)"(
      name: string,
      delim: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "envInt(string)"(
      name: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "envOr(string,string,bytes32[])"(
      name: string,
      delim: string,
      defaultValue: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "envOr(string,string,int256[])"(
      name: string,
      delim: string,
      defaultValue: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "envOr(string,bool)"(
      name: string,
      defaultValue: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "envOr(string,address)"(
      name: string,
      defaultValue: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "envOr(string,uint256)"(
      name: string,
      defaultValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "envOr(string,string,bytes[])"(
      name: string,
      delim: string,
      defaultValue: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "envOr(string,string,uint256[])"(
      name: string,
      delim: string,
      defaultValue: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "envOr(string,string,string[])"(
      name: string,
      delim: string,
      defaultValue: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "envOr(string,bytes)"(
      name: string,
      defaultValue: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "envOr(string,bytes32)"(
      name: string,
      defaultValue: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "envOr(string,int256)"(
      name: string,
      defaultValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "envOr(string,string,address[])"(
      name: string,
      delim: string,
      defaultValue: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "envOr(string,string)"(
      name: string,
      defaultValue: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "envOr(string,string,bool[])"(
      name: string,
      delim: string,
      defaultValue: boolean[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "envString(string,string)"(
      name: string,
      delim: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "envString(string)"(
      name: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "envUint(string)"(
      name: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "envUint(string,string)"(
      name: string,
      delim: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    eth_getLogs(
      fromBlock: BigNumberish,
      toBlock: BigNumberish,
      target: string,
      topics: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    exists(
      path: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ffi(
      commandInput: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    fsMetadata(path: string, overrides?: CallOverrides): Promise<BigNumber>;

    getBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    getBlockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    getCode(
      artifactPath: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDeployedCode(
      artifactPath: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLabel(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    getMappingKeyAndParentOf(
      target: string,
      elementSlot: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getMappingLength(
      target: string,
      mappingSlot: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getMappingSlotAt(
      target: string,
      mappingSlot: BytesLike,
      idx: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "getNonce(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getNonce((address,uint256,uint256,uint256))"(
      wallet: VmSafe.WalletStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getRecordedLogs(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    isDir(
      path: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    isFile(
      path: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    keyExists(
      json: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    label(
      account: string,
      newLabel: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    load(
      target: string,
      slot: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    parseAddress(
      stringifiedValue: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    parseBool(
      stringifiedValue: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    parseBytes(
      stringifiedValue: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    parseBytes32(
      stringifiedValue: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    parseInt(
      stringifiedValue: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "parseJson(string)"(
      json: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "parseJson(string,string)"(
      json: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    parseJsonAddress(
      json: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    parseJsonAddressArray(
      json: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    parseJsonBool(
      json: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    parseJsonBoolArray(
      json: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    parseJsonBytes(
      json: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    parseJsonBytes32(
      json: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    parseJsonBytes32Array(
      json: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    parseJsonBytesArray(
      json: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    parseJsonInt(
      json: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    parseJsonIntArray(
      json: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    parseJsonKeys(
      json: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    parseJsonString(
      json: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    parseJsonStringArray(
      json: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    parseJsonUint(
      json: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    parseJsonUintArray(
      json: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    parseUint(
      stringifiedValue: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pauseGasMetering(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    projectRoot(overrides?: CallOverrides): Promise<BigNumber>;

    "readDir(string,uint64)"(
      path: string,
      maxDepth: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "readDir(string,uint64,bool)"(
      path: string,
      maxDepth: BigNumberish,
      followLinks: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "readDir(string)"(
      path: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    readFile(path: string, overrides?: CallOverrides): Promise<BigNumber>;

    readFileBinary(path: string, overrides?: CallOverrides): Promise<BigNumber>;

    readLine(path: string, overrides?: CallOverrides): Promise<BigNumber>;

    readLink(linkPath: string, overrides?: CallOverrides): Promise<BigNumber>;

    record(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    recordLogs(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    rememberKey(
      privateKey: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    removeDir(
      path: string,
      recursive: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    removeFile(
      path: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    resumeGasMetering(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    rpc(
      method: string,
      params: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    rpcUrl(rpcAlias: string, overrides?: CallOverrides): Promise<BigNumber>;

    rpcUrlStructs(overrides?: CallOverrides): Promise<BigNumber>;

    rpcUrls(overrides?: CallOverrides): Promise<BigNumber>;

    "serializeAddress(string,string,address[])"(
      objectKey: string,
      valueKey: string,
      values: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "serializeAddress(string,string,address)"(
      objectKey: string,
      valueKey: string,
      value: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "serializeBool(string,string,bool[])"(
      objectKey: string,
      valueKey: string,
      values: boolean[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "serializeBool(string,string,bool)"(
      objectKey: string,
      valueKey: string,
      value: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "serializeBytes(string,string,bytes[])"(
      objectKey: string,
      valueKey: string,
      values: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "serializeBytes(string,string,bytes)"(
      objectKey: string,
      valueKey: string,
      value: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "serializeBytes32(string,string,bytes32[])"(
      objectKey: string,
      valueKey: string,
      values: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "serializeBytes32(string,string,bytes32)"(
      objectKey: string,
      valueKey: string,
      value: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "serializeInt(string,string,int256)"(
      objectKey: string,
      valueKey: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "serializeInt(string,string,int256[])"(
      objectKey: string,
      valueKey: string,
      values: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    serializeJson(
      objectKey: string,
      value: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "serializeString(string,string,string[])"(
      objectKey: string,
      valueKey: string,
      values: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "serializeString(string,string,string)"(
      objectKey: string,
      valueKey: string,
      value: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "serializeUint(string,string,uint256)"(
      objectKey: string,
      valueKey: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "serializeUint(string,string,uint256[])"(
      objectKey: string,
      valueKey: string,
      values: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setEnv(
      name: string,
      value: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "sign((address,uint256,uint256,uint256),bytes32)"(
      wallet: VmSafe.WalletStruct,
      digest: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "sign(uint256,bytes32)"(
      privateKey: BigNumberish,
      digest: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sleep(
      duration: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "startBroadcast()"(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "startBroadcast(address)"(
      signer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "startBroadcast(uint256)"(
      privateKey: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    startMappingRecording(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    startStateDiffRecording(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    stopAndReturnStateDiff(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    stopBroadcast(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    stopMappingRecording(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "toString(address)"(
      value: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "toString(uint256)"(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "toString(bytes)"(
      value: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "toString(bool)"(
      value: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "toString(int256)"(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "toString(bytes32)"(
      value: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tryFfi(
      commandInput: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    unixTime(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    writeFile(
      path: string,
      data: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    writeFileBinary(
      path: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "writeJson(string,string,string)"(
      json: string,
      path: string,
      valueKey: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "writeJson(string,string)"(
      json: string,
      path: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    writeLine(
      path: string,
      data: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accesses(
      target: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    addr(
      privateKey: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    assume(
      condition: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "breakpoint(string)"(
      char: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "breakpoint(string,bool)"(
      char: string,
      value: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "broadcast()"(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "broadcast(address)"(
      signer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "broadcast(uint256)"(
      privateKey: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    closeFile(
      path: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "computeCreate2Address(bytes32,bytes32)"(
      salt: BytesLike,
      initCodeHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "computeCreate2Address(bytes32,bytes32,address)"(
      salt: BytesLike,
      initCodeHash: BytesLike,
      deployer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    computeCreateAddress(
      deployer: string,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    copyFile(
      from: string,
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    createDir(
      path: string,
      recursive: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "createWallet(string)"(
      walletLabel: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "createWallet(uint256)"(
      privateKey: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "createWallet(uint256,string)"(
      privateKey: BigNumberish,
      walletLabel: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "deriveKey(string,string,uint32,string)"(
      mnemonic: string,
      derivationPath: string,
      index: BigNumberish,
      language: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "deriveKey(string,uint32,string)"(
      mnemonic: string,
      index: BigNumberish,
      language: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "deriveKey(string,uint32)"(
      mnemonic: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "deriveKey(string,string,uint32)"(
      mnemonic: string,
      derivationPath: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "envAddress(string)"(
      name: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "envAddress(string,string)"(
      name: string,
      delim: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "envBool(string)"(
      name: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "envBool(string,string)"(
      name: string,
      delim: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "envBytes(string)"(
      name: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "envBytes(string,string)"(
      name: string,
      delim: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "envBytes32(string,string)"(
      name: string,
      delim: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "envBytes32(string)"(
      name: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "envInt(string,string)"(
      name: string,
      delim: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "envInt(string)"(
      name: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "envOr(string,string,bytes32[])"(
      name: string,
      delim: string,
      defaultValue: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "envOr(string,string,int256[])"(
      name: string,
      delim: string,
      defaultValue: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "envOr(string,bool)"(
      name: string,
      defaultValue: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "envOr(string,address)"(
      name: string,
      defaultValue: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "envOr(string,uint256)"(
      name: string,
      defaultValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "envOr(string,string,bytes[])"(
      name: string,
      delim: string,
      defaultValue: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "envOr(string,string,uint256[])"(
      name: string,
      delim: string,
      defaultValue: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "envOr(string,string,string[])"(
      name: string,
      delim: string,
      defaultValue: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "envOr(string,bytes)"(
      name: string,
      defaultValue: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "envOr(string,bytes32)"(
      name: string,
      defaultValue: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "envOr(string,int256)"(
      name: string,
      defaultValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "envOr(string,string,address[])"(
      name: string,
      delim: string,
      defaultValue: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "envOr(string,string)"(
      name: string,
      defaultValue: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "envOr(string,string,bool[])"(
      name: string,
      delim: string,
      defaultValue: boolean[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "envString(string,string)"(
      name: string,
      delim: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "envString(string)"(
      name: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "envUint(string)"(
      name: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "envUint(string,string)"(
      name: string,
      delim: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    eth_getLogs(
      fromBlock: BigNumberish,
      toBlock: BigNumberish,
      target: string,
      topics: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    exists(
      path: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ffi(
      commandInput: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    fsMetadata(
      path: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBlockNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBlockTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCode(
      artifactPath: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDeployedCode(
      artifactPath: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLabel(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMappingKeyAndParentOf(
      target: string,
      elementSlot: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getMappingLength(
      target: string,
      mappingSlot: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getMappingSlotAt(
      target: string,
      mappingSlot: BytesLike,
      idx: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "getNonce(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getNonce((address,uint256,uint256,uint256))"(
      wallet: VmSafe.WalletStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getRecordedLogs(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    isDir(
      path: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    isFile(
      path: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    keyExists(
      json: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    label(
      account: string,
      newLabel: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    load(
      target: string,
      slot: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    parseAddress(
      stringifiedValue: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    parseBool(
      stringifiedValue: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    parseBytes(
      stringifiedValue: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    parseBytes32(
      stringifiedValue: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    parseInt(
      stringifiedValue: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "parseJson(string)"(
      json: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "parseJson(string,string)"(
      json: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    parseJsonAddress(
      json: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    parseJsonAddressArray(
      json: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    parseJsonBool(
      json: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    parseJsonBoolArray(
      json: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    parseJsonBytes(
      json: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    parseJsonBytes32(
      json: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    parseJsonBytes32Array(
      json: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    parseJsonBytesArray(
      json: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    parseJsonInt(
      json: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    parseJsonIntArray(
      json: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    parseJsonKeys(
      json: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    parseJsonString(
      json: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    parseJsonStringArray(
      json: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    parseJsonUint(
      json: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    parseJsonUintArray(
      json: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    parseUint(
      stringifiedValue: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pauseGasMetering(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    projectRoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "readDir(string,uint64)"(
      path: string,
      maxDepth: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "readDir(string,uint64,bool)"(
      path: string,
      maxDepth: BigNumberish,
      followLinks: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "readDir(string)"(
      path: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    readFile(
      path: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    readFileBinary(
      path: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    readLine(
      path: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    readLink(
      linkPath: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    record(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    recordLogs(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    rememberKey(
      privateKey: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    removeDir(
      path: string,
      recursive: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    removeFile(
      path: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    resumeGasMetering(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    rpc(
      method: string,
      params: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    rpcUrl(
      rpcAlias: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rpcUrlStructs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rpcUrls(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "serializeAddress(string,string,address[])"(
      objectKey: string,
      valueKey: string,
      values: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "serializeAddress(string,string,address)"(
      objectKey: string,
      valueKey: string,
      value: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "serializeBool(string,string,bool[])"(
      objectKey: string,
      valueKey: string,
      values: boolean[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "serializeBool(string,string,bool)"(
      objectKey: string,
      valueKey: string,
      value: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "serializeBytes(string,string,bytes[])"(
      objectKey: string,
      valueKey: string,
      values: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "serializeBytes(string,string,bytes)"(
      objectKey: string,
      valueKey: string,
      value: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "serializeBytes32(string,string,bytes32[])"(
      objectKey: string,
      valueKey: string,
      values: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "serializeBytes32(string,string,bytes32)"(
      objectKey: string,
      valueKey: string,
      value: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "serializeInt(string,string,int256)"(
      objectKey: string,
      valueKey: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "serializeInt(string,string,int256[])"(
      objectKey: string,
      valueKey: string,
      values: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    serializeJson(
      objectKey: string,
      value: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "serializeString(string,string,string[])"(
      objectKey: string,
      valueKey: string,
      values: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "serializeString(string,string,string)"(
      objectKey: string,
      valueKey: string,
      value: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "serializeUint(string,string,uint256)"(
      objectKey: string,
      valueKey: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "serializeUint(string,string,uint256[])"(
      objectKey: string,
      valueKey: string,
      values: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setEnv(
      name: string,
      value: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "sign((address,uint256,uint256,uint256),bytes32)"(
      wallet: VmSafe.WalletStruct,
      digest: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "sign(uint256,bytes32)"(
      privateKey: BigNumberish,
      digest: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sleep(
      duration: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "startBroadcast()"(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "startBroadcast(address)"(
      signer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "startBroadcast(uint256)"(
      privateKey: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    startMappingRecording(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    startStateDiffRecording(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    stopAndReturnStateDiff(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    stopBroadcast(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    stopMappingRecording(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "toString(address)"(
      value: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "toString(uint256)"(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "toString(bytes)"(
      value: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "toString(bool)"(
      value: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "toString(int256)"(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "toString(bytes32)"(
      value: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tryFfi(
      commandInput: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    unixTime(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    writeFile(
      path: string,
      data: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    writeFileBinary(
      path: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "writeJson(string,string,string)"(
      json: string,
      path: string,
      valueKey: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "writeJson(string,string)"(
      json: string,
      path: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    writeLine(
      path: string,
      data: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
