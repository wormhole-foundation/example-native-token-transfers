/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  Signer,
  utils,
} from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface INttManagerEventsInterface extends utils.Interface {
  functions: {};

  events: {
    "MessageAlreadyExecuted(bytes32,bytes32)": EventFragment;
    "MessageAttestedTo(bytes32,address,uint8)": EventFragment;
    "PeerUpdated(uint16,bytes32,bytes32)": EventFragment;
    "ThresholdChanged(uint8,uint8)": EventFragment;
    "TransceiverAdded(address,uint256,uint8)": EventFragment;
    "TransceiverRemoved(address,uint8)": EventFragment;
    "TransferRedeemed(bytes32)": EventFragment;
    "TransferSent(bytes32,uint256,uint16,uint64)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MessageAlreadyExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MessageAttestedTo"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PeerUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ThresholdChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransceiverAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransceiverRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferRedeemed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferSent"): EventFragment;
}

export interface MessageAlreadyExecutedEventObject {
  sourceNttManager: string;
  msgHash: string;
}
export type MessageAlreadyExecutedEvent = TypedEvent<
  [string, string],
  MessageAlreadyExecutedEventObject
>;

export type MessageAlreadyExecutedEventFilter =
  TypedEventFilter<MessageAlreadyExecutedEvent>;

export interface MessageAttestedToEventObject {
  digest: string;
  transceiver: string;
  index: number;
}
export type MessageAttestedToEvent = TypedEvent<
  [string, string, number],
  MessageAttestedToEventObject
>;

export type MessageAttestedToEventFilter =
  TypedEventFilter<MessageAttestedToEvent>;

export interface PeerUpdatedEventObject {
  chainId_: number;
  oldPeerContract: string;
  peerContract: string;
}
export type PeerUpdatedEvent = TypedEvent<
  [number, string, string],
  PeerUpdatedEventObject
>;

export type PeerUpdatedEventFilter = TypedEventFilter<PeerUpdatedEvent>;

export interface ThresholdChangedEventObject {
  oldThreshold: number;
  threshold: number;
}
export type ThresholdChangedEvent = TypedEvent<
  [number, number],
  ThresholdChangedEventObject
>;

export type ThresholdChangedEventFilter =
  TypedEventFilter<ThresholdChangedEvent>;

export interface TransceiverAddedEventObject {
  transceiver: string;
  transceiversNum: BigNumber;
  threshold: number;
}
export type TransceiverAddedEvent = TypedEvent<
  [string, BigNumber, number],
  TransceiverAddedEventObject
>;

export type TransceiverAddedEventFilter =
  TypedEventFilter<TransceiverAddedEvent>;

export interface TransceiverRemovedEventObject {
  transceiver: string;
  threshold: number;
}
export type TransceiverRemovedEvent = TypedEvent<
  [string, number],
  TransceiverRemovedEventObject
>;

export type TransceiverRemovedEventFilter =
  TypedEventFilter<TransceiverRemovedEvent>;

export interface TransferRedeemedEventObject {
  digest: string;
}
export type TransferRedeemedEvent = TypedEvent<
  [string],
  TransferRedeemedEventObject
>;

export type TransferRedeemedEventFilter =
  TypedEventFilter<TransferRedeemedEvent>;

export interface TransferSentEventObject {
  recipient: string;
  amount: BigNumber;
  recipientChain: number;
  msgSequence: BigNumber;
}
export type TransferSentEvent = TypedEvent<
  [string, BigNumber, number, BigNumber],
  TransferSentEventObject
>;

export type TransferSentEventFilter = TypedEventFilter<TransferSentEvent>;

export interface INttManagerEvents extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: INttManagerEventsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "MessageAlreadyExecuted(bytes32,bytes32)"(
      sourceNttManager?: BytesLike | null,
      msgHash?: BytesLike | null
    ): MessageAlreadyExecutedEventFilter;
    MessageAlreadyExecuted(
      sourceNttManager?: BytesLike | null,
      msgHash?: BytesLike | null
    ): MessageAlreadyExecutedEventFilter;

    "MessageAttestedTo(bytes32,address,uint8)"(
      digest?: null,
      transceiver?: null,
      index?: null
    ): MessageAttestedToEventFilter;
    MessageAttestedTo(
      digest?: null,
      transceiver?: null,
      index?: null
    ): MessageAttestedToEventFilter;

    "PeerUpdated(uint16,bytes32,bytes32)"(
      chainId_?: BigNumberish | null,
      oldPeerContract?: null,
      peerContract?: null
    ): PeerUpdatedEventFilter;
    PeerUpdated(
      chainId_?: BigNumberish | null,
      oldPeerContract?: null,
      peerContract?: null
    ): PeerUpdatedEventFilter;

    "ThresholdChanged(uint8,uint8)"(
      oldThreshold?: null,
      threshold?: null
    ): ThresholdChangedEventFilter;
    ThresholdChanged(
      oldThreshold?: null,
      threshold?: null
    ): ThresholdChangedEventFilter;

    "TransceiverAdded(address,uint256,uint8)"(
      transceiver?: null,
      transceiversNum?: null,
      threshold?: null
    ): TransceiverAddedEventFilter;
    TransceiverAdded(
      transceiver?: null,
      transceiversNum?: null,
      threshold?: null
    ): TransceiverAddedEventFilter;

    "TransceiverRemoved(address,uint8)"(
      transceiver?: null,
      threshold?: null
    ): TransceiverRemovedEventFilter;
    TransceiverRemoved(
      transceiver?: null,
      threshold?: null
    ): TransceiverRemovedEventFilter;

    "TransferRedeemed(bytes32)"(digest?: null): TransferRedeemedEventFilter;
    TransferRedeemed(digest?: null): TransferRedeemedEventFilter;

    "TransferSent(bytes32,uint256,uint16,uint64)"(
      recipient?: null,
      amount?: null,
      recipientChain?: null,
      msgSequence?: null
    ): TransferSentEventFilter;
    TransferSent(
      recipient?: null,
      amount?: null,
      recipientChain?: null,
      msgSequence?: null
    ): TransferSentEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
